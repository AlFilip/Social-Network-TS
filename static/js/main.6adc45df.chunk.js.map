{"version":3,"sources":["redux/selectors.ts","redux/redux-store.ts","api/profileApi.ts","redux/profileReducer.ts","api/usersApi.ts","api/authApi.ts","api/securityAPI.ts","redux/authReducer.ts","redux/diaogsReducer.ts","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Common/Preloader/Preloader.tsx","redux/appReducer.ts","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.module.css","components/Dialogs/Message/Message.module.css","redux/usersReducer.ts","components/Header/Header.module.css","components/NavBar/NavBar.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.tsx","components/Profile/ProfileInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Common/hoc/redirectHOC.tsx","MyRoutes.tsx","App.tsx","index.tsx"],"names":["selectIsAuth","state","auth","isAuth","selectIsUserLogin","login","selectAuthorisedUserId","id","selectCaptcha","captcha","selectAuthError","error","selectIsInitialised","app","isInitSuccess","selectItems","users","items","selectCurrentPage","currentPage","selectTotalPagesCount","totalPagesCount","selectUsersSearchTerm","term","selectCurrentProfile","profile","currentProfile","selectStatus","status","selectCurrentProfileUserId","userId","selectNewPostMessage","newPostMessage","selectPosts","posts","selectAdditionalUserInfo","additionalUserInfo","selectDialogs","dialogs","selectMessages","messages","selectNewMessageValue","newMessageValue","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","useSelector","window","profileRequestConfig","baseRequestConfig","baseURL","profileAxiosInstance","axios","create","profileApi","get","newStatus","put","image","data","FormData","append","headers","initState","v1","message","likesCount","addPost","type","onPostChange","newValue","setProfile","setPhotosToState","photos","setStatusToState","setAdditionalInfo","info","initProfile","dispatch","a","profileResponse","fullName","additionalInfoPromise","usersAPI","getUsers","GetStatusPromise","Promise","all","additionalInfoResponse","statusResponse","result","userData","find","user","payload","setStatus","resultCode","resultCodes","SUCCESS","console","log","setPhoto","photo","updateProfile","getState","toString","toggleUserProfileFollow","userInfo","apiMethod","followed","follow","unFollow","profileReducer","action","trim","axiosInstance","params","post","delete","loginResultCodes","withCredentials","authRequestConfig","authInstance","authAPI","me","logOut","securityAPI","email","setUserData","setError","getAuthUserData","makeLogin","loginData","ERROR","CAPTCHA_IS_REQUIRED","getCaptcha","makeLogout","url","authReducer","addMessage","onMessageChange","dialogsReducer","text","owner","module","exports","Preloader","className","s","container","ldsRipple","appStatus","initApp","getAuthPr","then","appReducer","totalItemsCount","pageSize","friend","undefined","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","setSearchParams","page","count","totalCount","usersReducer","map","m","Math","ceil","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useDispatch","onClick","to","Header","header","src","alt","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","ProfileStatus","authUserId","profileUserId","useState","editMode","setEditMode","spanValue","setSpanValue","useEffect","discardChanges","isStatusOwner","onDoubleClick","value","onChange","e","currentTarget","onKeyDown","key","onBlur","autoFocus","UpdateProfile","cancel","confirm","body","document","querySelector","style","overflow","modal","stopPropagation","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","youtube","website","validate","values","errors","Object","keys","forEach","f","href","test","onSubmit","setSubmitting","isSubmitting","disabled","name","placeholder","component","ProfileContact","title","marginLeft","ProfileInfo","authorisedUserId","isBtnDisabled","setIsBtnDisabled","profileImg","small","isAuthorisedUserProfile","profileInfo","htmlFor","display","files","description","reduce","acc","el","Post","postItem","postContent","postMessage","MyPosts","mappedPosts","p","Profile","useParams","Dialog","dialog","Message","userMessage","Component","Dialogs","dialogsItems","d","messagesItems","addMessageForm","Chat","React","lazy","Users","Login","MyRoutes","path","element","Suspense","fallback","App","isInitialised","AppContainer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6adc45df.chunk.js","sourcesContent":["import { AppStateType } from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectAuthorisedUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n\r\nexport const selectAuthError = (state: AppStateType) => state.auth.error\r\n\r\n\r\n// app\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\nexport const selectUsersSearchTerm = (state: AppStateType) => state.users.term\r\n\r\nexport const selectUsersSearchFriend = (state: AppStateType) => state.users.friend\r\n\r\n\r\n// profile\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectNewPostMessage = (state: AppStateType) => state.profile.newPostMessage\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\nexport const selectAdditionalUserInfo = (state: AppStateType) => state.profile.additionalUserInfo\r\n\r\n\r\n// dialogs\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectMessages = (state: AppStateType) => state.dialogs.messages\r\n\r\nexport const selectNewMessageValue = (state: AppStateType) => state.dialogs.newMessageValue\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { dialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers( {\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n} )\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n]\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore( rootReducer, composeWithDevTools( applyMiddleware( ...middleware ) ) )\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | dialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type ThunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector<AppStateType, T>( selector )\r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { photosType, profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType, resultCodes } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\ntype setPhotoResponseType = {\r\n    data: { photos: photosType }\r\n    resultCode: resultCodes\r\n    messages: string[]\r\n}\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n\r\n    setPhoto(image: File) {\r\n        const data = new FormData()\r\n        data.append( 'image', image )\r\n\r\n        return profileAxiosInstance.put<any, AxiosResponse<setPhotoResponseType>>( 'photo', data, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data',\r\n            },\r\n        } )\r\n    },\r\n    updateProfile(profile: Partial<profileType>) {\r\n        return profileAxiosInstance.put( '', profile )\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {resultCodes, usersAPI} from '../api/usersApi'\r\nimport {ThunkType} from './redux-store'\r\nimport {profileApi} from '../api/profileApi'\r\nimport {UserType} from \"./usersReducer\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi man', likesCount: 50},\r\n        {id: v1(), message: 'How are you', likesCount: 150},\r\n    ] as Array<PostType>,\r\n    newPostMessage: '',\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n    additionalUserInfo: {} as UserType\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.newPostMessage.trim()\r\n                ? {\r\n                    ...state,\r\n                    posts: [\r\n                        ...state.posts,\r\n                        {id: v1(), message: state.newPostMessage, likesCount: 0},\r\n                    ],\r\n                    newPostMessage: '',\r\n                }\r\n                : {...state, newPostMessage: ''}\r\n        case 'ON_POST_CHANGE':\r\n            return {...state, newPostMessage: action.newValue}\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return state.currentProfile\r\n                ? {\r\n                    ...state,\r\n                    currentProfile: {\r\n                        ...state.currentProfile,\r\n                        photos: action.photos,\r\n                    },\r\n                }\r\n                : state\r\n        case \"SET_ADDITIONAL_INFO\":\r\n            return {\r\n                ...state,\r\n                additionalUserInfo: action.info\r\n            }\r\n        case \"SET_PROFILE_STATE\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n    | setPhotosToStateActionType\r\n    | setAdditionalInfoActionType\r\n    | setProfileStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\ntype setPhotosToStateActionType = ReturnType<typeof setPhotosToState>\r\ntype setAdditionalInfoActionType = ReturnType<typeof setAdditionalInfo>\r\ntype setProfileStateActionType = ReturnType<typeof setProfileState>\r\n\r\nexport const addPost = () => ({type: 'ADD_POST'} as const)\r\nexport const onPostChange = (newValue: string) => ({type: 'ON_POST_CHANGE', newValue} as const)\r\nexport const setProfile = (currentProfile: profileType) => ({type: 'SET_PROFILE', currentProfile} as const)\r\nexport const setPhotosToState = (photos: photosType) => ({type: 'SET_PHOTOS', photos} as const)\r\nexport const setStatusToState = (status: string) => ({type: 'SET_STATUS', status} as const)\r\nexport const setAdditionalInfo = (info: UserType) => ({type: 'SET_ADDITIONAL_INFO', info} as const)\r\nexport const setProfileState = (payload: Partial<profileStateType>) => ({type: 'SET_PROFILE_STATE', payload} as const)\r\n\r\nexport const initProfile = (userId: string): ThunkType => async dispatch => {\r\n    const profileResponse = await profileApi.getProfile(userId)\r\n    let additionalInfoPromise\r\n    if (profileResponse && profileResponse.data && profileResponse.data.fullName) {\r\n        additionalInfoPromise = usersAPI.getUsers({term: profileResponse.data.fullName})\r\n\r\n    }\r\n    const GetStatusPromise = profileApi.getStatus(userId)\r\n\r\n    const [additionalInfoResponse, statusResponse] = await Promise.all([additionalInfoPromise, GetStatusPromise])\r\n    let result: Partial<profileStateType> = {}\r\n\r\n    if (profileResponse.status === 200) {\r\n        result.currentProfile = profileResponse.data\r\n    }\r\n\r\n    if (additionalInfoResponse?.status === 200) {\r\n        const userData = additionalInfoResponse.data.items.find(user => user.id === +userId)\r\n        if (userData) {\r\n            result.additionalUserInfo = userData\r\n        }\r\n    }\r\n    if (statusResponse.status === 200) {\r\n        result.status = statusResponse.data\r\n    }\r\n    dispatch(setProfileState(result))\r\n}\r\n\r\nexport const setStatus = (newStatus: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {messages, resultCode}} = await profileApi.setStatus(newStatus)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setStatusToState(newStatus))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoto = (photo: File): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode, messages, data: {photos}}} = await profileApi.setPhoto(photo)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setPhotosToState(photos))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: Partial<profileType>): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const currentProfile = getState().profile.currentProfile\r\n        console.log({...currentProfile, ...profile})\r\n        await profileApi.updateProfile(profile)\r\n        currentProfile\r\n        && await dispatch(initProfile((currentProfile.userId).toString()))\r\n        // messages[0]\r\n        // && console.log( messages[0] )\r\n        return true\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getProfileUserInfo = (payload: { term: string, userId: number }): ThunkType => async dispatch => {\r\n    const {userId, term} = payload\r\n    try {\r\n        const {data: {items}} = await usersAPI.getUsers({term})\r\n        const user = items.filter(user => user.id === userId)[0]\r\n        if (user) {\r\n            dispatch(setAdditionalInfo(user))\r\n        }\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const toggleUserProfileFollow = (userInfo: UserType): ThunkType => async dispatch => {\r\n    try {\r\n        const apiMethod = userInfo.followed ? usersAPI.follow : usersAPI.unFollow\r\n        const {status, data: {resultCode}} = await apiMethod(userInfo.id)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setAdditionalInfo(userInfo))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type getUsersParamsType  = {\r\n    page?: number\r\n    count?: number\r\n    term?: string\r\n    friend?: boolean\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (params:getUsersParamsType) => axiosInstance.get<responseType>( `/users`, { params }  ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<{ userId: number }, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios'\r\nimport { baseRequestConfig } from './authApi'\r\n\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return axios.get<{ url: string }>( 'security/get-captcha-url', baseRequestConfig )\r\n    },\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { ThunkType } from './redux-store'\r\nimport { securityAPI } from '../api/securityAPI'\r\n\r\n\r\nconst initState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false as boolean,\r\n    error: null as string | null\r\n}\r\ntype authStateType = typeof initState\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType | setErrorActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\ntype setErrorActionType = ReturnType<typeof setError>\r\n\r\nexport const setUserData = (payload: Partial<authStateType>) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const setError = (error: string) => ({\r\n    type: 'SET_ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0]) {\r\n            dispatch(setError(messages[0]))\r\n        }else if (resultCode === loginResultCodes.CAPTCHA_IS_REQUIRED) {\r\n            dispatch(setError(messages[0]))\r\n            dispatch(getCaptcha())\r\n        }\r\n        return\r\n    } catch (err) {\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( initState) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { data: { url } } = await securityAPI.getCaptcha()\r\n        dispatch(setUserData({captcha: url}))\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type dialogType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type messageType = {\r\n    id: string\r\n    text: string\r\n    owner: boolean\r\n}\r\n\r\nexport type dialogsStateType = typeof initState\r\n\r\nconst initState = {\r\n    dialogs: [] as Array<dialogType>,\r\n    messages: [] as Array<messageType>,\r\n    newMessageValue: '',\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsStateType = initState, action: dialogsActionTypes): dialogsStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            return state.newMessageValue.trim()\r\n                ? {\r\n                    ...state,\r\n                    messages: [\r\n                        ...state.messages,\r\n                        {id: v1(), text: state.newMessageValue, owner: true}\r\n                    ],\r\n                    newMessageValue: '',\r\n                }\r\n                : {...state, newMessageValue: ''}\r\n        case \"ON_MESSAGE_CHANGE\":\r\n            return {...state, newMessageValue: action.newValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type dialogsActionTypes = AddMessageAType | OnMessageChangeActionType\r\nexport type AddMessageAType = ReturnType<typeof addMessage>\r\nexport type OnMessageChangeActionType = ReturnType<typeof onMessageChange>\r\n\r\nexport const addMessage = () => ({type: 'ADD_MESSAGE'} as const)\r\nexport const onMessageChange = (newValue: string) => ({type: 'ON_MESSAGE_CHANGE', newValue} as const)\r\nexport const setDialogs = (newValue: string) => ({type: 'ON_MESSAGE_CHANGE', newValue} as const)\r\n\r\n\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__19X4w\",\"postContent\":\"Post_postContent__NaiCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ThunkType} from './redux-store'\r\nimport {getAuthUserData} from './authReducer'\r\n\r\ntype AppStatus = 'idle' | 'loading'\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n    appStatus: 'idle' as AppStatus\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\n\r\nconst setInitSuccess = () => ({\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const)\r\n\r\nexport const initApp = (): ThunkType => dispatch => {\r\n    const getAuthPr = dispatch(getAuthUserData())\r\n    Promise.all([getAuthPr])\r\n        .then(() => {\r\n            dispatch(setInitSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3f-uD\",\"description\":\"ProfileInfo_description__1V-2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateProfile\":\"UpdateProfile_updateProfile__29J1S\",\"modal\":\"UpdateProfile_modal__1TRFM\",\"wrapper\":\"UpdateProfile_wrapper__2KVW2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\"};","import { getUsersParamsType, resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    term: '',\r\n    friend: undefined as boolean | undefined,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        case 'SET_SEARCH_PARAMS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n    | setTermActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\nexport type setTermActionType = ReturnType<typeof setSearchParams>\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const setSearchParams = (payload: { term?: string, friend?: boolean, currentPage?: number }) => ( {\r\n    type: 'SET_SEARCH_PARAMS',\r\n    payload,\r\n} as const )\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n            return 'OK'\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (payload?: getUsersParamsType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const { currentPage, friend, pageSize, term } = getState().users\r\n        const { data, status } = await usersAPI.getUsers( {\r\n            page: currentPage,\r\n            count: pageSize,\r\n            friend,\r\n            term,\r\n            ...payload,\r\n        } )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qHHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2vr7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__WSORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__1aoyQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, ThunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<ThunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.css\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.css\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/friends'} linkName={'Friends'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import React, { ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\n\r\nimport s from './ProfileStatus.module.css'\r\nimport { setStatus, setStatusToState } from \"../../../../redux/profileReducer\"\r\nimport { selectCurrentProfileUserId, selectAuthorisedUserId, selectStatus } from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>( selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>( selectAuthorisedUserId )\r\n    const profileUserId = useSelector<AppStateType, number | undefined>( selectCurrentProfileUserId )\r\n    const [editMode, setEditMode] = useState( false )\r\n    const [spanValue, setSpanValue] = useState( status )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        status !== spanValue\r\n        && setSpanValue( status )\r\n    }, [status] )\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            dispatch( setStatusToState( '' ) )\r\n        }\r\n    }, [] )\r\n\r\n    const discardChanges = () => {\r\n        setEditMode( false )\r\n        setSpanValue( status )\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue( e.currentTarget.value )\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch( setStatus( spanValue ) )\r\n\r\n                setEditMode( false )\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = () => setEditMode( !editMode )\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={ onDoubleClickHandler }>\r\n\r\n            {\r\n                ( editMode && isStatusOwner )\r\n\r\n                    ? <input\r\n                        value={ spanValue }\r\n                        onChange={ onChangeHandler }\r\n                        onKeyDown={ onKeyDownHandler }\r\n                        onBlur={ discardChanges }\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span className={s.status}>\r\n                        { getStatusMessage() }\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport s from './UpdateProfile.module.css'\r\nimport { useAppSelector } from '../../../../redux/redux-store'\r\nimport { selectCurrentProfile } from '../../../../redux/selectors'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { updateProfile } from '../../../../redux/profileReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst validateHref = (href: string) => {\r\n    const regexp = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n    return regexp.test( href )\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    youtube: string\r\n    website: string,\r\n}\r\n\r\n\r\ntype initValuesTypeType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    contacts: Partial<contactsType>\r\n}\r\n\r\ntype UpdateProfilePropsType = {\r\n    confirm?: (payload: any) => void;\r\n    cancel: () => void;\r\n};\r\n\r\n\r\nexport const UpdateProfile = ({ cancel, confirm }: UpdateProfilePropsType) => {\r\n    const profile = useAppSelector( selectCurrentProfile )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        const body = document.querySelector( 'body' )\r\n        if (body) body.style.overflow = 'hidden'\r\n        return () => {\r\n            if (body) body.style.overflow = 'auto'\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <div className={ s.modal } onClick={ cancel }>\r\n            <div className={ s.updateProfile } onClick={ (e) => e.stopPropagation() }>\r\n                <Formik\r\n                    initialValues={ {\r\n                        fullName: profile?.fullName || '',\r\n                        aboutMe: profile?.aboutMe || '',\r\n                        lookingForAJob: profile?.lookingForAJob || false,\r\n                        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n                        contacts: {\r\n                            facebook: profile?.contacts.facebook || '',\r\n                            github: profile?.contacts.github || '',\r\n                            instagram: profile?.contacts.instagram || '',\r\n                            mainLink: profile?.contacts.mainLink || '',\r\n                            twitter: profile?.contacts.twitter || '',\r\n                            vk: profile?.contacts.vk || '',\r\n                            youtube: profile?.contacts.youtube || '',\r\n                            website: profile?.contacts.website || '',\r\n                        },\r\n                    } }\r\n                    validate={ values => {\r\n                        const errors: Partial<initValuesTypeType> = {}\r\n                        if (!values.lookingForAJobDescription) {\r\n                            errors.lookingForAJobDescription = 'Required'\r\n                        }\r\n                        if (!values.fullName) {\r\n                            errors.fullName = 'Required'\r\n                        }\r\n                        if (!values.aboutMe) {\r\n                            errors.aboutMe = 'Required'\r\n                        }\r\n                        Object.keys( values.contacts ).forEach( f => {\r\n                            const key = f as keyof contactsType\r\n                            if (values.contacts[key] && !validateHref( values.contacts[key] )) {\r\n                                if (!errors.contacts) {\r\n                                    errors.contacts = {}\r\n                                }\r\n                                errors.contacts[key] = 'invalid link'\r\n                            }\r\n                        } )\r\n                        return errors\r\n                    } }\r\n                    onSubmit={ async (values, { setSubmitting }) => {\r\n                        const success = await dispatch( updateProfile( values ) )\r\n                        setSubmitting( false )\r\n                    } }\r\n                >\r\n                    { ({ values, isSubmitting }) => (\r\n                        <Form action=\"\">\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Personal information</legend>\r\n                                <span>My name</span>\r\n                                <Field type=\"text\" name='fullName' placeholder='Name'/>\r\n                                <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n                                <span>About me</span>\r\n                                <Field type=\"text\" name='aboutMe' placeholder='about me'/>\r\n                                <ErrorMessage name={ 'aboutMe' } component={ 'div' }/>\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Job information</legend>\r\n                                <div><Field type=\"checkbox\" name='lookingForAJob'/>\r\n                                    <span>Looking for a job</span></div>\r\n                                {\r\n                                    values.lookingForAJob\r\n                                    && <>\r\n                                        <span>Job description</span>\r\n                                        <Field type=\"text\" name='lookingForAJobDescription'\r\n                                               placeholder='looking for a job description'/>\r\n                                        <ErrorMessage name={ 'lookingForAJobDescription' } component={ 'div' }/>\r\n                                    </>\r\n                                }\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Contacts</legend>\r\n                                {\r\n                                    Object.keys( values.contacts ).map( m => {\r\n                                        return (\r\n                                            <div key={ m }>\r\n                                                <Field type=\"text\" name={ `contacts.${ m }` } placeholder={ m }/>\r\n                                                <ErrorMessage name={ `contacts.${ m }` } component={ 'div' }/>\r\n                                            </div>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </fieldset>\r\n                            <button type='submit' disabled={ isSubmitting }>send</button>\r\n                        </Form> ) }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const ProfileContact: React.FC<{ title: string, value: string | null }> = ({title, value}) => {\r\n    return (\r\n        <div style={{marginLeft: 15}}>{title}: {value}</div>\r\n    )\r\n}","import React, {ChangeEventHandler, useEffect, useState} from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport {selectAdditionalUserInfo, selectAuthorisedUserId, selectCurrentProfile} from '../../../redux/selectors'\r\nimport {useAppSelector} from '../../../redux/redux-store'\r\nimport {contactsType, setPhoto, toggleUserProfileFollow} from '../../../redux/profileReducer'\r\nimport {UpdateProfile} from './UpdateProfile/UpdateProfile'\r\nimport {ProfileContact} from \"./ProfileContact/ProfileContact\";\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const profile = useSelector(selectCurrentProfile)\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n    const additionalUserInfo = useAppSelector(selectAdditionalUserInfo)\r\n    const [isBtnDisabled, setIsBtnDisabled] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const profileImg = (profile && profile.photos.small) ? profile.photos.small : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    // console.log('profileInfo')\r\n    const onPhotoClickHandle: ChangeEventHandler<HTMLInputElement> = e => {\r\n        e.currentTarget.files &&\r\n        dispatch(setPhoto(e.currentTarget.files[0]))\r\n    }\r\n\r\n    const toggleFollowClickHandle = () => {\r\n        setIsBtnDisabled(true)\r\n        dispatch(toggleUserProfileFollow({\r\n            ...additionalUserInfo,\r\n            followed: !additionalUserInfo.followed\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isBtnDisabled) setIsBtnDisabled(false)\r\n    }, [additionalUserInfo])\r\n\r\n    const isAuthorisedUserProfile = profile?.userId === authorisedUserId\r\n\r\n    useEffect(() => {\r\n        if (editMode) setEditMode(false)\r\n    }, [profile])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                && <UpdateProfile cancel={() => setEditMode(false)}/>\r\n            }\r\n            {\r\n                profile\r\n                    ? <div className={s.profileInfo}>\r\n                        <label htmlFor=\"image\">\r\n                            {\r\n                                isAuthorisedUserProfile &&\r\n                                <input type=\"file\" name=\"image\" id=\"image\" style={{display: 'none'}}\r\n                                       onChange={onPhotoClickHandle}/>\r\n                            }\r\n                            <img src={profileImg} alt=\"\"/>\r\n                        </label>\r\n                        <div className={s.description}>\r\n                            {profile.fullName}\r\n                            <ProfileStatus/>\r\n                        </div>\r\n                        {\r\n                            profile && authorisedUserId && !isAuthorisedUserProfile\r\n                            && (\r\n                                <button onClick={toggleFollowClickHandle} disabled={isBtnDisabled}>\r\n                                    {additionalUserInfo.followed ? 'Unfollow' : 'Follow'}\r\n                                </button>\r\n                            )}\r\n\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n            <div>\r\n                <div>About me: {profile?.aboutMe}</div>\r\n                <div>Looking for a job: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n                {profile?.lookingForAJob && <div>Job description: {profile?.lookingForAJobDescription}</div>}\r\n                <div>Contacts:</div>\r\n                {\r\n                    profile\r\n                    && Object.keys(profile.contacts)\r\n                        .reduce((acc, el) => {\r\n                            const value = profile.contacts[el as keyof contactsType]\r\n                            return value ? [...acc, <ProfileContact value={value} title={el} key={el}/>] : acc\r\n                        }, [] as JSX.Element[])\r\n                }\r\n            </div>\r\n\r\n            {\r\n                isAuthorisedUserProfile\r\n                && <button onClick={() => setEditMode(true)}>edit profile</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\nfunction Post (props:PostType) {\n    return (\n        <div className={s.postItem}>\n            <div className={s.postContent}>\n                <img src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\" alt=\"\"/>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                Likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, { ChangeEvent } from \"react\"\nimport Post from \"./Post/Post\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addPost, onPostChange, PostType } from \"../../../redux/profileReducer\"\nimport { AppStateType } from \"../../../redux/redux-store\"\nimport { selectNewPostMessage, selectPosts } from '../../../redux/selectors'\n\n\nexport function MyPosts() {\n    console.log('my posts')\n    const newPostMessage = useSelector<AppStateType, string>( selectNewPostMessage )\n    const posts = useSelector<AppStateType, PostType[]>( selectPosts )\n    const dispatch = useDispatch()\n\n    const onButtonClickHandler = () => dispatch( addPost() )\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.currentTarget.value\n        dispatch( onPostChange( value ) )\n    }\n    const mappedPosts = posts.map( p => <Post id={ p.id } key={ p.id } message={ p.message }\n                                              likesCount={ p.likesCount }/> )\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea value={ newPostMessage } onChange={ onChangeHandler } name=\"\" id=\"\"/>\n            </div>\n            <div>\n                <button onClick={ onButtonClickHandler }>Add Post</button>\n            </div>\n            { mappedPosts }\n        </div>\n    )\n}","import React, { useEffect } from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\"\r\nimport { MyPosts } from \"./MyPosts/MyPosts\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAppSelector } from '../../redux/redux-store'\r\nimport { selectAuthorisedUserId } from '../../redux/selectors'\r\nimport { initProfile, setProfile } from '../../redux/profileReducer'\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n    let { userId } = useParams<PathParamsType>()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector( selectAuthorisedUserId )\r\n    useEffect( () => {\r\n        if (!userId && authUserId) {\r\n            userId = authUserId.toString()\r\n        }\r\n        userId\r\n        && dispatch( initProfile( userId ) )\r\n        return () => {\r\n            dispatch( setProfile( null ) )\r\n        }\r\n    }, [userId] )\r\n\r\n    return (\r\n        <div className={ s.profile }>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {dialogType} from \"../../../redux/diaogsReducer\";\r\n\r\nfunction Dialog(props:dialogType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <SuperLink to={`/dialogs/${props.id}`} linkName={props.name}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {messageType} from \"../../../redux/diaogsReducer\";\r\n\r\n\r\nfunction Message (props:messageType) {\r\n    return (\r\n        <div className={`${props.owner ? s.userMessage: s.message}`}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport Message from \"./Message/Message\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {useAppSelector} from \"../../redux/redux-store\"\r\nimport {addMessage, onMessageChange} from \"../../redux/diaogsReducer\"\r\nimport {redirectHOC} from \"../Common/hoc/redirectHOC\"\r\nimport {selectDialogs, selectMessages, selectNewMessageValue} from '../../redux/selectors'\r\n\r\n\r\nconst Dialogs = redirectHOC( () => {\r\n    const dialogs = useAppSelector( selectDialogs )\r\n    const messages = useAppSelector( selectMessages )\r\n    const newMessageValue = useAppSelector( selectNewMessageValue )\r\n    // const isAuth = useAppSelector( selectIsAuth )\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonClickHandler = (): void => {\r\n        dispatch( addMessage() )\r\n    }\r\n    const onNewMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n        dispatch( onMessageChange( e.currentTarget.value ) )\r\n    }\r\n\r\n    const dialogsItems = dialogs.map( d => <Dialog name={ d.name } key={ d.id } id={ d.id }/> )\r\n    const messagesItems = messages.map( m => <Message id={ m.id } key={ m.id } text={ m.text } owner={ m.owner }/> )\r\n\r\n\r\n    return (\r\n\r\n        <div className={ s.dialogs }>\r\n            <div className={ s.dialogsItems }>\r\n                <h3>Dialogs:</h3>\r\n                { dialogsItems }\r\n            </div>\r\n            <div className={ s.messages }>\r\n                { messagesItems }\r\n            </div>\r\n            <div className={ s.addMessageForm }>\r\n                <textarea onChange={ onNewMessageChange } value={ newMessageValue }/>\r\n                <button onClick={ onButtonClickHandler }>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport default Dialogs","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import { Navigate, Route, Routes } from 'react-router-dom'\r\nimport { Profile } from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\nimport React from 'react'\r\n\r\n\r\nconst Chat = React.lazy( () => import('./components/Chat/Chat') )\r\nconst Users = React.lazy( () => import('./components/Users/Users') )\r\nconst Login = React.lazy( () => import('./components/Login/Login') )\r\n\r\nexport const MyRoutes = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={ '/profile' } element={ <Profile/> }>\r\n                <Route path={ ':userId' } element={ <Profile/> }/>\r\n            </Route>\r\n            <Route path='/dialogs' element={ <Dialogs/> }/>\r\n            <Route path={ '/users' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Users/>\r\n                </React.Suspense> ) }\r\n            />\r\n            <Route path={ '/friends' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Users/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path={ '/login' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Login/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path={ '/chat' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Chat/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path=\"*\" element={ <Navigate to=\"/profile\"/> }/>\r\n        </Routes>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport Header from \"./components/Header/Header\"\r\nimport { NavBar } from \"./components/NavBar/NavBar\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport { Provider, useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType, store } from './redux/redux-store'\r\nimport { Preloader } from './components/Common/Preloader/Preloader'\r\nimport { initApp } from './redux/appReducer'\r\nimport { selectIsInitialised } from './redux/selectors'\r\nimport { MyRoutes } from './MyRoutes'\r\n\r\n\r\nconst App = () => {\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const isInitialised = useSelector<AppStateType, boolean>( selectIsInitialised )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( initApp() )\r\n    }, [] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised ? <div className=\"app-wrapper\">\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <div className={ 'app-wrapper-content' }>\r\n\r\n                            <MyRoutes/>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}