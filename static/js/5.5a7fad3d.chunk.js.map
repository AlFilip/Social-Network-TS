{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx"],"names":["module","exports","loginSchema","Yup","shape","email","required","password","min","max","Login","isAuth","useSelector","selectIsAuth","dispatch","useDispatch","onSubmitHandler","values","a","setStatus","setErrors","setSubmitting","makeLogin","to","initialValues","rememberMe","validationSchema","onSubmit","isSubmitting","className","s","form","disabled","name","type","placeholder"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,KAAO,sB,mJCuBnBC,EAAcC,MAAaC,MAAO,CACpCC,MAAOF,MAAaE,MAAO,iBAAkBC,SAAU,YAIvDC,SAAUJ,MACLK,IAAK,EAAG,cACRC,IAAK,GAAI,aACTH,SAAU,cA+CJI,UA5CD,WACV,IAAMC,EAASC,YAAoCC,KAC7CC,EAAWC,cAEXC,EAAe,uCAAG,WAAOC,EAAP,oBAAAC,EAAA,wDAAkCC,UAAWC,EAA7C,EAA6CA,UAAWC,EAAxD,EAAwDA,cAC5EP,EAAUQ,YAAWL,EAAQ,CAAGG,YAAWC,mBADvB,2CAAH,wDAGrB,OAAIV,EAAe,cAAC,IAAD,CAAUY,GAAK,aAG9B,8BACI,cAAC,IAAD,CACIC,cAAgB,CACZnB,MAAO,GACPE,SAAU,GACVkB,YAAY,GAEhBC,iBAAmBxB,EACnByB,SAAWX,EAPf,SAUQ,gBAAGY,EAAH,EAAGA,aAAH,OACI,eAAC,IAAD,CAAMC,UAAYC,IAAEC,KAApB,UACI,gCACI,cAAC,IAAD,CAAOC,SAAWJ,EAAeK,KAAK,QAAQC,KAAK,QAAQC,YAAY,UACvE,cAAC,IAAD,CAAcF,KAAK,aAEvB,gCACI,cAAC,IAAD,CAAOD,SAAWJ,EAAeK,KAAK,WAAWE,YAAY,WACtDD,KAAK,aACZ,cAAC,IAAD,CAAcD,KAAK,gBAEvB,gDAEI,cAAC,IAAD,CAAOC,KAAK,WAAWD,KAAK,kBAEhC,wBAAQD,SAAWJ,EAAeM,KAAK,SAAvC","file":"static/js/5.5a7fad3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2EAT-\"};","import React from \"react\"\r\nimport { ErrorMessage, Field, Form, Formik, FormikHelpers } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport s from './Login.module.css'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { makeLogin } from \"../../redux/authReducer\"\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { Navigate} from \"react-router-dom\"\r\nimport { FormikErrors } from 'formik/dist/types'\r\nimport { selectIsAuth } from '../../redux/selectors'\r\n\r\n\r\nexport type loginValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type formikActionsTypes = {\r\n    // setStatus: (status?: any) => void\r\n    setErrors: (errors: FormikErrors<loginValuesType>) => void;\r\n    setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\nconst loginSchema = Yup.object().shape( {\r\n    email: Yup.string().email( 'Invalid email' ).required( 'Required' ),\r\n    // Yup.string()\r\n    // .email( 'Invalid email' )\r\n    // .required( 'Required' ),\r\n    password: Yup.string()\r\n        .min( 2, 'Too Short!' )\r\n        .max( 50, 'Too Long!' )\r\n        .required( 'Required' ),\r\n} )\r\n\r\nconst Login = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmitHandler = async (values: loginValuesType, { setStatus, setErrors, setSubmitting }: FormikHelpers<loginValuesType>) => {\r\n        dispatch( makeLogin( values, {  setErrors, setSubmitting } ) )\r\n    }\r\n    if (isAuth) return <Navigate to={ '/profile' }/>\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={ {\r\n                    email: '',\r\n                    password: '',\r\n                    rememberMe: false,\r\n                } }\r\n                validationSchema={ loginSchema }\r\n                onSubmit={ onSubmitHandler }\r\n            >\r\n                {\r\n                    ({ isSubmitting }) =>\r\n                        <Form className={ s.form }>\r\n                            <div>\r\n                                <Field disabled={ isSubmitting } name='email' type='email' placeholder='login'/>\r\n                                <ErrorMessage name=\"email\"/>\r\n                            </div>\r\n                            <div>\r\n                                <Field disabled={ isSubmitting } name='password' placeholder='password'\r\n                                       type='password'/>\r\n                                <ErrorMessage name=\"password\"/>\r\n                            </div>\r\n                            <label>\r\n                                Remember me\r\n                                <Field type='checkbox' name='rememberMe'/>\r\n                            </label>\r\n                            <button disabled={ isSubmitting } type='submit'>ok</button>\r\n                        </Form>\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login"],"sourceRoot":""}