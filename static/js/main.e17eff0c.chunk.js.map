{"version":3,"sources":["redux/selectors.ts","redux/redux-store.ts","api/usersApi.ts","api/authApi.ts","api/profileApi.ts","redux/profileReducer.ts","api/dialogsApi.ts","redux/diaogsReducer.ts","redux/appReducer.ts","components/Profile/Posts/PostItem/PostItem.module.scss","api/securityAPI.ts","redux/authReducer.ts","components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/Posts/AddPostForm/AddPostForm.module.scss","components/Dialogs/Message/Message.module.css","components/Common/Preloader/Preloader.tsx","App.module.scss","components/Dialogs/Message/ContextMenu/ContextMenu.module.scss","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.module.css","redux/usersReducer.ts","components/Header/Header.module.scss","components/NavBar/NavBar.module.scss","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileLinks/ProfileLinks.module.scss","components/Profile/Posts/Posts.module.scss","components/Chat/Chat.module.scss","components/SideBar/SideBar.module.scss","components/Chat/ChatMessageItem.tsx","components/Chat/ChatMessages.tsx","components/Chat/ChatInput.tsx","components/Chat/Chat.tsx","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.tsx","assets/images/profileBg.jpg","components/Profile/ProfileInfo/ProfileLinks/ProfileLinks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/PostItem/PostItem.tsx","components/Profile/Posts/AddPostForm/AddPostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/ContextMenu/ContextMenu.tsx","components/Dialogs/Message/Message.tsx","components/Common/hoc/redirectHOC.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","MyRoutes.tsx","components/SideBar/SideBar.tsx","App.tsx","index.tsx"],"names":["selectIsAuth","state","auth","isAuth","selectIsUserLogin","login","selectAuthorisedUserId","id","selectCaptcha","captcha","selectAuthError","error","selectIsInitialised","app","isInitSuccess","selectScreenSize","screenSize","selectItems","users","items","selectCurrentPage","currentPage","selectTotalPagesCount","totalPagesCount","selectUsersSearchTerm","term","selectCurrentProfile","profile","currentProfile","selectStatus","status","selectCurrentProfileUserName","fullName","selectCurrentProfileUserId","userId","selectPosts","posts","selectAdditionalUserInfo","additionalUserInfo","selectDialogs","dialogs","selectMessages","messages","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","useSelector","window","resultCodes","axiosInstance","axios","create","baseRequestConfig","usersAPI","getUsers","params","get","follow","post","unFollow","a","delete","loginResultCodes","baseURL","withCredentials","headers","authRequestConfig","authInstance","authAPI","me","payload","logOut","profileRequestConfig","profileAxiosInstance","profileApi","newStatus","put","image","data","FormData","append","initState","v1","message","likesCount","addPost","type","setProfile","setPhotosToState","photos","setStatusToState","setAdditionalInfo","info","getProfileWithAdditionalInfo","dispatch","profileResponse","additionalInfoPromise","GetStatusPromise","Promise","all","additionalInfoResponse","statusResponse","result","userData","find","user","setStatus","resultCode","SUCCESS","console","log","setPhoto","photo","updateProfile","getState","toString","toggleUserProfileFollow","userInfo","apiMethod","followed","profileReducer","action","dialogsRequestConfig","dialogsAxiosInstance","dialogsApi","body","messageId","totalCount","addMessage","clearDialogsState","markMessageAsDeleted","markMessageAsNotDeleted","getDialogs","length","getMessages","sendMessage","messageBody","startChat","setAsASpam","deleteMessage","restoreMessage","dialogsReducer","map","deleted","f","viewed","appStatus","setScreenSize","initApp","getAuthPr","getAuthUserData","then","appReducer","module","exports","securityAPI","email","setUserData","setError","makeLogin","loginData","ERROR","CAPTCHA_IS_REQUIRED","getCaptcha","makeLogout","url","authReducer","Preloader","className","s","container","ldsRipple","totalItemsCount","pageSize","friend","undefined","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","setSearchParams","page","count","usersReducer","m","Math","ceil","ChatMessageItem","firstName","userName","split","style","display","flexDirection","alignItems","padding","borderBottom","to","width","borderRadius","height","src","alt","fontSize","substring","paddingLeft","alignSelf","ChatMessages","useState","setMessages","messagesBlock","useRef","useEffect","setTimeout","current","scrollTo","scrollHeight","mappedMessages","index","overflowY","border","ref","ChatInput","callback","textAreaValue","setTextAreaValue","value","onChange","e","currentTarget","onKeyPress","code","ctrlKey","onClick","preventDefault","Chat","ws","setWs","WebSocket","onmessage","JSON","parse","close","chat","send","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useDispatch","Header","header","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","ProfileStatus","authUserId","profileUserId","editMode","setEditMode","spanValue","setSpanValue","discardChanges","isStatusOwner","onDoubleClick","onKeyDown","key","onBlur","autoFocus","UpdateProfile","cancel","confirm","document","querySelector","overflow","modal","stopPropagation","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","youtube","website","validate","values","errors","Object","keys","forEach","href","test","onSubmit","setSubmitting","isSubmitting","disabled","name","placeholder","component","ProfileLinks","profileLinks","target","rel","icon","faFacebook","size","faVk","faGithub","faInstagram","faTwitter","faYoutube","faPortrait","ProfileInfo","authorisedUserId","isBtnDisabled","setIsBtnDisabled","navigate","useNavigate","profileImg","large","isAuthorisedUserProfile","profileInfoWrapper","bgImg","profileInfo","htmlFor","files","description","profileLinksWrapper","PostItem","postItem","senderInfo","postContent","postMessage","faThumbsUp","thumb","AddPostForm","addPostForm","resetForm","setValues","form","textarea","as","Posts","useParams","mappedPosts","p","Profile","Dialog","dialog","ContextMenu","closeCallback","wrapper","menu","actionsList","Message","Component","isMenuActive","setMenuActivity","messageClassName","senderId","userMessage","restore","onAuxClick","onContextMenu","filter","el","reduce","acc","AddMessageForm","setMessage","addMessageForm","Dialogs","currentDialog","DialogsArray","Messages","dialogsItems","React","lazy","Users","Login","MyRoutes","path","element","Suspense","fallback","SideBar","sidebar","App","isInitialised","resizeHandle","innerWidth","addEventListener","removeEventListener","appWrapper","appWrapperContent","content","AppContainer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e17eff0c.chunk.js","sourcesContent":["import {AppStateType} from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectAuthorisedUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n\r\nexport const selectAuthError = (state: AppStateType) => state.auth.error\r\n\r\n\r\n// app\r\n\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\nexport const selectScreenSize = (state: AppStateType) => state.app.screenSize\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\nexport const selectUsersSearchTerm = (state: AppStateType) => state.users.term\r\n\r\nexport const selectUsersSearchFriend = (state: AppStateType) => state.users.friend\r\n\r\n\r\n// profile\r\n\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserName = (state: AppStateType) => state.profile.currentProfile?.fullName\r\n\r\nexport const selectCurrentProfileUserPhotos = (state: AppStateType) => state.profile.currentProfile?.photos\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\nexport const selectAdditionalUserInfo = (state: AppStateType) => state.profile.additionalUserInfo\r\n\r\n\r\n// dialogs\r\n\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectMessages = (state: AppStateType) => state.dialogs.messages\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { DialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers( {\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n} )\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n]\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore( rootReducer, composeWithDevTools( applyMiddleware( ...middleware ) ) )\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | DialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type ThunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector<AppStateType, T>( selector )\r\n}","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type getUsersParamsType  = {\r\n    page?: number\r\n    count?: number\r\n    term?: string\r\n    friend?: boolean\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (params:getUsersParamsType) => axiosInstance.get<responseType>( `/users`, { params }  ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<loginDataType, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { photosType, profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType, resultCodes } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\ntype setPhotoResponseType = {\r\n    data: { photos: photosType }\r\n    resultCode: resultCodes\r\n    messages: string[]\r\n}\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n\r\n    setPhoto(image: File) {\r\n        const data = new FormData()\r\n        data.append( 'image', image )\r\n\r\n        return profileAxiosInstance.put<any, AxiosResponse<setPhotoResponseType>>( 'photo', data, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data',\r\n            },\r\n        } )\r\n    },\r\n    updateProfile(profile: Partial<profileType>) {\r\n        return profileAxiosInstance.put( '', profile )\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {resultCodes, usersAPI} from '../api/usersApi'\r\nimport {ThunkType} from './redux-store'\r\nimport {profileApi} from '../api/profileApi'\r\nimport {UserType} from \"./usersReducer\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        {id: v1(), message: '\\n' +\r\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis fringilla iaculis augue, non vehicula ex. Donec facilisis faucibus iaculis. Vivamus purus purus, auctor vitae imperdiet non, congue ac nulla. Mauris finibus dui in nulla mollis, et blandit diam lacinia. Sed eget ligula in magna tincidunt facilisis varius vitae ipsum. Vivamus luctus sem orci, eu consectetur augue ornare quis. Aliquam erat volutpat. Maecenas finibus velit eget sapien sollicitudin, at aliquam velit molestie. Pellentesque sit amet ex at dolor dignissim ultrices. Pellentesque placerat consequat est ut iaculis. Sed diam magna, bibendum non diam id, rhoncus efficitur urna. Praesent non tincidunt libero. Quisque efficitur, tortor eu imperdiet imperdiet, quam risus consequat erat, at facilisis turpis justo eget libero.\\n' +\r\n                '\\n' +\r\n                'Morbi ac eros vel odio ornare interdum. Morbi pharetra quam eu accumsan interdum. Nullam fringilla imperdiet turpis eu auctor. Aliquam non magna euismod, ultrices tellus a, lobortis felis. Fusce suscipit nulla quis ultricies aliquam. Morbi ac sem sem. Maecenas in ullamcorper ante. Quisque in molestie ex, eu laoreet tortor. Sed laoreet fringilla quam eu vestibulum. Quisque eu cursus enim.', likesCount: 50},\r\n        {id: v1(), message: 'How are you', likesCount: 150},\r\n    ] as Array<PostType>,\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n    additionalUserInfo: {} as UserType\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return {\r\n                ...state,\r\n                posts: [action.message, ...state.posts]\r\n            }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return state.currentProfile\r\n                ? {\r\n                    ...state,\r\n                    currentProfile: {\r\n                        ...state.currentProfile,\r\n                        photos: action.photos,\r\n                    },\r\n                }\r\n                : state\r\n        case \"SET_ADDITIONAL_INFO\":\r\n            return {\r\n                ...state,\r\n                additionalUserInfo: action.info\r\n            }\r\n        case \"SET_PROFILE_STATE\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n    | setPhotosToStateActionType\r\n    | setAdditionalInfoActionType\r\n    | setProfileStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\ntype setPhotosToStateActionType = ReturnType<typeof setPhotosToState>\r\ntype setAdditionalInfoActionType = ReturnType<typeof setAdditionalInfo>\r\ntype setProfileStateActionType = ReturnType<typeof setProfileState>\r\n\r\nexport const addPost = (message: string) => ({type: 'ADD_POST', message: {id: v1(), likesCount: 0, message}} as const)\r\nexport const onPostChange = (newValue: string) => ({type: 'ON_POST_CHANGE', newValue} as const)\r\nexport const setProfile = (currentProfile: profileType) => ({type: 'SET_PROFILE', currentProfile} as const)\r\nexport const setPhotosToState = (photos: photosType) => ({type: 'SET_PHOTOS', photos} as const)\r\nexport const setStatusToState = (status: string) => ({type: 'SET_STATUS', status} as const)\r\nexport const setAdditionalInfo = (info: UserType) => ({type: 'SET_ADDITIONAL_INFO', info} as const)\r\nexport const setProfileState = (payload: Partial<profileStateType>) => ({type: 'SET_PROFILE_STATE', payload} as const)\r\n\r\nexport const getProfileWithAdditionalInfo = (userId: string): ThunkType => async dispatch => {\r\n    const profileResponse = await profileApi.getProfile(userId)\r\n    let additionalInfoPromise\r\n    if (profileResponse && profileResponse.data && profileResponse.data.fullName) {\r\n        additionalInfoPromise = usersAPI.getUsers({term: profileResponse.data.fullName})\r\n    }\r\n    const GetStatusPromise = profileApi.getStatus(userId)\r\n\r\n    const [additionalInfoResponse, statusResponse] = await Promise.all([additionalInfoPromise, GetStatusPromise])\r\n    let result: Partial<profileStateType> = {}\r\n\r\n    if (profileResponse.status === 200) {\r\n        result.currentProfile = profileResponse.data\r\n    }\r\n\r\n    if (additionalInfoResponse?.status === 200) {\r\n        const userData = additionalInfoResponse.data.items.find(user => user.id === +userId)\r\n        if (userData) {\r\n            result.additionalUserInfo = userData\r\n        }\r\n    }\r\n    if (statusResponse.status === 200) {\r\n        result.status = statusResponse.data\r\n    }\r\n    dispatch(setProfileState(result))\r\n}\r\n\r\nexport const setStatus = (newStatus: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {messages, resultCode}} = await profileApi.setStatus(newStatus)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setStatusToState(newStatus))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoto = (photo: File): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode, messages, data: {photos}}} = await profileApi.setPhoto(photo)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setPhotosToState(photos))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: Partial<profileType>): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const currentProfile = getState().profile.currentProfile\r\n        console.log({...currentProfile, ...profile})\r\n        await profileApi.updateProfile(profile)\r\n        currentProfile\r\n        && await dispatch(getProfileWithAdditionalInfo((currentProfile.userId).toString()))\r\n        // messages[0]\r\n        // && console.log( messages[0] )\r\n        return true\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getProfileUserInfo = (payload: { term: string, userId: number }): ThunkType => async dispatch => {\r\n    const {userId, term} = payload\r\n    try {\r\n        const {data: {items}} = await usersAPI.getUsers({term})\r\n        const user = items.filter(user => user.id === userId)[0]\r\n        if (user) {\r\n            dispatch(setAdditionalInfo(user))\r\n        }\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const toggleUserProfileFollow = (userInfo: UserType): ThunkType => async dispatch => {\r\n    try {\r\n        const apiMethod = userInfo.followed ? usersAPI.follow : usersAPI.unFollow\r\n        const {status, data: {resultCode}} = await apiMethod(userInfo.id)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setAdditionalInfo(userInfo))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import axios, {AxiosResponse} from \"axios\"\r\nimport {baseRequestConfig} from './authApi'\r\nimport {commonResponseType} from \"./usersApi\";\r\nimport {photosType} from \"../redux/profileReducer\";\r\n\r\nconst dialogsRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${baseRequestConfig.baseURL}dialogs/`,\r\n\r\n}\r\n\r\nconst dialogsAxiosInstance = axios.create(dialogsRequestConfig)\r\n\r\nexport const dialogsApi = {\r\n    getAllDialogs() {\r\n        return dialogsAxiosInstance.get<DomainDialogType[]>('')\r\n    },\r\n    getNewMessagesCount() {\r\n        return dialogsAxiosInstance.get<number>('messages/new/count')\r\n    },\r\n    getMessages(userId: number) {\r\n        return dialogsAxiosInstance.get<getMessagesResponseType>(`${userId}/messages`)\r\n    },\r\n    startChat(userId: number) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`${userId}`)\r\n    },\r\n    sendMessage(userId: number, message: string) {\r\n        return dialogsAxiosInstance\r\n            .post <{ body: string }, AxiosResponse<commonResponseType<{ \"message\": ReducedDomainMessageType }>>>\r\n            (`${userId}/messages`, {body: message})\r\n    },\r\n    checkMessageViewed(messageId: string) {\r\n        return dialogsAxiosInstance.get<boolean>(`messages/${messageId}/viewed`)\r\n    },\r\n    sendMessageToSpam(messageId: string) {\r\n        return dialogsAxiosInstance.post<commonResponseType>(`messages/${messageId}/spam`)\r\n    },\r\n    deleteMessage(messageId: string) {\r\n        return dialogsAxiosInstance.delete<commonResponseType>(`messages/${messageId}`)\r\n    },\r\n    restoreMessage(messageId: string) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`messages/${messageId}/restore`)\r\n    },\r\n    getMessagesByDate(userId: string, date: string) {\r\n        return dialogsAxiosInstance.get(`${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n}\r\n\r\nexport type ReducedDomainMessageType = {\r\n    \"id\": string,\r\n    \"body\": string,\r\n    \"translatedBody\": null,\r\n    \"addedAt\": string,\r\n    \"senderId\": number,\r\n    \"senderName\": string,\r\n    \"recipientId\": number,\r\n    \"viewed\": boolean\r\n}\r\n\r\n// type fullDomainMessageType = reducedDomainMessageType & {\r\n//     \"recipientName\": string,\r\n//     \"deletedBySender\": boolean,\r\n//     \"deletedByRecipient\": boolean,\r\n//     \"isSpam\": boolean,\r\n//     \"distributionId\": null | number\r\n// }\r\n\r\nexport type DomainDialogType = {\r\n    \"id\": number,\r\n    \"userName\": string,\r\n    \"hasNewMessages\": boolean,\r\n    \"lastDialogActivityDate\": string,\r\n    \"lastUserActivityDate\": string,\r\n    \"newMessagesCount\": number,\r\n    \"photos\": photosType\r\n}\r\n\r\nexport type getMessagesResponseType = {\r\n    \"items\": ReducedDomainMessageType [],\r\n    \"totalCount\": number,\r\n    \"error\": null | string,\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {dialogsApi, DomainDialogType, getMessagesResponseType, ReducedDomainMessageType} from \"../api/dialogsApi\";\r\nimport {ThunkType} from \"./redux-store\";\r\nimport {resultCodes} from \"../api/usersApi\";\r\n\r\nconst initState = {\r\n    dialogs: [] as DomainDialogType[],\r\n    messages: {\r\n        items: [],\r\n        error: null,\r\n        totalCount: 0,\r\n    } as MessagesStateType,\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initState, action: DialogsActionTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            }\r\n\r\n        case \"SET_MESSAGES\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...action.messages,\r\n                    items: action.messages.items.map(message => ({...message, deleted: false}))\r\n                }\r\n            }\r\n\r\n        case \"CLEAR_STATE\":\r\n            return action.initState\r\n\r\n        case \"ADD_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: [...state.messages.items, {...action.message, deleted: false}],\r\n                    totalCount: state.messages.totalCount + 1\r\n                }\r\n            }\r\n\r\n        case \"SET_MESSAGE_VIEWED\":\r\n            const message = state.messages.items.find(f => f.id === action.messageId)\r\n            return message?.viewed === action.viewed\r\n                ? state\r\n                : {\r\n                    ...state,\r\n                    messages: {\r\n                        ...state.messages,\r\n                        items: state.messages.items\r\n                            .map(message => message.id === action.messageId ? ({\r\n                                ...message,\r\n                                viewed: action.viewed\r\n                            }) : message)\r\n                    }\r\n                }\r\n\r\n        case \"MARK_MESSAGE_AS_DELETED\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: state.messages.items\r\n                        .map(message => message.id === action.messageId ? {...message, deleted: true} : message)\r\n                }\r\n            }\r\n\r\n        case \"MARK_MESSAGE_AS_NOT_DELETED\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: state.messages.items\r\n                        .map(message => message.id === action.messageId ? {...message, deleted: false} : message)\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setDialogs = (dialogs: DomainDialogType[]) => ({\r\n    type: 'SET_DIALOGS', dialogs\r\n} as const)\r\n\r\nexport const setCurrentDialog = (dialog: DomainDialogType) => ({\r\n    type: 'SET_CURRENT_DIALOG', dialog\r\n} as const)\r\n\r\nexport const setMessages = (messages: getMessagesResponseType) => ({\r\n    type: 'SET_MESSAGES', messages\r\n} as const)\r\n\r\nexport const addMessage = (message: ReducedDomainMessageType) => ({\r\n    type: 'ADD_MESSAGE', message\r\n} as const)\r\n\r\nexport const setMessageViewed = (messageId: string, viewed: boolean) => ({\r\n    type: 'SET_MESSAGE_VIEWED', messageId, viewed\r\n} as const)\r\n\r\nexport const clearDialogsState = () => ({type: 'CLEAR_STATE', initState} as const)\r\n\r\nexport const markMessageAsDeleted = (messageId: string) => ({\r\n    type: 'MARK_MESSAGE_AS_DELETED', messageId\r\n} as const)\r\n\r\nexport const markMessageAsNotDeleted = (messageId: string) => ({\r\n    type: 'MARK_MESSAGE_AS_NOT_DELETED', messageId\r\n} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const getDialogs = (): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.getAllDialogs()\r\n        if (status === 200 && data.length) {\r\n            dispatch(setDialogs(data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getMessages = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.getMessages(userId)\r\n        if (status === 200) {\r\n            dispatch(setMessages(data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n\r\nexport const sendMessage = (userId: number, messageBody: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {data: {message}, resultCode}} = await dialogsApi.sendMessage(userId, messageBody)\r\n        if (resultCode === resultCodes.SUCCESS) {\r\n            dispatch(addMessage(message))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const startChat = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode}} = await dialogsApi.startChat(userId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(getDialogs())\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const checkMessageViewed = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.checkMessageViewed(messageId)\r\n        if (status === 200) {\r\n            dispatch(setMessageViewed(messageId, data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const setAsASpam = (messageId: string): ThunkType => async () => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.sendMessageToSpam(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            console.log(`message with id: \"${messageId}\" successfully sent to spam`)\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const deleteMessage = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.deleteMessage(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(markMessageAsDeleted(messageId))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const restoreMessage = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.restoreMessage(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(markMessageAsNotDeleted(messageId))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type DialogsActionTypes = SetDialogsActionType\r\n    | SetLastDialogActionType\r\n    | AddMessageActionType\r\n    | SetMessagesActionType\r\n    | ClearStateActionType\r\n    | SetMessageViewedActionType\r\n    | MarkMessageAsDeletedActionType\r\n    | MarkMessageAsNtoDeletedActionType\r\n\r\ntype SetDialogsActionType = ReturnType<typeof setDialogs>\r\ntype SetLastDialogActionType = ReturnType<typeof setCurrentDialog>\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\ntype SetMessagesActionType = ReturnType<typeof setMessages>\r\ntype ClearStateActionType = ReturnType<typeof clearDialogsState>\r\ntype SetMessageViewedActionType = ReturnType<typeof setMessageViewed>\r\ntype MarkMessageAsDeletedActionType = ReturnType<typeof markMessageAsDeleted>\r\ntype MarkMessageAsNtoDeletedActionType = ReturnType<typeof markMessageAsNotDeleted>\r\n\r\n\r\nexport type DialogsStateType = typeof initState\r\n\r\nexport type MessageType = ReducedDomainMessageType & {\r\n    deleted: boolean\r\n}\r\n\r\ntype MessagesStateType = {\r\n    items: MessageType[]\r\n    error: null | string\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport default dialogsReducer","import {ThunkType} from './redux-store'\r\nimport {getAuthUserData} from './authReducer'\r\n\r\ntype AppStatus = 'idle' | 'loading'\r\nexport type ScreenSizeTypes = 'XS' | 'XL' | 'L' | 'M' | 'S' | null\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n    appStatus: 'idle' as AppStatus,\r\n    screenSize: null as ScreenSizeTypes,\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n        case \"SET_SCREEN_SIZE\":\r\n            return {\r\n                ...state,\r\n                screenSize: action.screenSize\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n    | setScreenSizeActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\ntype setScreenSizeActionType = ReturnType<typeof setScreenSize>\r\n\r\nconst setInitSuccess = () => ({\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const)\r\n\r\nexport const setScreenSize = (screenSize: ScreenSizeTypes) => ({\r\n    type: 'SET_SCREEN_SIZE', screenSize\r\n} as const)\r\n\r\nexport const initApp = (): ThunkType => dispatch => {\r\n    const getAuthPr = dispatch(getAuthUserData())\r\n    Promise.all([getAuthPr])\r\n        .then(() => {\r\n            dispatch(setInitSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"PostItem_postItem__3R1Nm\",\"senderInfo\":\"PostItem_senderInfo__3gJLl\",\"userName\":\"PostItem_userName__2t377\",\"postContent\":\"PostItem_postContent__Ujt2Q\",\"postMessage\":\"PostItem_postMessage__2PRT_\"};","import axios from 'axios'\r\nimport { baseRequestConfig } from './authApi'\r\n\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return axios.get<{ url: string }>( 'security/get-captcha-url', baseRequestConfig )\r\n    },\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { ThunkType } from './redux-store'\r\nimport { securityAPI } from '../api/securityAPI'\r\n\r\n\r\nconst initState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false as boolean,\r\n    error: null as string | null\r\n}\r\ntype authStateType = typeof initState\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType | setErrorActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\ntype setErrorActionType = ReturnType<typeof setError>\r\n\r\nexport const setUserData = (payload: Partial<authStateType>) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const setError = (error: string) => ({\r\n    type: 'SET_ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0]) {\r\n            dispatch(setError(messages[0]))\r\n        }else if (resultCode === loginResultCodes.CAPTCHA_IS_REQUIRED) {\r\n            dispatch(setError(messages[0]))\r\n            dispatch(getCaptcha())\r\n        }\r\n        return\r\n    } catch (err) {\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( initState) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { data: { url } } = await securityAPI.getCaptcha()\r\n        dispatch(setUserData({captcha: url}))\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__3HrGi\",\"profileInfo\":\"ProfileInfo_profileInfo__2oKQW\",\"description\":\"ProfileInfo_description__1PfUA\",\"profileLinksWrapper\":\"ProfileInfo_profileLinksWrapper__2dCmj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostForm\":\"AddPostForm_addPostForm__23UOw\",\"header\":\"AddPostForm_header__3EoG2\",\"form\":\"AddPostForm_form__3tkXc\",\"textarea\":\"AddPostForm_textarea__3Oa3U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\",\"deleted\":\"Message_deleted__2jdCO\",\"restore\":\"Message_restore__3apcv\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__25_mc\",\"appWrapperContent\":\"App_appWrapperContent__3Qvhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContextMenu_wrapper__1CUlW\",\"menu\":\"ContextMenu_menu__1GXSa\",\"actionsList\":\"ContextMenu_actionsList__tZ5DF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateProfile\":\"UpdateProfile_updateProfile__29J1S\",\"modal\":\"UpdateProfile_modal__1TRFM\",\"wrapper\":\"UpdateProfile_wrapper__2KVW2\"};","import { getUsersParamsType, resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    term: '',\r\n    friend: undefined as boolean | undefined,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        case 'SET_SEARCH_PARAMS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n    | setTermActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\nexport type setTermActionType = ReturnType<typeof setSearchParams>\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const setSearchParams = (payload: { term?: string, friend?: boolean, currentPage?: number }) => ( {\r\n    type: 'SET_SEARCH_PARAMS',\r\n    payload,\r\n} as const )\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n            return 'OK'\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (payload?: getUsersParamsType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const { currentPage, friend, pageSize, term } = getState().users\r\n        const { data, status } = await usersAPI.getUsers( {\r\n            page: currentPage,\r\n            count: pageSize,\r\n            friend,\r\n            term,\r\n            ...payload,\r\n        } )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2huKZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__rV9Xp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__b1EmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__1aoyQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileLinks\":\"ProfileLinks_profileLinks__14F4O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__2PQVu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__1n6oF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"SideBar_sidebar__2CbqP\"};","import React, {FC} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {chatMessageType} from './Chat'\r\n\r\n\r\nexport const ChatMessageItem: FC<chatMessageType> = ({userId, message, photo, userName}) => {\r\n    photo = photo ? photo : 'https://via.placeholder.com/50'\r\n\r\n    const firstName = userName.split(' ')[0]\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            padding: 5,\r\n            borderBottom: '2px solid rgba(150, 150, 150, 0.2)'\r\n        }}>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n            }}>\r\n                <Link to={'/profile/' + userId} style={{width: 50}}>\r\n                    <img style={{borderRadius: '50%',\r\n                        height: 50,\r\n                        width: 50}} src={photo} alt=\"senderPhoto\"/>\r\n                </Link>\r\n                <span style={{fontSize: '0.7em'}}>\r\n                    {\r\n                        firstName.length < 10 ? firstName : firstName.substring(0, 9)\r\n                    }\r\n                </span>\r\n            </div>\r\n\r\n            <span style={{paddingLeft: 5, alignSelf: 'flex-start'}}>{message}</span>\r\n        </div>\r\n    )\r\n}","import React, { FC, useEffect, useRef, useState } from 'react'\r\nimport { chatMessageType } from './Chat'\r\nimport { ChatMessageItem } from './ChatMessageItem'\r\n\r\n\r\nexport const ChatMessages: FC<{ data: chatMessageType[] }> = ({ data }) => {\r\n    const [messages, setMessages] = useState<chatMessageType[]>( [] )\r\n\r\n    const messagesBlock = useRef<HTMLDivElement>( null )\r\n\r\n    useEffect( () => {\r\n        setMessages( [...messages, ...data] )\r\n        setTimeout( () => {\r\n            messagesBlock.current\r\n            && messagesBlock.current.scrollTo( 0, messagesBlock.current.scrollHeight )\r\n        }, 0 )\r\n        return () => {\r\n        }\r\n    }, [data] )\r\n\r\n    const mappedMessages = messages.map( (m, index) => {\r\n        return <ChatMessageItem key={ index } { ...m }/>\r\n    } )\r\n\r\n\r\n    return (\r\n        <div style={ {\r\n            height: '50vh',\r\n            width: '100%',\r\n            overflowY: 'auto',\r\n            border: '1px solid rgba(0,0,0,0.3)',\r\n            borderRadius: 20,\r\n        } } ref={ messagesBlock }>\r\n            {\r\n                mappedMessages.length\r\n                    ? mappedMessages\r\n                    : 'no new messages'\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent, FC, KeyboardEventHandler, MouseEventHandler, useState } from 'react'\r\n\r\n\r\nexport const ChatInput: FC<{ callback: (message: string) => void }> = ({ callback }) => {\r\n    const [textAreaValue, setTextAreaValue] = useState( '' )\r\n\r\n    const onTextValueChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setTextAreaValue( e.currentTarget.value )\r\n    }\r\n\r\n    const onKeyPressHandler: KeyboardEventHandler<HTMLTextAreaElement> = e => {\r\n        if (e.code === 'Enter' && e.ctrlKey) {\r\n            callback( textAreaValue )\r\n            setTextAreaValue( '' )\r\n        }\r\n    }\r\n\r\n    const onClickHandler: MouseEventHandler<HTMLButtonElement> = e => {\r\n        e.preventDefault()\r\n        callback( textAreaValue )\r\n        setTextAreaValue( '' )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea value={ textAreaValue } onChange={ onTextValueChangeHandler } onKeyPress={ onKeyPressHandler }/>\r\n            <button onClick={ onClickHandler }>send</button>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nimport s from './Chat.module.scss'\r\nimport { ChatMessages } from './ChatMessages'\r\nimport { ChatInput } from './ChatInput'\r\n\r\n\r\nexport type chatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState<chatMessageType[]>( [] )\r\n    const [ws, setWs] = useState<WebSocket | null>( null )\r\n\r\n    useEffect( () => {\r\n        const ws = new WebSocket( 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx' )\r\n        ws.onmessage = (message) => {\r\n            setMessages( JSON.parse( message.data ) )\r\n        }\r\n        setWs( ws )\r\n        return () =>{\r\n            ws.close()\r\n        }\r\n    }, [] )\r\n\r\n    const sendMessage = (message: string) => {\r\n        if (ws && message) {\r\n            ws.send( message )\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.chat}>\r\n            <ChatMessages data={ messages }/>\r\n            <div>\r\n                <ChatInput callback={ sendMessage }/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, ThunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<ThunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.scss\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.scss\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/friends'} linkName={'Friends'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import React, {ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"../../../../redux/redux-store\"\r\n\r\nimport s from './ProfileStatus.module.css'\r\nimport {setStatus, setStatusToState} from \"../../../../redux/profileReducer\"\r\nimport {selectAuthorisedUserId, selectCurrentProfileUserId, selectStatus} from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>(selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>(selectAuthorisedUserId)\r\n    const profileUserId = useSelector<AppStateType, number | undefined>(selectCurrentProfileUserId)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [spanValue, setSpanValue] = useState(status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (status !== spanValue) {\r\n            setSpanValue(status)\r\n        }\r\n    }, [status])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setStatusToState(''))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const discardChanges = () => {\r\n        setEditMode(false)\r\n        setSpanValue(status)\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue(e.currentTarget.value)\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch(setStatus(spanValue))\r\n\r\n                setEditMode(false)\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = () => setEditMode(!editMode)\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={onDoubleClickHandler}>\r\n\r\n            {\r\n                (editMode && isStatusOwner)\r\n\r\n                    ? <input\r\n                        value={spanValue}\r\n                        onChange={onChangeHandler}\r\n                        onKeyDown={onKeyDownHandler}\r\n                        onBlur={discardChanges}\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span className={s.status}>\r\n                        {getStatusMessage()}\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport s from './UpdateProfile.module.css'\r\nimport { useAppSelector } from '../../../../redux/redux-store'\r\nimport { selectCurrentProfile } from '../../../../redux/selectors'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { updateProfile } from '../../../../redux/profileReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst validateHref = (href: string) => {\r\n    const regexp = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n    return regexp.test( href )\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    youtube: string\r\n    website: string,\r\n}\r\n\r\n\r\ntype initValuesTypeType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    contacts: Partial<contactsType>\r\n}\r\n\r\ntype UpdateProfilePropsType = {\r\n    confirm?: (payload: any) => void;\r\n    cancel: () => void;\r\n};\r\n\r\n\r\nexport const UpdateProfile = ({ cancel, confirm }: UpdateProfilePropsType) => {\r\n    const profile = useAppSelector( selectCurrentProfile )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        const body = document.querySelector( 'body' )\r\n        if (body) body.style.overflow = 'hidden'\r\n        return () => {\r\n            if (body) body.style.overflow = 'auto'\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <div className={ s.modal } onClick={ cancel }>\r\n            <div className={ s.updateProfile } onClick={ (e) => e.stopPropagation() }>\r\n                <Formik\r\n                    initialValues={ {\r\n                        fullName: profile?.fullName || '',\r\n                        aboutMe: profile?.aboutMe || '',\r\n                        lookingForAJob: profile?.lookingForAJob || false,\r\n                        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n                        contacts: {\r\n                            facebook: profile?.contacts.facebook || '',\r\n                            github: profile?.contacts.github || '',\r\n                            instagram: profile?.contacts.instagram || '',\r\n                            mainLink: profile?.contacts.mainLink || '',\r\n                            twitter: profile?.contacts.twitter || '',\r\n                            vk: profile?.contacts.vk || '',\r\n                            youtube: profile?.contacts.youtube || '',\r\n                            website: profile?.contacts.website || '',\r\n                        },\r\n                    } }\r\n                    validate={ values => {\r\n                        const errors: Partial<initValuesTypeType> = {}\r\n                        if (!values.lookingForAJobDescription) {\r\n                            errors.lookingForAJobDescription = 'Required'\r\n                        }\r\n                        if (!values.fullName) {\r\n                            errors.fullName = 'Required'\r\n                        }\r\n                        if (!values.aboutMe) {\r\n                            errors.aboutMe = 'Required'\r\n                        }\r\n                        Object.keys( values.contacts ).forEach( f => {\r\n                            const key = f as keyof contactsType\r\n                            if (values.contacts[key] && !validateHref( values.contacts[key] )) {\r\n                                if (!errors.contacts) {\r\n                                    errors.contacts = {}\r\n                                }\r\n                                errors.contacts[key] = 'invalid link'\r\n                            }\r\n                        } )\r\n                        return errors\r\n                    } }\r\n                    onSubmit={ async (values, { setSubmitting }) => {\r\n                        await dispatch( updateProfile( values ) )\r\n                        setSubmitting( false )\r\n                    } }\r\n                >\r\n                    { ({ values, isSubmitting }) => (\r\n                        <Form action=\"\">\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Personal information</legend>\r\n                                <span>My name</span>\r\n                                <Field type=\"text\" name='fullName' placeholder='Name'/>\r\n                                <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n                                <span>About me</span>\r\n                                <Field type=\"text\" name='aboutMe' placeholder='about me'/>\r\n                                <ErrorMessage name={ 'aboutMe' } component={ 'div' }/>\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Job information</legend>\r\n                                <div><Field type=\"checkbox\" name='lookingForAJob'/>\r\n                                    <span>Looking for a job</span></div>\r\n                                {\r\n                                    values.lookingForAJob\r\n                                    && <>\r\n                                        <span>Job description</span>\r\n                                        <Field type=\"text\" name='lookingForAJobDescription'\r\n                                               placeholder='looking for a job description'/>\r\n                                        <ErrorMessage name={ 'lookingForAJobDescription' } component={ 'div' }/>\r\n                                    </>\r\n                                }\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Contacts</legend>\r\n                                {\r\n                                    Object.keys( values.contacts ).map( m => {\r\n                                        return (\r\n                                            <div key={ m }>\r\n                                                <Field type=\"text\" name={ `contacts.${ m }` } placeholder={ m }/>\r\n                                                <ErrorMessage name={ `contacts.${ m }` } component={ 'div' }/>\r\n                                            </div>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </fieldset>\r\n                            <button type='submit' disabled={ isSubmitting }>send</button>\r\n                        </Form> ) }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/profileBg.587e6c4c.jpg\";","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faFacebook, faGithub, faInstagram, faTwitter, faVk, faYoutube} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faPortrait} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {contactsType} from \"../../../../redux/profileReducer\";\r\n\r\nimport s from './ProfileLinks.module.scss'\r\n\r\ntype ProfileLinksPropsType = {\r\n    contacts: contactsType\r\n}\r\n\r\n\r\nexport const ProfileLinks: React.FC<ProfileLinksPropsType> = ({\r\n                                                                  contacts\r\n                                                              }) => {\r\n\r\n    return (\r\n        <div className={s.profileLinks}>\r\n            {\r\n                contacts.facebook\r\n                && <a href={contacts.facebook} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faFacebook} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.vk\r\n                && <a href={contacts.vk} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faVk} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.github\r\n                && <a href={contacts.github} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faGithub} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.instagram\r\n                && <a href={contacts.instagram} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faInstagram} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.twitter\r\n                && <a href={contacts.twitter} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faTwitter} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.youtube\r\n                && <a href={contacts.youtube} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faYoutube} size='2x'/>\r\n                </a>\r\n            }\r\n            {\r\n                contacts.website\r\n                && <a href={contacts.website} target='_blank' rel='noreferrer'>\r\n                    <FontAwesomeIcon icon={faPortrait} size='2x'/>\r\n                </a>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEventHandler, useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nimport s from \"./ProfileInfo.module.scss\"\r\n\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport {selectAdditionalUserInfo, selectAuthorisedUserId, selectCurrentProfile} from '../../../redux/selectors'\r\nimport {useAppSelector} from '../../../redux/redux-store'\r\nimport {setPhoto, toggleUserProfileFollow} from '../../../redux/profileReducer'\r\nimport {UpdateProfile} from './UpdateProfile/UpdateProfile'\r\nimport bgImg from \"../../../assets/images/profileBg.jpg\";\r\nimport {ProfileLinks} from \"./ProfileLinks/ProfileLinks\";\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const profile = useSelector(selectCurrentProfile)\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n    const additionalUserInfo = useAppSelector(selectAdditionalUserInfo)\r\n    const [isBtnDisabled, setIsBtnDisabled] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const profileImg = (profile && profile.photos.large) ? profile.photos.large : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    const onPhotoClickHandle: ChangeEventHandler<HTMLInputElement> = e => {\r\n        e.currentTarget.files &&\r\n        dispatch(setPhoto(e.currentTarget.files[0]))\r\n    }\r\n\r\n    const toggleFollowClickHandle = () => {\r\n        setIsBtnDisabled(true)\r\n        dispatch(toggleUserProfileFollow({\r\n            ...additionalUserInfo,\r\n            followed: !additionalUserInfo.followed\r\n        }))\r\n    }\r\n\r\n    const sendMessageClickHandle = () => navigate(`/dialogs/${profile?.userId}`)\r\n\r\n    useEffect(() => {\r\n        if (isBtnDisabled) setIsBtnDisabled(false)\r\n    }, [additionalUserInfo, isBtnDisabled])\r\n\r\n    const isAuthorisedUserProfile = profile?.userId === authorisedUserId\r\n\r\n    useEffect(() => {\r\n        if (editMode) setEditMode(false)\r\n    }, [profile])\r\n\r\n    return (\r\n        <div className={s.profileInfoWrapper}>\r\n            <img src={bgImg} alt=\"background image\"/>\r\n            {\r\n                editMode\r\n                && <UpdateProfile cancel={() => setEditMode(false)}/>\r\n            }\r\n            {\r\n                profile\r\n                    ? <div className={s.profileInfo}>\r\n                        <label htmlFor=\"image\">\r\n                            {\r\n                                isAuthorisedUserProfile &&\r\n                                <input type=\"file\" name=\"image\" id=\"image\" style={{display: 'none'}}\r\n                                       onChange={onPhotoClickHandle}/>\r\n                            }\r\n                            <img src={profileImg} alt=\"\"/>\r\n                        </label>\r\n                        <div className={s.description}>\r\n                            {profile.fullName}\r\n                            {\r\n                                isAuthorisedUserProfile\r\n                                && <button onClick={() => setEditMode(true)}>edit profile</button>\r\n                            }\r\n                            <ProfileStatus/>\r\n\r\n                            <div>About me: {profile?.aboutMe}</div>\r\n                            <div>Looking for a job: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n                            {profile?.lookingForAJob && <div>Job description: {profile?.lookingForAJobDescription}</div>}\r\n                        </div>\r\n                        {\r\n                            profile && authorisedUserId && !isAuthorisedUserProfile\r\n                            && <>\r\n                                <button onClick={toggleFollowClickHandle} disabled={isBtnDisabled}>\r\n                                    {additionalUserInfo.followed ? 'Unfollow' : 'Follow'}\r\n                                </button>\r\n                                <button onClick={sendMessageClickHandle}>\r\n                                    Send message\r\n                                </button>\r\n\r\n                            </>}\r\n\r\n                        <div className={s.profileLinksWrapper}>\r\n                            <ProfileLinks contacts={profile.contacts}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nimport s from \"./PostItem.module.scss\"\nimport {PostType} from \"../../../../redux/profileReducer\";\nimport {useAppSelector} from \"../../../../redux/redux-store\";\nimport {\n    selectAuthorisedUserId,\n    selectCurrentProfileUserId,\n    selectCurrentProfileUserName\n} from \"../../../../redux/selectors\";\nimport { faThumbsUp } from \"@fortawesome/free-regular-svg-icons\";\n\n\nfunction PostItem(props: PostType) {\n    const userName = useAppSelector(selectCurrentProfileUserName)\n    const currentProfileUserId = useAppSelector(selectCurrentProfileUserId)\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\n\n    return (\n        <div className={s.postItem}>\n            <div className={s.senderInfo}>\n                <img\n                    src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\n                    alt=\"\"/>\n                <span className={s.userName}>\n                    {userName}\n                </span>\n            </div>\n            <div className={s.postContent}>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                <FontAwesomeIcon icon={faThumbsUp} className={s.thumb}/>\n                {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default PostItem;","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../../../redux/profileReducer\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport s from './AddPostForm.module.scss'\r\n\r\nexport const AddPostForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={s.addPostForm}>\r\n            <h3 className={s.header}>Create New Post</h3>\r\n            <Formik initialValues={{message: ''}}\r\n                    onSubmit={(values, {setSubmitting, setValues, resetForm}) => {\r\n                        dispatch(addPost(values.message))\r\n                        setSubmitting(false)\r\n                        resetForm()\r\n\r\n                    }}\r\n            >\r\n                {({values, isSubmitting}) => (\r\n                    <Form action=\"\"\r\n                          className={s.form}\r\n                    >\r\n                        <Field className={s.textarea} name='message' as='textarea' placeholder='Write something here'/>\r\n                        <button type='submit' disabled={isSubmitting}>Post</button>\r\n                    </Form>)}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\n\nimport s from './Posts.module.scss'\nimport PostItem from \"./PostItem/PostItem\"\nimport {useAppSelector} from \"../../../redux/redux-store\"\nimport {selectAuthorisedUserId, selectPosts} from '../../../redux/selectors'\nimport {AddPostForm} from \"./AddPostForm/AddPostForm\";\nimport {useParams} from \"react-router-dom\";\n\n\nexport function Posts() {\n    const posts = useAppSelector(selectPosts)\n    let {userId} = useParams()\n    const authUserId = useAppSelector(selectAuthorisedUserId)\n\n    const mappedPosts = posts.map(p => <PostItem id={p.id} key={p.id} message={p.message}\n                                                 likesCount={p.likesCount}/>)\n\n    return (\n        <div className={s.posts}>\n            {\n                (!userId || +userId === authUserId)\n                && <AddPostForm/>\n            }\n            {mappedPosts}\n        </div>\n    )\n}","import React, {useEffect} from \"react\"\r\nimport s from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\"\r\nimport {Posts} from \"./Posts/Posts\"\r\nimport {useParams} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from '../../redux/redux-store'\r\nimport {selectAuthorisedUserId, selectScreenSize} from '../../redux/selectors'\r\nimport {getProfileWithAdditionalInfo, setProfile} from '../../redux/profileReducer'\r\nimport Chat from \"../Chat/Chat\";\r\n\r\n\r\nexport const Profile = () => {\r\n    let {userId} = useParams()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector(selectAuthorisedUserId)\r\n    const screenSize = useAppSelector(selectScreenSize)\r\n    useEffect(() => {\r\n        let id = userId\r\n        if (!id && authUserId) {\r\n            id = authUserId.toString()\r\n        }\r\n        id\r\n        && dispatch(getProfileWithAdditionalInfo(id))\r\n\r\n        return () => {\r\n            dispatch(setProfile(null))\r\n        }\r\n    }, [userId, dispatch, authUserId])\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n            {\r\n                (screenSize === 'XL' || screenSize === 'L')\r\n                && <Chat/>\r\n            }\r\n            <Posts/>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {DomainDialogType} from \"../../../api/dialogsApi\";\r\n\r\ntype DialogPropsType = {\r\n    dialog: DomainDialogType\r\n    // callback: (dialog: DomainDialogType) => void\r\n}\r\n\r\nfunction Dialog({\r\n                    dialog,\r\n                    // callback\r\n                }: DialogPropsType) {\r\n    return (\r\n        <div className={s.dialog}\r\n             // onClick={() => callback(dialog)}\r\n        >\r\n            <SuperLink to={`/dialogs/${dialog.id}`} linkName={dialog.userName}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog","import s from './ContextMenu.module.scss'\r\nimport {MouseEventHandler} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteMessage, setAsASpam} from \"../../../../redux/diaogsReducer\";\r\n\r\ntype ContextMenuPropsType = {\r\n    closeCallback?: () => void\r\n    messageId: string\r\n}\r\n\r\nexport const ContextMenu = ({\r\n                                closeCallback,\r\n                                messageId,\r\n                            }: ContextMenuPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const deleteClickHandle: MouseEventHandler<HTMLLIElement> = () => {\r\n        dispatch(deleteMessage(messageId))\r\n    }\r\n    const spamClickHandle: MouseEventHandler<HTMLLIElement> = () => {\r\n        dispatch(setAsASpam(messageId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper} onClick={closeCallback}>\r\n            <div className={s.menu}>\r\n                <ul className={s.actionsList}>\r\n                    <li onClick={deleteClickHandle}>delete</li>\r\n                    <li onClick={spamClickHandle}>set as spam</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {MouseEventHandler, useEffect, useState} from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {useAppSelector} from \"../../../redux/redux-store\";\r\nimport {selectAuthorisedUserId} from \"../../../redux/selectors\";\r\nimport {ContextMenu} from \"./ContextMenu/ContextMenu\";\r\nimport {MessageType, restoreMessage} from \"../../../redux/diaogsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: MessageType\r\n}\r\n\r\nfunction Message({\r\n                     message,\r\n                 }: MessagePropsType) {\r\n    const [isMenuActive, setMenuActivity] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n\r\n    const auxClickHandle: MouseEventHandler<HTMLDivElement> = e => {\r\n        e.preventDefault()\r\n        setMenuActivity(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setMenuActivity(false)\r\n    }, [message])\r\n\r\n    const restoreHandle = () => {\r\n        dispatch(restoreMessage(message.id))\r\n    }\r\n\r\n    const messageClassName = `${message.senderId === authorisedUserId ? s.userMessage : s.message}`\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                message.deleted\r\n                    ? <div>\r\n                        <span className={s.deleted}>message deleted...</span>\r\n                        <span className={s.restore} onClick={restoreHandle}> restore</span>\r\n                    </div>\r\n\r\n                    : <div className={messageClassName}\r\n                           onAuxClick={auxClickHandle}\r\n                           onContextMenu={e => e.preventDefault()}\r\n                    >\r\n                        {\r\n                            message.body.split('<br />')\r\n                                .filter(el => el)\r\n                                .reduce((acc, el) => {\r\n                                    return [...acc, el, <br/>]\r\n                                }, [] as (string | JSX.Element)[])\r\n                        }\r\n                        {\r\n                            isMenuActive\r\n                            && <ContextMenu messageId={message.id} closeCallback={() => setMenuActivity(false)}/>\r\n                        }\r\n                    </div>\r\n            }</>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import s from \"./Dialogs.module.css\";\r\nimport React, {ChangeEventHandler, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/diaogsReducer\";\r\n\r\ntype AddMessageFormPropsType = {\r\n    userId: number\r\n}\r\n\r\nexport const AddMessageForm = ({\r\n                                   userId\r\n                               }: AddMessageFormPropsType) => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const changeHandle: ChangeEventHandler<HTMLTextAreaElement> = e => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const buttonClickHandle = () => {\r\n        dispatch(sendMessage(userId, message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageForm}>\r\n            <textarea onChange={changeHandle} value={message}/>\r\n            <button onClick={buttonClickHandle}>Send</button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {useAppSelector} from \"../../redux/redux-store\"\r\nimport {clearDialogsState, getDialogs, getMessages, startChat} from \"../../redux/diaogsReducer\"\r\nimport {redirectHOC} from \"../Common/hoc/redirectHOC\"\r\nimport {selectDialogs, selectMessages} from \"../../redux/selectors\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\n\r\nconst Dialogs = redirectHOC(() => {\r\n    const navigate = useNavigate()\r\n    const {userId} = useParams()\r\n    const dialogs = useAppSelector(selectDialogs)\r\n    const currentDialog = dialogs[0]\r\n    const messages = useAppSelector(selectMessages)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n        return () => {\r\n            dispatch(clearDialogsState())\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getMessages(+userId))\r\n            if (currentDialog?.id !== +userId){\r\n                dispatch(startChat(+userId))\r\n            }\r\n        }\r\n    }, [userId, currentDialog, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (currentDialog && !userId) {\r\n            navigate(`${currentDialog.id}`)\r\n        }\r\n    }, [currentDialog, userId, navigate])\r\n\r\n    const DialogsArray = dialogs.map(dialog => {\r\n        return <Dialog dialog={dialog} key={dialog.id}/>\r\n    })\r\n    const Messages = messages.items && messages.items.map(message => {\r\n        return <Message key={message.id} message={message}/>\r\n    })\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <h3>Dialogs:</h3>\r\n                {DialogsArray}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {Messages}\r\n            </div>\r\n            {\r\n                currentDialog\r\n                && <AddMessageForm userId={currentDialog.id}/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Dialogs","import {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Profile} from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\nimport React from 'react'\r\n\r\n\r\nconst Chat = React.lazy(() => import('./components/Chat/Chat'))\r\nconst Users = React.lazy(() => import('./components/Users/Users'))\r\nconst Login = React.lazy(() => import('./components/Login/Login'))\r\n\r\nexport const MyRoutes = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/profile'} element={<Profile/>}>\r\n                <Route path={':userId'} element={<Profile/>}/>\r\n            </Route>\r\n            <Route path='/dialogs' element={<Dialogs/>}>\r\n                <Route path={`:userId`} element={<Dialogs/>}/>\r\n            </Route>\r\n            <Route path={'/users'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n            <Route path={'/friends'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/login'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Login/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/chat'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Chat/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path=\"*\" element={<Navigate to=\"/profile\"/>}/>\r\n        </Routes>\r\n    )\r\n}","import s from './SideBar.module.scss'\r\n\r\nexport const SideBar = () => {\r\n\r\n    return (\r\n        <div className={s.sidebar}>\r\n            sidebar\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport s from './App.module.scss'\r\nimport Header from \"./components/Header/Header\"\r\nimport {NavBar} from \"./components/NavBar/NavBar\"\r\nimport {HashRouter} from \"react-router-dom\"\r\nimport {Provider, useDispatch} from 'react-redux'\r\nimport {store, useAppSelector} from './redux/redux-store'\r\nimport {Preloader} from './components/Common/Preloader/Preloader'\r\nimport {initApp, setScreenSize} from './redux/appReducer'\r\nimport {selectIsInitialised, selectScreenSize} from './redux/selectors'\r\nimport {MyRoutes} from './MyRoutes'\r\nimport {SideBar} from \"./components/SideBar/SideBar\";\r\n\r\n\r\nconst App = () => {\r\n    const isInitialised = useAppSelector(selectIsInitialised)\r\n    const screenSize = useAppSelector(selectScreenSize)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initApp())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        const resizeHandle = () => {\r\n            const width = window.innerWidth\r\n            if (width < 480 && screenSize !== 'XS') {\r\n                dispatch(setScreenSize(\"XS\"))\r\n                return\r\n            }\r\n            if (width > 1440 && screenSize !== 'XL') {\r\n                dispatch(setScreenSize(\"XL\"))\r\n                return\r\n            }\r\n            if (width > 1280 && width <= 1440 && screenSize !== 'L') {\r\n                dispatch(setScreenSize(\"L\"))\r\n                return\r\n            }\r\n            if (width > 768 && width <= 1280 && screenSize !== 'M') {\r\n                dispatch(setScreenSize(\"M\"))\r\n                return\r\n            }\r\n            if (width > 480 && width <= 768 && screenSize !== 'S') {\r\n                dispatch(setScreenSize(\"S\"))\r\n            }\r\n        }\r\n        resizeHandle()\r\n        window.addEventListener(\"resize\", resizeHandle)\r\n        return () => {\r\n            window.removeEventListener('resize', resizeHandle)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised\r\n                    ? <div className={s.appWrapper}>\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <SideBar/>\r\n                        <div className={s.appWrapperContent}>\r\n                            <div className={s.content}>\r\n\r\n                                <MyRoutes/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}