{"version":3,"sources":["redux/selectors.ts","api/usersApi.ts","redux/redux-store.ts","api/authApi.ts","api/profileApi.ts","redux/profileReducer.ts","api/dialogsApi.ts","redux/diaogsReducer.ts","api/securityAPI.ts","redux/authReducer.ts","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Message/Message.module.css","components/Common/Preloader/Preloader.tsx","redux/appReducer.ts","components/Dialogs/Message/ContextMenu/ContextMenu.module.css","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.module.css","redux/usersReducer.ts","components/Header/Header.module.css","components/NavBar/NavBar.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.tsx","components/Profile/ProfileInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/ContextMenu/ContextMenu.tsx","components/Dialogs/Message/Message.tsx","components/Common/hoc/redirectHOC.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","MyRoutes.tsx","App.tsx","index.tsx"],"names":["selectIsAuth","state","auth","isAuth","selectIsUserLogin","login","selectAuthorisedUserId","id","selectCaptcha","captcha","selectAuthError","error","selectIsInitialised","app","isInitSuccess","selectItems","users","items","selectCurrentPage","currentPage","selectTotalPagesCount","totalPagesCount","selectUsersSearchTerm","term","selectCurrentProfile","profile","currentProfile","selectStatus","status","selectCurrentProfileUserId","userId","selectNewPostMessage","newPostMessage","selectPosts","posts","selectAdditionalUserInfo","additionalUserInfo","selectDialogs","dialogs","selectMessages","messages","resultCodes","axiosInstance","axios","create","baseRequestConfig","usersAPI","getUsers","params","get","follow","post","unFollow","a","delete","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","useSelector","window","loginResultCodes","baseURL","withCredentials","headers","authRequestConfig","authInstance","authAPI","me","payload","logOut","profileRequestConfig","profileAxiosInstance","profileApi","newStatus","put","image","data","FormData","append","initState","v1","message","likesCount","addPost","type","onPostChange","newValue","setProfile","setPhotosToState","photos","setStatusToState","setAdditionalInfo","info","getProfileWithAdditionalInfo","dispatch","profileResponse","fullName","additionalInfoPromise","GetStatusPromise","Promise","all","additionalInfoResponse","statusResponse","result","userData","find","user","setStatus","resultCode","SUCCESS","console","log","setPhoto","photo","updateProfile","getState","toString","toggleUserProfileFollow","userInfo","apiMethod","followed","profileReducer","action","trim","dialogsRequestConfig","dialogsAxiosInstance","dialogsApi","body","messageId","totalCount","addMessage","clearDialogsState","markMessageAsDeleted","markMessageAsNotDeleted","getDialogs","length","getMessages","sendMessage","messageBody","startChat","setAsASpam","deleteMessage","restoreMessage","dialogsReducer","map","deleted","f","viewed","securityAPI","email","setUserData","setError","getAuthUserData","makeLogin","loginData","ERROR","CAPTCHA_IS_REQUIRED","getCaptcha","makeLogout","url","authReducer","module","exports","Preloader","className","s","container","ldsRipple","appStatus","initApp","getAuthPr","then","appReducer","totalItemsCount","pageSize","friend","undefined","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","setSearchParams","page","count","usersReducer","m","Math","ceil","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useDispatch","onClick","to","Header","header","src","alt","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","ProfileStatus","authUserId","profileUserId","useState","editMode","setEditMode","spanValue","setSpanValue","useEffect","discardChanges","isStatusOwner","onDoubleClick","value","onChange","e","currentTarget","onKeyDown","key","onBlur","autoFocus","UpdateProfile","cancel","confirm","document","querySelector","style","overflow","modal","stopPropagation","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","youtube","website","validate","values","errors","Object","keys","forEach","href","test","onSubmit","setSubmitting","isSubmitting","disabled","name","placeholder","component","ProfileContact","title","marginLeft","ProfileInfo","authorisedUserId","isBtnDisabled","setIsBtnDisabled","navigate","useNavigate","profileImg","small","isAuthorisedUserProfile","profileInfo","htmlFor","display","files","description","reduce","acc","el","Post","postItem","postContent","postMessage","MyPosts","mappedPosts","p","Profile","useParams","Dialog","dialog","userName","ContextMenu","closeCallback","wrapper","menu","actionsList","Message","Component","isMenuActive","setMenuActivity","messageClassName","senderId","userMessage","restore","onAuxClick","preventDefault","onContextMenu","AddMessageForm","setMessage","addMessageForm","Dialogs","currentDialog","DialogsArray","Messages","dialogsItems","Chat","React","lazy","Users","Login","MyRoutes","path","element","Suspense","fallback","App","isInitialised","AppContainer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9fb940f9.chunk.js","sourcesContent":["import { AppStateType } from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectAuthorisedUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n\r\nexport const selectAuthError = (state: AppStateType) => state.auth.error\r\n\r\n\r\n// app\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\nexport const selectUsersSearchTerm = (state: AppStateType) => state.users.term\r\n\r\nexport const selectUsersSearchFriend = (state: AppStateType) => state.users.friend\r\n\r\n\r\n// profile\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectNewPostMessage = (state: AppStateType) => state.profile.newPostMessage\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\nexport const selectAdditionalUserInfo = (state: AppStateType) => state.profile.additionalUserInfo\r\n\r\n\r\n// dialogs\r\n\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectMessages = (state: AppStateType) => state.dialogs.messages\r\n\r\n\r\n","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type getUsersParamsType  = {\r\n    page?: number\r\n    count?: number\r\n    term?: string\r\n    friend?: boolean\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (params:getUsersParamsType) => axiosInstance.get<responseType>( `/users`, { params }  ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { DialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers( {\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n} )\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n]\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore( rootReducer, composeWithDevTools( applyMiddleware( ...middleware ) ) )\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | DialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type ThunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector<AppStateType, T>( selector )\r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<loginDataType, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { photosType, profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType, resultCodes } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\ntype setPhotoResponseType = {\r\n    data: { photos: photosType }\r\n    resultCode: resultCodes\r\n    messages: string[]\r\n}\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n\r\n    setPhoto(image: File) {\r\n        const data = new FormData()\r\n        data.append( 'image', image )\r\n\r\n        return profileAxiosInstance.put<any, AxiosResponse<setPhotoResponseType>>( 'photo', data, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data',\r\n            },\r\n        } )\r\n    },\r\n    updateProfile(profile: Partial<profileType>) {\r\n        return profileAxiosInstance.put( '', profile )\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {resultCodes, usersAPI} from '../api/usersApi'\r\nimport {ThunkType} from './redux-store'\r\nimport {profileApi} from '../api/profileApi'\r\nimport {UserType} from \"./usersReducer\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi man', likesCount: 50},\r\n        {id: v1(), message: 'How are you', likesCount: 150},\r\n    ] as Array<PostType>,\r\n    newPostMessage: '',\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n    additionalUserInfo: {} as UserType\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.newPostMessage.trim()\r\n                ? {\r\n                    ...state,\r\n                    posts: [\r\n                        ...state.posts,\r\n                        {id: v1(), message: state.newPostMessage, likesCount: 0},\r\n                    ],\r\n                    newPostMessage: '',\r\n                }\r\n                : {...state, newPostMessage: ''}\r\n        case 'ON_POST_CHANGE':\r\n            return {...state, newPostMessage: action.newValue}\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return state.currentProfile\r\n                ? {\r\n                    ...state,\r\n                    currentProfile: {\r\n                        ...state.currentProfile,\r\n                        photos: action.photos,\r\n                    },\r\n                }\r\n                : state\r\n        case \"SET_ADDITIONAL_INFO\":\r\n            return {\r\n                ...state,\r\n                additionalUserInfo: action.info\r\n            }\r\n        case \"SET_PROFILE_STATE\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n    | setPhotosToStateActionType\r\n    | setAdditionalInfoActionType\r\n    | setProfileStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\ntype setPhotosToStateActionType = ReturnType<typeof setPhotosToState>\r\ntype setAdditionalInfoActionType = ReturnType<typeof setAdditionalInfo>\r\ntype setProfileStateActionType = ReturnType<typeof setProfileState>\r\n\r\nexport const addPost = () => ({type: 'ADD_POST'} as const)\r\nexport const onPostChange = (newValue: string) => ({type: 'ON_POST_CHANGE', newValue} as const)\r\nexport const setProfile = (currentProfile: profileType) => ({type: 'SET_PROFILE', currentProfile} as const)\r\nexport const setPhotosToState = (photos: photosType) => ({type: 'SET_PHOTOS', photos} as const)\r\nexport const setStatusToState = (status: string) => ({type: 'SET_STATUS', status} as const)\r\nexport const setAdditionalInfo = (info: UserType) => ({type: 'SET_ADDITIONAL_INFO', info} as const)\r\nexport const setProfileState = (payload: Partial<profileStateType>) => ({type: 'SET_PROFILE_STATE', payload} as const)\r\n\r\nexport const getProfileWithAdditionalInfo = (userId: string): ThunkType => async dispatch => {\r\n    const profileResponse = await profileApi.getProfile(userId)\r\n    let additionalInfoPromise\r\n    if (profileResponse && profileResponse.data && profileResponse.data.fullName) {\r\n        additionalInfoPromise = usersAPI.getUsers({term: profileResponse.data.fullName})\r\n    }\r\n    const GetStatusPromise = profileApi.getStatus(userId)\r\n\r\n    const [additionalInfoResponse, statusResponse] = await Promise.all([additionalInfoPromise, GetStatusPromise])\r\n    let result: Partial<profileStateType> = {}\r\n\r\n    if (profileResponse.status === 200) {\r\n        result.currentProfile = profileResponse.data\r\n    }\r\n\r\n    if (additionalInfoResponse?.status === 200) {\r\n        const userData = additionalInfoResponse.data.items.find(user => user.id === +userId)\r\n        if (userData) {\r\n            result.additionalUserInfo = userData\r\n        }\r\n    }\r\n    if (statusResponse.status === 200) {\r\n        result.status = statusResponse.data\r\n    }\r\n    dispatch(setProfileState(result))\r\n}\r\n\r\nexport const setStatus = (newStatus: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {messages, resultCode}} = await profileApi.setStatus(newStatus)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setStatusToState(newStatus))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoto = (photo: File): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode, messages, data: {photos}}} = await profileApi.setPhoto(photo)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setPhotosToState(photos))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: Partial<profileType>): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const currentProfile = getState().profile.currentProfile\r\n        console.log({...currentProfile, ...profile})\r\n        await profileApi.updateProfile(profile)\r\n        currentProfile\r\n        && await dispatch(getProfileWithAdditionalInfo((currentProfile.userId).toString()))\r\n        // messages[0]\r\n        // && console.log( messages[0] )\r\n        return true\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getProfileUserInfo = (payload: { term: string, userId: number }): ThunkType => async dispatch => {\r\n    const {userId, term} = payload\r\n    try {\r\n        const {data: {items}} = await usersAPI.getUsers({term})\r\n        const user = items.filter(user => user.id === userId)[0]\r\n        if (user) {\r\n            dispatch(setAdditionalInfo(user))\r\n        }\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const toggleUserProfileFollow = (userInfo: UserType): ThunkType => async dispatch => {\r\n    try {\r\n        const apiMethod = userInfo.followed ? usersAPI.follow : usersAPI.unFollow\r\n        const {status, data: {resultCode}} = await apiMethod(userInfo.id)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setAdditionalInfo(userInfo))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import axios, {AxiosResponse} from \"axios\"\r\nimport {baseRequestConfig} from './authApi'\r\nimport {commonResponseType} from \"./usersApi\";\r\nimport {photosType} from \"../redux/profileReducer\";\r\n\r\nconst dialogsRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${baseRequestConfig.baseURL}dialogs/`,\r\n\r\n}\r\n\r\nconst dialogsAxiosInstance = axios.create(dialogsRequestConfig)\r\n\r\nexport const dialogsApi = {\r\n    getAllDialogs() {\r\n        return dialogsAxiosInstance.get<DomainDialogType[]>('')\r\n    },\r\n    getNewMessagesCount() {\r\n        return dialogsAxiosInstance.get<number>('messages/new/count')\r\n    },\r\n    getMessages(userId: number) {\r\n        return dialogsAxiosInstance.get<getMessagesResponseType>(`${userId}/messages`)\r\n    },\r\n    startChat(userId: number) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`${userId}`)\r\n    },\r\n    sendMessage(userId: number, message: string) {\r\n        return dialogsAxiosInstance\r\n            .post <{ body: string }, AxiosResponse<commonResponseType<{ \"message\": ReducedDomainMessageType }>>>\r\n            (`${userId}/messages`, {body: message})\r\n    },\r\n    checkMessageViewed(messageId: string) {\r\n        return dialogsAxiosInstance.get<boolean>(`messages/${messageId}/viewed`)\r\n    },\r\n    sendMessageToSpam(messageId: string) {\r\n        return dialogsAxiosInstance.post<commonResponseType>(`messages/${messageId}/spam`)\r\n    },\r\n    deleteMessage(messageId: string) {\r\n        return dialogsAxiosInstance.delete<commonResponseType>(`messages/${messageId}`)\r\n    },\r\n    restoreMessage(messageId: string) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`messages/${messageId}/restore`)\r\n    },\r\n    getMessagesByDate(userId: string, date: string) {\r\n        return dialogsAxiosInstance.get(`${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n}\r\n\r\nexport type ReducedDomainMessageType = {\r\n    \"id\": string,\r\n    \"body\": string,\r\n    \"translatedBody\": null,\r\n    \"addedAt\": string,\r\n    \"senderId\": number,\r\n    \"senderName\": string,\r\n    \"recipientId\": number,\r\n    \"viewed\": boolean\r\n}\r\n\r\n// type fullDomainMessageType = reducedDomainMessageType & {\r\n//     \"recipientName\": string,\r\n//     \"deletedBySender\": boolean,\r\n//     \"deletedByRecipient\": boolean,\r\n//     \"isSpam\": boolean,\r\n//     \"distributionId\": null | number\r\n// }\r\n\r\nexport type DomainDialogType = {\r\n    \"id\": number,\r\n    \"userName\": string,\r\n    \"hasNewMessages\": boolean,\r\n    \"lastDialogActivityDate\": string,\r\n    \"lastUserActivityDate\": string,\r\n    \"newMessagesCount\": number,\r\n    \"photos\": photosType\r\n}\r\n\r\nexport type getMessagesResponseType = {\r\n    \"items\": ReducedDomainMessageType [],\r\n    \"totalCount\": number,\r\n    \"error\": null | string,\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {dialogsApi, DomainDialogType, getMessagesResponseType, ReducedDomainMessageType} from \"../api/dialogsApi\";\r\nimport {ThunkType} from \"./redux-store\";\r\nimport {resultCodes} from \"../api/usersApi\";\r\n\r\nconst initState = {\r\n    dialogs: [] as DomainDialogType[],\r\n    messages: {\r\n        items: [],\r\n        error: null,\r\n        totalCount: 0,\r\n    } as MessagesStateType,\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initState, action: DialogsActionTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            }\r\n\r\n        case \"SET_MESSAGES\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...action.messages,\r\n                    items: action.messages.items.map(message => ({...message, deleted: false}))\r\n                }\r\n            }\r\n\r\n        case \"CLEAR_STATE\":\r\n            return action.initState\r\n\r\n        case \"ADD_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: [...state.messages.items, {...action.message, deleted: false}],\r\n                    totalCount: state.messages.totalCount + 1\r\n                }\r\n            }\r\n\r\n        case \"SET_MESSAGE_VIEWED\":\r\n            const message = state.messages.items.find(f => f.id === action.messageId)\r\n            return message?.viewed === action.viewed\r\n                ? state\r\n                : {\r\n                    ...state,\r\n                    messages: {\r\n                        ...state.messages,\r\n                        items: state.messages.items\r\n                            .map(message => message.id === action.messageId ? ({\r\n                                ...message,\r\n                                viewed: action.viewed\r\n                            }) : message)\r\n                    }\r\n                }\r\n\r\n        case \"MARK_MESSAGE_AS_DELETED\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: state.messages.items\r\n                        .map(message => message.id === action.messageId ? {...message, deleted: true} : message)\r\n                }\r\n            }\r\n\r\n        case \"MARK_MESSAGE_AS_NOT_DELETED\":\r\n            return {\r\n                ...state,\r\n                messages: {\r\n                    ...state.messages,\r\n                    items: state.messages.items\r\n                        .map(message => message.id === action.messageId ? {...message, deleted: false} : message)\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setDialogs = (dialogs: DomainDialogType[]) => ({\r\n    type: 'SET_DIALOGS', dialogs\r\n} as const)\r\n\r\nexport const setCurrentDialog = (dialog: DomainDialogType) => ({\r\n    type: 'SET_CURRENT_DIALOG', dialog\r\n} as const)\r\n\r\nexport const setMessages = (messages: getMessagesResponseType) => ({\r\n    type: 'SET_MESSAGES', messages\r\n} as const)\r\n\r\nexport const addMessage = (message: ReducedDomainMessageType) => ({\r\n    type: 'ADD_MESSAGE', message\r\n} as const)\r\n\r\nexport const setMessageViewed = (messageId: string, viewed: boolean) => ({\r\n    type: 'SET_MESSAGE_VIEWED', messageId, viewed\r\n} as const)\r\n\r\nexport const clearDialogsState = () => ({type: 'CLEAR_STATE', initState} as const)\r\n\r\nexport const markMessageAsDeleted = (messageId: string) => ({\r\n    type: 'MARK_MESSAGE_AS_DELETED', messageId\r\n} as const)\r\n\r\nexport const markMessageAsNotDeleted = (messageId: string) => ({\r\n    type: 'MARK_MESSAGE_AS_NOT_DELETED', messageId\r\n} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const getDialogs = (): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.getAllDialogs()\r\n        if (status === 200 && data.length) {\r\n            dispatch(setDialogs(data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getMessages = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.getMessages(userId)\r\n        if (status === 200) {\r\n            dispatch(setMessages(data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n\r\nexport const sendMessage = (userId: number, messageBody: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {data: {message}, resultCode}} = await dialogsApi.sendMessage(userId, messageBody)\r\n        if (resultCode === resultCodes.SUCCESS) {\r\n            dispatch(addMessage(message))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const startChat = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode}} = await dialogsApi.startChat(userId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(getDialogs())\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const checkMessageViewed = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.checkMessageViewed(messageId)\r\n        if (status === 200) {\r\n            dispatch(setMessageViewed(messageId, data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const setAsASpam = (messageId: string): ThunkType => async () => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.sendMessageToSpam(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            console.log(`message with id: \"${messageId}\" successfully sent to spam`)\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const deleteMessage = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.deleteMessage(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(markMessageAsDeleted(messageId))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const restoreMessage = (messageId: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {data: {resultCode}, status} = await dialogsApi.restoreMessage(messageId)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(markMessageAsNotDeleted(messageId))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type DialogsActionTypes = SetDialogsActionType\r\n    | SetLastDialogActionType\r\n    | AddMessageActionType\r\n    | SetMessagesActionType\r\n    | ClearStateActionType\r\n    | SetMessageViewedActionType\r\n    | MarkMessageAsDeletedActionType\r\n    | MarkMessageAsNtoDeletedActionType\r\n\r\ntype SetDialogsActionType = ReturnType<typeof setDialogs>\r\ntype SetLastDialogActionType = ReturnType<typeof setCurrentDialog>\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\ntype SetMessagesActionType = ReturnType<typeof setMessages>\r\ntype ClearStateActionType = ReturnType<typeof clearDialogsState>\r\ntype SetMessageViewedActionType = ReturnType<typeof setMessageViewed>\r\ntype MarkMessageAsDeletedActionType = ReturnType<typeof markMessageAsDeleted>\r\ntype MarkMessageAsNtoDeletedActionType = ReturnType<typeof markMessageAsNotDeleted>\r\n\r\n\r\nexport type DialogsStateType = typeof initState\r\n\r\nexport type MessageType = ReducedDomainMessageType & {\r\n    deleted: boolean\r\n}\r\n\r\ntype MessagesStateType = {\r\n    items: MessageType[]\r\n    error: null | string\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport default dialogsReducer","import axios from 'axios'\r\nimport { baseRequestConfig } from './authApi'\r\n\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return axios.get<{ url: string }>( 'security/get-captcha-url', baseRequestConfig )\r\n    },\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { ThunkType } from './redux-store'\r\nimport { securityAPI } from '../api/securityAPI'\r\n\r\n\r\nconst initState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false as boolean,\r\n    error: null as string | null\r\n}\r\ntype authStateType = typeof initState\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType | setErrorActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\ntype setErrorActionType = ReturnType<typeof setError>\r\n\r\nexport const setUserData = (payload: Partial<authStateType>) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const setError = (error: string) => ({\r\n    type: 'SET_ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0]) {\r\n            dispatch(setError(messages[0]))\r\n        }else if (resultCode === loginResultCodes.CAPTCHA_IS_REQUIRED) {\r\n            dispatch(setError(messages[0]))\r\n            dispatch(getCaptcha())\r\n        }\r\n        return\r\n    } catch (err) {\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( initState) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { data: { url } } = await securityAPI.getCaptcha()\r\n        dispatch(setUserData({captcha: url}))\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__19X4w\",\"postContent\":\"Post_postContent__NaiCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\",\"deleted\":\"Message_deleted__2jdCO\",\"restore\":\"Message_restore__3apcv\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ThunkType} from './redux-store'\r\nimport {getAuthUserData} from './authReducer'\r\n\r\ntype AppStatus = 'idle' | 'loading'\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n    appStatus: 'idle' as AppStatus\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\n\r\nconst setInitSuccess = () => ({\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const)\r\n\r\nexport const initApp = (): ThunkType => dispatch => {\r\n    const getAuthPr = dispatch(getAuthUserData())\r\n    Promise.all([getAuthPr])\r\n        .then(() => {\r\n            dispatch(setInitSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContextMenu_wrapper__2IKZn\",\"menu\":\"ContextMenu_menu__1FpXc\",\"actionsList\":\"ContextMenu_actionsList__1RdnA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3f-uD\",\"description\":\"ProfileInfo_description__1V-2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateProfile\":\"UpdateProfile_updateProfile__29J1S\",\"modal\":\"UpdateProfile_modal__1TRFM\",\"wrapper\":\"UpdateProfile_wrapper__2KVW2\"};","import { getUsersParamsType, resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    term: '',\r\n    friend: undefined as boolean | undefined,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        case 'SET_SEARCH_PARAMS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n    | setTermActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\nexport type setTermActionType = ReturnType<typeof setSearchParams>\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const setSearchParams = (payload: { term?: string, friend?: boolean, currentPage?: number }) => ( {\r\n    type: 'SET_SEARCH_PARAMS',\r\n    payload,\r\n} as const )\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n            return 'OK'\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (payload?: getUsersParamsType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const { currentPage, friend, pageSize, term } = getState().users\r\n        const { data, status } = await usersAPI.getUsers( {\r\n            page: currentPage,\r\n            count: pageSize,\r\n            friend,\r\n            term,\r\n            ...payload,\r\n        } )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qHHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2vr7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__WSORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__1aoyQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, ThunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<ThunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.css\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.css\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/friends'} linkName={'Friends'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import React, {ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"../../../../redux/redux-store\"\r\n\r\nimport s from './ProfileStatus.module.css'\r\nimport {setStatus, setStatusToState} from \"../../../../redux/profileReducer\"\r\nimport {selectAuthorisedUserId, selectCurrentProfileUserId, selectStatus} from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>(selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>(selectAuthorisedUserId)\r\n    const profileUserId = useSelector<AppStateType, number | undefined>(selectCurrentProfileUserId)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [spanValue, setSpanValue] = useState(status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (status !== spanValue) {\r\n            setSpanValue(status)\r\n        }\r\n    }, [status])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setStatusToState(''))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const discardChanges = () => {\r\n        setEditMode(false)\r\n        setSpanValue(status)\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue(e.currentTarget.value)\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch(setStatus(spanValue))\r\n\r\n                setEditMode(false)\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = () => setEditMode(!editMode)\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={onDoubleClickHandler}>\r\n\r\n            {\r\n                (editMode && isStatusOwner)\r\n\r\n                    ? <input\r\n                        value={spanValue}\r\n                        onChange={onChangeHandler}\r\n                        onKeyDown={onKeyDownHandler}\r\n                        onBlur={discardChanges}\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span className={s.status}>\r\n                        {getStatusMessage()}\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport s from './UpdateProfile.module.css'\r\nimport { useAppSelector } from '../../../../redux/redux-store'\r\nimport { selectCurrentProfile } from '../../../../redux/selectors'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { updateProfile } from '../../../../redux/profileReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst validateHref = (href: string) => {\r\n    const regexp = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n    return regexp.test( href )\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    youtube: string\r\n    website: string,\r\n}\r\n\r\n\r\ntype initValuesTypeType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    contacts: Partial<contactsType>\r\n}\r\n\r\ntype UpdateProfilePropsType = {\r\n    confirm?: (payload: any) => void;\r\n    cancel: () => void;\r\n};\r\n\r\n\r\nexport const UpdateProfile = ({ cancel, confirm }: UpdateProfilePropsType) => {\r\n    const profile = useAppSelector( selectCurrentProfile )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        const body = document.querySelector( 'body' )\r\n        if (body) body.style.overflow = 'hidden'\r\n        return () => {\r\n            if (body) body.style.overflow = 'auto'\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <div className={ s.modal } onClick={ cancel }>\r\n            <div className={ s.updateProfile } onClick={ (e) => e.stopPropagation() }>\r\n                <Formik\r\n                    initialValues={ {\r\n                        fullName: profile?.fullName || '',\r\n                        aboutMe: profile?.aboutMe || '',\r\n                        lookingForAJob: profile?.lookingForAJob || false,\r\n                        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n                        contacts: {\r\n                            facebook: profile?.contacts.facebook || '',\r\n                            github: profile?.contacts.github || '',\r\n                            instagram: profile?.contacts.instagram || '',\r\n                            mainLink: profile?.contacts.mainLink || '',\r\n                            twitter: profile?.contacts.twitter || '',\r\n                            vk: profile?.contacts.vk || '',\r\n                            youtube: profile?.contacts.youtube || '',\r\n                            website: profile?.contacts.website || '',\r\n                        },\r\n                    } }\r\n                    validate={ values => {\r\n                        const errors: Partial<initValuesTypeType> = {}\r\n                        if (!values.lookingForAJobDescription) {\r\n                            errors.lookingForAJobDescription = 'Required'\r\n                        }\r\n                        if (!values.fullName) {\r\n                            errors.fullName = 'Required'\r\n                        }\r\n                        if (!values.aboutMe) {\r\n                            errors.aboutMe = 'Required'\r\n                        }\r\n                        Object.keys( values.contacts ).forEach( f => {\r\n                            const key = f as keyof contactsType\r\n                            if (values.contacts[key] && !validateHref( values.contacts[key] )) {\r\n                                if (!errors.contacts) {\r\n                                    errors.contacts = {}\r\n                                }\r\n                                errors.contacts[key] = 'invalid link'\r\n                            }\r\n                        } )\r\n                        return errors\r\n                    } }\r\n                    onSubmit={ async (values, { setSubmitting }) => {\r\n                        await dispatch( updateProfile( values ) )\r\n                        setSubmitting( false )\r\n                    } }\r\n                >\r\n                    { ({ values, isSubmitting }) => (\r\n                        <Form action=\"\">\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Personal information</legend>\r\n                                <span>My name</span>\r\n                                <Field type=\"text\" name='fullName' placeholder='Name'/>\r\n                                <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n                                <span>About me</span>\r\n                                <Field type=\"text\" name='aboutMe' placeholder='about me'/>\r\n                                <ErrorMessage name={ 'aboutMe' } component={ 'div' }/>\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Job information</legend>\r\n                                <div><Field type=\"checkbox\" name='lookingForAJob'/>\r\n                                    <span>Looking for a job</span></div>\r\n                                {\r\n                                    values.lookingForAJob\r\n                                    && <>\r\n                                        <span>Job description</span>\r\n                                        <Field type=\"text\" name='lookingForAJobDescription'\r\n                                               placeholder='looking for a job description'/>\r\n                                        <ErrorMessage name={ 'lookingForAJobDescription' } component={ 'div' }/>\r\n                                    </>\r\n                                }\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Contacts</legend>\r\n                                {\r\n                                    Object.keys( values.contacts ).map( m => {\r\n                                        return (\r\n                                            <div key={ m }>\r\n                                                <Field type=\"text\" name={ `contacts.${ m }` } placeholder={ m }/>\r\n                                                <ErrorMessage name={ `contacts.${ m }` } component={ 'div' }/>\r\n                                            </div>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </fieldset>\r\n                            <button type='submit' disabled={ isSubmitting }>send</button>\r\n                        </Form> ) }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const ProfileContact: React.FC<{ title: string, value: string | null }> = ({title, value}) => {\r\n    return (\r\n        <div style={{marginLeft: 15}}>{title}: {value}</div>\r\n    )\r\n}","import React, {ChangeEventHandler, useEffect, useState} from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport {selectAdditionalUserInfo, selectAuthorisedUserId, selectCurrentProfile} from '../../../redux/selectors'\r\nimport {useAppSelector} from '../../../redux/redux-store'\r\nimport {contactsType, setPhoto, toggleUserProfileFollow} from '../../../redux/profileReducer'\r\nimport {UpdateProfile} from './UpdateProfile/UpdateProfile'\r\nimport {ProfileContact} from \"./ProfileContact/ProfileContact\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const profile = useSelector(selectCurrentProfile)\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n    const additionalUserInfo = useAppSelector(selectAdditionalUserInfo)\r\n    const [isBtnDisabled, setIsBtnDisabled] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const profileImg = (profile && profile.photos.small) ? profile.photos.small : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    // console.log('profileInfo')\r\n    const onPhotoClickHandle: ChangeEventHandler<HTMLInputElement> = e => {\r\n        e.currentTarget.files &&\r\n        dispatch(setPhoto(e.currentTarget.files[0]))\r\n    }\r\n\r\n    const toggleFollowClickHandle = () => {\r\n        setIsBtnDisabled(true)\r\n        dispatch(toggleUserProfileFollow({\r\n            ...additionalUserInfo,\r\n            followed: !additionalUserInfo.followed\r\n        }))\r\n    }\r\n\r\n    const sendMessageClickHandle = () => navigate(`/dialogs/${profile?.userId}`)\r\n\r\n    useEffect(() => {\r\n        if (isBtnDisabled) setIsBtnDisabled(false)\r\n    }, [additionalUserInfo, isBtnDisabled])\r\n\r\n    const isAuthorisedUserProfile = profile?.userId === authorisedUserId\r\n\r\n    useEffect(() => {\r\n        if (editMode) setEditMode(false)\r\n    }, [profile, editMode])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                && <UpdateProfile cancel={() => setEditMode(false)}/>\r\n            }\r\n            {\r\n                profile\r\n                    ? <div className={s.profileInfo}>\r\n                        <label htmlFor=\"image\">\r\n                            {\r\n                                isAuthorisedUserProfile &&\r\n                                <input type=\"file\" name=\"image\" id=\"image\" style={{display: 'none'}}\r\n                                       onChange={onPhotoClickHandle}/>\r\n                            }\r\n                            <img src={profileImg} alt=\"\"/>\r\n                        </label>\r\n                        <div className={s.description}>\r\n                            {profile.fullName}\r\n                            <ProfileStatus/>\r\n                        </div>\r\n                        {\r\n                            profile && authorisedUserId && !isAuthorisedUserProfile\r\n                            && <>\r\n                                <button onClick={toggleFollowClickHandle} disabled={isBtnDisabled}>\r\n                                    {additionalUserInfo.followed ? 'Unfollow' : 'Follow'}\r\n                                </button>\r\n                                <button onClick={sendMessageClickHandle}>\r\n                                    Send message\r\n                                </button>\r\n\r\n                            </>}\r\n\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n            <div>\r\n                <div>About me: {profile?.aboutMe}</div>\r\n                <div>Looking for a job: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n                {profile?.lookingForAJob && <div>Job description: {profile?.lookingForAJobDescription}</div>}\r\n                <div>Contacts:</div>\r\n                {\r\n                    profile\r\n                    && Object.keys(profile.contacts)\r\n                        .reduce((acc, el) => {\r\n                            const value = profile.contacts[el as keyof contactsType]\r\n                            return value ? [...acc, <ProfileContact value={value} title={el} key={el}/>] : acc\r\n                        }, [] as JSX.Element[])\r\n                }\r\n            </div>\r\n\r\n            {\r\n                isAuthorisedUserProfile\r\n                && <button onClick={() => setEditMode(true)}>edit profile</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\nfunction Post (props:PostType) {\n    return (\n        <div className={s.postItem}>\n            <div className={s.postContent}>\n                <img src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\" alt=\"\"/>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                Likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, { ChangeEvent } from \"react\"\nimport Post from \"./Post/Post\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addPost, onPostChange, PostType } from \"../../../redux/profileReducer\"\nimport { AppStateType } from \"../../../redux/redux-store\"\nimport { selectNewPostMessage, selectPosts } from '../../../redux/selectors'\n\n\nexport function MyPosts() {\n    console.log('my posts')\n    const newPostMessage = useSelector<AppStateType, string>( selectNewPostMessage )\n    const posts = useSelector<AppStateType, PostType[]>( selectPosts )\n    const dispatch = useDispatch()\n\n    const onButtonClickHandler = () => dispatch( addPost() )\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.currentTarget.value\n        dispatch( onPostChange( value ) )\n    }\n    const mappedPosts = posts.map( p => <Post id={ p.id } key={ p.id } message={ p.message }\n                                              likesCount={ p.likesCount }/> )\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea value={ newPostMessage } onChange={ onChangeHandler } name=\"\" id=\"\"/>\n            </div>\n            <div>\n                <button onClick={ onButtonClickHandler }>Add Post</button>\n            </div>\n            { mappedPosts }\n        </div>\n    )\n}","import React, {useEffect} from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\"\r\nimport {MyPosts} from \"./MyPosts/MyPosts\"\r\nimport {useParams} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from '../../redux/redux-store'\r\nimport {selectAuthorisedUserId} from '../../redux/selectors'\r\nimport {getProfileWithAdditionalInfo, setProfile} from '../../redux/profileReducer'\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n    let {userId} = useParams<PathParamsType>()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector(selectAuthorisedUserId)\r\n    useEffect(() => {\r\n        let id = userId\r\n        if (!id && authUserId) {\r\n            id = authUserId.toString()\r\n        }\r\n        id\r\n        && dispatch( getProfileWithAdditionalInfo( id ) )\r\n\r\n        return () => {\r\n            dispatch(setProfile(null))\r\n        }\r\n    }, [userId, dispatch, authUserId])\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {DomainDialogType} from \"../../../api/dialogsApi\";\r\n\r\ntype DialogPropsType = {\r\n    dialog: DomainDialogType\r\n    // callback: (dialog: DomainDialogType) => void\r\n}\r\n\r\nfunction Dialog({\r\n                    dialog,\r\n                    // callback\r\n                }: DialogPropsType) {\r\n    return (\r\n        <div className={s.dialog}\r\n             // onClick={() => callback(dialog)}\r\n        >\r\n            <SuperLink to={`/dialogs/${dialog.id}`} linkName={dialog.userName}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog","import s from './ContextMenu.module.css'\r\nimport {MouseEventHandler} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteMessage, setAsASpam} from \"../../../../redux/diaogsReducer\";\r\n\r\ntype ContextMenuPropsType = {\r\n    closeCallback?: () => void\r\n    messageId: string\r\n}\r\n\r\nexport const ContextMenu = ({\r\n                                closeCallback,\r\n                                messageId,\r\n                            }: ContextMenuPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const deleteClickHandle: MouseEventHandler<HTMLLIElement> = () => {\r\n        dispatch(deleteMessage(messageId))\r\n    }\r\n    const spamClickHandle: MouseEventHandler<HTMLLIElement> = () => {\r\n        dispatch(setAsASpam(messageId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper} onClick={closeCallback}>\r\n            <div className={s.menu}>\r\n                <ul className={s.actionsList}>\r\n                    <li onClick={deleteClickHandle}>delete</li>\r\n                    <li onClick={spamClickHandle}>set as spam</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {MouseEventHandler, useEffect, useState} from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {useAppSelector} from \"../../../redux/redux-store\";\r\nimport {selectAuthorisedUserId} from \"../../../redux/selectors\";\r\nimport {ContextMenu} from \"./ContextMenu/ContextMenu\";\r\nimport {MessageType, restoreMessage} from \"../../../redux/diaogsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: MessageType\r\n}\r\n\r\nfunction Message({\r\n                     message,\r\n                 }: MessagePropsType) {\r\n    const [isMenuActive, setMenuActivity] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n\r\n    const auxClickHandle: MouseEventHandler<HTMLDivElement> = e => {\r\n        e.preventDefault()\r\n        setMenuActivity(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setMenuActivity(false)\r\n    }, [message])\r\n\r\n    const restoreHandle = () => {\r\n        dispatch(restoreMessage(message.id))\r\n    }\r\n\r\n    const messageClassName = `${message.senderId === authorisedUserId ? s.userMessage : s.message}`\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                message.deleted\r\n                    ? <div>\r\n                        <span className={s.deleted}>message deleted...</span>\r\n                        <span className={s.restore} onClick={restoreHandle}> restore</span>\r\n                    </div>\r\n\r\n                    : <div className={messageClassName}\r\n                           onAuxClick={auxClickHandle}\r\n                           onContextMenu={e => e.preventDefault()}\r\n                    >\r\n                        {message.body}\r\n                        {\r\n                            isMenuActive\r\n                            && <ContextMenu messageId={message.id} closeCallback={() => setMenuActivity(false)}/>\r\n                        }\r\n                    </div>\r\n            }</>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import s from \"./Dialogs.module.css\";\r\nimport React, {ChangeEventHandler, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/diaogsReducer\";\r\n\r\ntype AddMessageFormPropsType = {\r\n    userId: number\r\n}\r\n\r\nexport const AddMessageForm = ({\r\n                                   userId\r\n                               }: AddMessageFormPropsType) => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const changeHandle: ChangeEventHandler<HTMLTextAreaElement> = e => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const buttonClickHandle = () => {\r\n        dispatch(sendMessage(userId, message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.addMessageForm}>\r\n            <textarea onChange={changeHandle} value={message}/>\r\n            <button onClick={buttonClickHandle}>Send</button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {useAppSelector} from \"../../redux/redux-store\"\r\nimport {clearDialogsState, getDialogs, getMessages, startChat} from \"../../redux/diaogsReducer\"\r\nimport {redirectHOC} from \"../Common/hoc/redirectHOC\"\r\nimport {selectDialogs, selectMessages} from \"../../redux/selectors\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\n\r\nconst Dialogs = redirectHOC(() => {\r\n    const navigate = useNavigate()\r\n    const {userId} = useParams()\r\n    const dialogs = useAppSelector(selectDialogs)\r\n    const currentDialog = dialogs[0]\r\n    const messages = useAppSelector(selectMessages)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n        return () => {\r\n            dispatch(clearDialogsState())\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getMessages(+userId))\r\n            if (currentDialog?.id !== +userId){\r\n                dispatch(startChat(+userId))\r\n            }\r\n        }\r\n    }, [userId, currentDialog, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (currentDialog && !userId) {\r\n            navigate(`${currentDialog.id}`)\r\n        }\r\n    }, [currentDialog, userId, navigate])\r\n\r\n    const DialogsArray = dialogs.map(dialog => {\r\n        return <Dialog dialog={dialog} key={dialog.id}/>\r\n    })\r\n    const Messages = messages.items && messages.items.map(message => {\r\n        return <Message key={message.id} message={message}/>\r\n    })\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <h3>Dialogs:</h3>\r\n                {DialogsArray}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {Messages}\r\n            </div>\r\n            {\r\n                currentDialog\r\n                && <AddMessageForm userId={currentDialog.id}/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Dialogs","import {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Profile} from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\nimport React from 'react'\r\n\r\n\r\nconst Chat = React.lazy(() => import('./components/Chat/Chat'))\r\nconst Users = React.lazy(() => import('./components/Users/Users'))\r\nconst Login = React.lazy(() => import('./components/Login/Login'))\r\n\r\nexport const MyRoutes = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/profile'} element={<Profile/>}>\r\n                <Route path={':userId'} element={<Profile/>}/>\r\n            </Route>\r\n            <Route path='/dialogs' element={<Dialogs/>}>\r\n                <Route path={`:userId`} element={<Dialogs/>}/>\r\n            </Route>\r\n            <Route path={'/users'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n            <Route path={'/friends'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/login'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Login/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/chat'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Chat/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path=\"*\" element={<Navigate to=\"/profile\"/>}/>\r\n        </Routes>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport Header from \"./components/Header/Header\"\r\nimport { NavBar } from \"./components/NavBar/NavBar\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport { Provider, useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType, store } from './redux/redux-store'\r\nimport { Preloader } from './components/Common/Preloader/Preloader'\r\nimport { initApp } from './redux/appReducer'\r\nimport { selectIsInitialised } from './redux/selectors'\r\nimport { MyRoutes } from './MyRoutes'\r\n\r\n\r\nconst App = () => {\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const isInitialised = useSelector<AppStateType, boolean>( selectIsInitialised )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( initApp() )\r\n    }, [dispatch] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised ? <div className=\"app-wrapper\">\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <div className={ 'app-wrapper-content' }>\r\n\r\n                            <MyRoutes/>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}