{"version":3,"sources":["api/authApi.ts","api/usersApi.ts","redux/authReducer.ts","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Common/Preloader/Preloader.tsx","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Message/Message.module.css","redux/usersReducer.ts","components/Header/Header.module.css","components/NavBar/NavBar.module.css","components/Profile/Profile.module.css","redux/selectors.ts","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","api/profileApi.ts","redux/profileReducer.ts","redux/diaogsReducer.ts","redux/appReducer.ts","redux/redux-store.ts","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Common/hoc/redirectHOC.tsx","App.tsx","index.tsx"],"names":["loginResultCodes","baseRequestConfig","baseURL","withCredentials","headers","authRequestConfig","authInstance","axios","create","authAPI","me","get","login","payload","post","logOut","delete","resultCodes","axiosInstance","usersAPI","getUsers","page","params","follow","userId","unFollow","a","initState","id","email","isAuth","setUserData","type","getAuthUserData","dispatch","status","data","messages","resultCode","console","log","makeLogin","loginData","actions","setErrors","setSubmitting","SUCCESS","ERROR","password","makeLogout","authReducer","state","action","module","exports","Preloader","className","s","container","ldsRipple","items","totalItemsCount","currentPage","pageSize","totalPagesCount","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","totalCount","usersReducer","map","m","followed","Math","ceil","selectIsAuth","auth","selectIsUserLogin","selectIsUserId","selectIsInitialised","app","isInitSuccess","selectItems","users","selectCurrentPage","selectTotalPagesCount","selectCurrentProfile","profile","currentProfile","selectStatus","selectCurrentProfileUserId","selectNewPostMessage","newPostMessage","selectPosts","posts","selectDialogs","dialogs","selectMessages","selectNewMessageValue","newMessageValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useSelector","useDispatch","onClick","to","Header","header","src","alt","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","profileRequestConfig","profileAxiosInstance","profileApi","newStatus","put","v1","message","likesCount","setProfile","setStatusToState","profileReducer","trim","newValue","name","text","owner","ADD_MESSAGE","ON_MESSAGE_CHANGE","dialogsReducer","appReducer","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","window","ProfileStatus","authUserId","profileUserId","useState","editMode","setEditMode","spanValue","setSpanValue","useEffect","discardChanges","isStatusOwner","onDoubleClick","e","value","onChange","currentTarget","onKeyDown","key","onBlur","autoFocus","ProfileInfo","profileImg","photos","large","profileInfo","description","fullName","Post","postItem","postContent","postMessage","MyPosts","mappedPosts","p","useCheckParams","useParams","toString","getProfilePromise","GetStatusPromise","Promise","all","profileResponse","statusResponse","initProfile","Profile","Dialog","dialog","Message","userMessage","Component","Dialogs","dialogsItems","d","messagesItems","addMessageForm","Chat","React","lazy","Users","Login","App","isInitialised","getAuthPr","path","element","Suspense","fallback","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"uOAKYA,E,kCAAAA,O,qBAAAA,I,iBAAAA,I,+CAAAA,M,KAOL,IAAMC,EAAoB,CAC7BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,yCAIbC,EAAiB,2BAChBJ,GADgB,IAEnBC,QAAS,uDAePI,EAAeC,IAAMC,OAAQH,GAEtBI,EAAU,CACnBC,GAAI,kBAAMJ,EAAaK,IAAb,OAEVC,MAAO,SAACC,GACJ,OAAOP,EAAaQ,KAAgG,QAASD,IAGjIE,OAAQ,kBAAMT,EAAaU,OAA4B,Y,wGCzC/CC,E,2DAAAA,O,qBAAAA,I,kBAAAA,M,KAmBL,IAAMC,EAAgBX,IAAMC,OAAQP,KAE9BkB,EAAW,CACpBC,SAAU,SAACC,GAAD,OAAkBH,EAAcP,IAAd,SAA2C,CAAEW,OAAQ,CAAED,WAEnFE,OAAQ,SAACC,GAAD,OAAoBN,EAAcJ,KAAd,kBAAoDU,KAEhFC,SAAS,WAAD,4BAAE,WAAOD,GAAP,SAAAE,EAAA,+EAA0BR,EAAcF,OAAd,kBAAsDQ,KAAhF,2CAAF,mDAAC,K,yLClBPG,EAA2B,CAC7BC,GAAI,KACJhB,MAAO,KACPiB,MAAO,KACPC,QAAQ,GAoBCC,EAAc,SAAClB,GAAD,MAA8B,CACrDmB,KAAM,gBACNnB,YAGSoB,EAAkB,yDAAiB,WAAOC,GAAP,yBAAAR,EAAA,+EAEuBjB,IAAQC,KAF/B,gBAEhCyB,EAFgC,EAEhCA,OAFgC,IAExBC,KAAQC,EAFgB,EAEhBA,SAAUC,EAFM,EAENA,WAAYF,EAFN,EAEMA,KAC/B,MAAXD,GAAiC,IAAfG,GAClBJ,EAAUH,EAAY,2BAAMK,GAAP,IAAaN,QAAQ,MAE9CO,EAAS,IACNE,QAAQC,IAAKH,EAAS,IAPe,kDASxCE,QAAQC,IAAR,MATwC,0DAAjB,uDAclBC,EAAY,SAACC,EAA4BC,GAA7B,8CAAwE,WAAMT,GAAN,2BAAAR,EAAA,6DACrFkB,EAA6BD,EAA7BC,UAAWC,EAAkBF,EAAlBE,cAD0E,kBAGhCpC,IAAQG,MAAO8B,GAHiB,gBAGjFP,EAHiF,EAGjFA,OAHiF,IAGzEC,KAAQC,EAHiE,EAGjEA,SAAUC,EAHuD,EAGvDA,WACnB,MAAXH,GAAkBG,IAAetC,IAAiB8C,QAClDZ,EAAUD,KACHK,IAAetC,IAAiB+C,OAAyB,sBAAhBV,EAAS,GACzDO,EAAW,CAAEf,MAAOQ,EAAS,KAE7BA,EAAS,IACNO,EAAW,CAAEf,MAAOQ,EAAS,GAAIW,SAAUX,EAAS,KAV8B,kDAazFQ,GAAe,GACfN,QAAQC,IAAR,MAdyF,0DAAxE,uDAkBZS,EAAa,yDAAiB,WAAMf,GAAN,uBAAAR,EAAA,+EAE4BjB,IAAQM,SAFpC,gBAE3BoB,EAF2B,EAE3BA,OAF2B,IAEnBC,KAAQC,EAFW,EAEXA,SAAUC,EAFC,EAEDA,WAFC,EAEWF,KAE/B,MAAXD,GAAkBG,IAAerB,IAAY6B,QAC7CZ,EAAUH,EAAa,CAAEH,GAAI,KAAMhB,MAAO,KAAMiB,MAAO,KAAMC,QAAQ,KAErEO,EAAS,IACNE,QAAQC,IAAKH,EAAS,IARM,kDAWnCE,QAAQC,IAAR,MAXmC,0DAAjB,uDAgBXU,IArEK,WAAgE,IAA/DC,EAA8D,uDAAtDxB,EAAWyB,EAA2C,uCAC/E,MACS,kBADDA,EAAOpB,KAEA,2BACAmB,GACAC,EAAOvC,SAGPsC,I,mBC5BnBE,EAAOC,QAAU,CAAC,SAAW,uBAAuB,YAAc,4B,mBCAlED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,eAAiB,kC,gCCDzL,mEAIaC,EAAY,WACrB,OACI,qBAAKC,UAAWC,IAAEC,UAAlB,SACI,sBAAKF,UAAWC,IAAEE,UAAlB,UACI,wBACA,+B,mBCRhBN,EAAOC,QAAU,CAAC,KAAO,wBAAwB,OAAS,4B,mBCA1DD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,UAAY,+B,mBCAvED,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,mC,mBCA/ED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,2NCoB7D3B,EAAY,CACdiC,MAAO,GACPC,gBAAiB,EACjBC,YAAa,EACbC,SAAU,GACVC,gBAAiB,GA6CRC,EAAW,SAACzC,GAAD,MAAsB,CAAEQ,KAAM,SAAUR,WAEnD0C,EAAa,SAAC1C,GAAD,MAAsB,CAAEQ,KAAM,YAAaR,WAExD2C,EAAa,SAACP,GAAD,MAA8B,CACpD5B,KAAM,YACN4B,UAGSQ,EAAmB,SAACC,GAAD,MAA0B,CAAErC,KAAM,mBAAoBqC,eAOzE9C,EAAS,SAACC,GAAD,8CAA+B,WAAOU,GAAP,uBAAAR,EAAA,+EAEYP,IAASI,OAAQC,GAF7B,gBAErCW,EAFqC,EAErCA,OAFqC,IAE7BC,KAAQE,EAFqB,EAErBA,WAAYD,EAFS,EAETA,SACrB,MAAXF,GAAkBG,IAAerB,IAAY6B,QAC7CZ,EAAU+B,EAAUzC,IAEba,EAAS,IAChBE,QAAQC,IAAKH,EAAS,IAPmB,kDAU7CE,QAAQC,IAAR,MAV6C,0DAA/B,uDAcTf,EAAW,SAACD,GAAD,8CAA+B,WAAOU,GAAP,uBAAAR,EAAA,+EAEUP,IAASM,SAAUD,GAF7B,gBAEvCW,EAFuC,EAEvCA,OAFuC,IAE/BC,KAAQE,EAFuB,EAEvBA,WAAYD,EAFW,EAEXA,SACrB,MAAXF,GAAkBG,IAAerB,IAAY6B,QAC7CZ,EAAUgC,EAAY1C,IACfa,EAAS,IAAIE,QAAQC,IAAKH,EAAS,IALC,kDAO/CE,QAAQC,IAAR,MAP+C,0DAA/B,uDAWXpB,EAAW,SAAC0C,GAAD,8CAAoC,WAAO5B,GAAP,qBAAAR,EAAA,+EAErBP,IAASC,SAAU0C,GAFE,gBAE5C1B,EAF4C,EAE5CA,KACO,MAHqC,EAEtCD,QACQC,IACVwB,EAAsBxB,EAAtBwB,MAAOU,EAAelC,EAAfkC,WACfpC,EAnCqD,CAC7DF,KAAM,wBACN6B,gBAiCsCS,IAC9BpC,EAAUiC,EAAYP,KAN0B,gDASpDrB,QAAQC,IAAR,MAToD,yDAApC,uDAcT+B,IAhGM,WAAkF,IAAjFpB,EAAgF,uDAAxDxB,EAAWyB,EAA6C,uCAClG,OAAQA,EAAOpB,MACX,IAAK,SACD,OAAO,2BAAKmB,GAAZ,IAAmBS,MAAOT,EAAMS,MAAMY,KAAK,SAAAC,GAAC,OAAIA,EAAE7C,KAAOwB,EAAO5B,OAAhB,2BAA8BiD,GAA9B,IAAiCC,UAAU,IAASD,OACxG,IAAK,YACD,OAAO,2BAAKtB,GAAZ,IAAmBS,MAAOT,EAAMS,MAAMY,KAAK,SAAAC,GAAC,OAAIA,EAAE7C,KAAOwB,EAAO5B,OAAhB,2BAA8BiD,GAA9B,IAAiCC,UAAU,IAAUD,OACzG,IAAK,YACD,OAAO,2BACAtB,GADP,IAEIS,MAAM,YAAKR,EAAOQ,SAE1B,IAAK,mBACD,OAAO,2BACAT,GADP,IAEIW,YAAaV,EAAOiB,aAE5B,IAAK,wBACD,OAAO,2BACAlB,GADP,IAEIU,gBAAiBT,EAAOS,gBACxBG,gBAAiBW,KAAKC,KAAMxB,EAAOS,gBAAkBV,EAAMY,YAEnE,QACI,OAAOZ,K,mBCpDnBE,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,IAAM,sB,mBCAxBD,EAAOC,QAAU,CAAC,QAAU,2B,oDCE5B,8fACO,IAAMuB,EAAe,SAAC1B,GAAD,OAAyBA,EAAM2B,KAAKhD,QAEnDiD,EAAoB,SAAC5B,GAAD,OAAyBA,EAAM2B,KAAKlE,OAExDoE,EAAiB,SAAC7B,GAAD,OAAyBA,EAAM2B,KAAKlD,IAErDqD,EAAsB,SAAC9B,GAAD,OAAyBA,EAAM+B,IAAIC,eAIzDC,EAAc,SAACjC,GAAD,OAAyBA,EAAMkC,MAAMzB,OAEnD0B,EAAoB,SAACnC,GAAD,OAAyBA,EAAMkC,MAAMvB,aAEzDyB,EAAwB,SAACpC,GAAD,OAAyBA,EAAMkC,MAAMrB,iBAI7DwB,EAAuB,SAACrC,GAAD,OAAyBA,EAAMsC,QAAQC,gBAE9DC,EAAe,SAACxC,GAAD,OAAyBA,EAAMsC,QAAQtD,QAEtDyD,EAA6B,SAACzC,GAAD,uBAAyBA,EAAMsC,QAAQC,sBAAvC,aAAyB,EAA8BlE,QAEpFqE,EAAuB,SAAC1C,GAAD,OAAyBA,EAAMsC,QAAQK,gBAE9DC,EAAc,SAAC5C,GAAD,OAAyBA,EAAMsC,QAAQO,OAIrDC,EAAgB,SAAC9C,GAAD,OAAyBA,EAAM+C,QAAQA,SAEvDC,EAAiB,SAAChD,GAAD,OAAyBA,EAAM+C,QAAQ7D,UAExD+D,EAAwB,SAACjD,GAAD,OAAyBA,EAAM+C,QAAQG,kB,2FCxB7DC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+FCDDQ,EAAY,WACrB,IAAMjF,EAASkF,YAAoCnC,KAC7CjE,EAAQoG,YAA0CjC,KAClD7C,EAAW+E,cAMjB,OACI,8BAEQnF,EAEI,yCAAKlB,EACD,wBAAQsG,QAVO,WAC/BhF,EAAUe,gBASM,uBAEF,cAAC,IAAD,CAASkE,GAAE,SAAX,sBCXPC,MATf,WACI,OACI,yBAAQ5D,UAAWC,IAAE4D,OAArB,UACI,qBAAKC,IAAI,iFAAiFC,IAAI,KAC9F,cAAC,EAAD,Q,yCCCL,SAASC,EAAUC,GACtB,IAAQC,EAAaC,cAAbD,SACR,OACI,qBAAKlE,UAAYC,IAAEmE,KAAnB,SACI,cAAC,IAAD,CAAMT,GAAKM,EAAMN,GACX3D,UAAYkE,IAAaD,EAAMN,GAAK1D,IAAEoE,OAAS,GADrD,SAGMJ,EAAMK,aCbjB,SAASC,IACZ,OACI,sBAAKvE,UAAWC,IAAEuE,IAAlB,UACI,cAACR,EAAD,CAAWL,GAAI,WAAYW,SAAU,YACrC,cAACN,EAAD,CAAWL,GAAI,WAAYW,SAAU,aACrC,cAACN,EAAD,CAAWL,GAAI,SAAUW,SAAU,UACnC,cAACN,EAAD,CAAWL,GAAI,QAASW,SAAU,Y,oHCJxCG,EAAoB,2BACnBhI,KADmB,IAEtBC,QAAQ,GAAD,OAAMD,IAAkBC,QAAxB,cAILgI,EAAuB3H,IAAMC,OAAQyH,GAE9BE,EACG,SAAC3G,GAAD,OAAoB0G,EAAqBvH,IAArB,UAA2Ca,KADlE2G,EAGE,SAAC3G,GAAD,OAAoB0G,EAAqBvH,IAArB,iBAA6Ca,KAHnE2G,EAKE,SAACC,GAAD,OAAuBF,EAAqBG,IACrD,SAAU,CAAElG,OAAQiG,KCmBpBzG,EAAY,CACdqE,MAAO,CACH,CAAEpE,GAAI0G,cAAMC,QAAS,SAAUC,WAAY,IAC3C,CAAE5G,GAAI0G,cAAMC,QAAS,cAAeC,WAAY,MAEpD1C,eAAgB,GAChBJ,eAAgB,KAChBvD,OAAQ,IA+CCsG,EAAa,SAAC/C,GAAD,MAAmC,CAAE1D,KAAM,cAAe0D,mBACvEgD,EAAmB,SAACvG,GAAD,MAAsB,CAAEH,KAAM,aAAcG,WA2B7DwG,EAxEQ,WAAuE,IAAtExF,EAAqE,uDAA7DxB,EAAWyB,EAAkD,uCACzF,OAAQA,EAAOpB,MACX,IAAK,WACD,OAAOmB,EAAM2C,eAAe8C,OAArB,2BAEIzF,GAFJ,IAGC6C,MAAM,GAAD,mBACE7C,EAAM6C,OADR,CAED,CAAEpE,GAAI0G,cAAMC,QAASpF,EAAM2C,eAAgB0C,WAAY,KAE3D1C,eAAgB,KAPjB,2BASI3C,GATJ,IASW2C,eAAgB,KACtC,IAAK,iBACD,OAAO,2BAAK3C,GAAZ,IAAmB2C,eAAgB1C,EAAOyF,WAC9C,IAAK,cACD,OAAO,2BACA1F,GADP,IAEIuC,eAAgBtC,EAAOsC,iBAE/B,IAAK,aACD,OAAO,2BACAvC,GADP,IAEIhB,OAAQiB,EAAOjB,SAEvB,QACI,OAAOgB,IC7DbxB,EAAY,CACduE,QAAS,CACL,CAAC4C,KAAM,SAAUlH,GAAI,GACrB,CAACkH,KAAM,QAASlH,GAAI,GACpB,CAACkH,KAAM,UAAWlH,GAAI,IAE1BS,SAAU,CACN,CAACT,GAAI0G,cAAMS,KAAM,mFAAmBC,OAAO,GAC3C,CAACpH,GAAI0G,cAAMS,KAAM,uEAAiBC,OAAO,IAE7C3C,gBAAiB,IAuBR4C,EAAc,cACdC,EAAoB,oBAWlBC,EAhCQ,WAAwF,IAAvFhG,EAAsF,uDAA5DxB,EAAWyB,EAAiD,uCAC1G,OAAQA,EAAOpB,MACX,KAAKiH,EACD,OAAO9F,EAAMkD,gBAAgBuC,OAAtB,2BAEIzF,GAFJ,IAGCd,SAAS,GAAD,mBACDc,EAAMd,UADL,CAEJ,CAACT,GAAI0G,cAAMS,KAAM5F,EAAMkD,gBAAiB2C,OAAO,KAEnD3C,gBAAiB,KAPlB,2BASGlD,GATH,IASUkD,gBAAiB,KACtC,KAAK6C,EACD,OAAO,2BAAI/F,GAAX,IAAkBkD,gBAAiBjD,EAAOyF,WAC9C,QACI,OAAO1F,I,QCvCbxB,EAAY,CACdwD,eAAe,GAoCJiE,EA9BI,WAA8D,IAA7DjG,EAA4D,uDAApDxB,EAAWyB,EAAyC,uCAC5E,MACS,qBADDA,EAAOpB,KAEA,2BACAmB,GADP,IAEIgC,eAAe,IAIZhC,GCVbkG,GAAcC,0BAAgB,CAChC7D,UACAS,UACAb,UACAP,SACAI,QAGEqE,GAAa,CACfC,KAKOC,GAAQC,sBAAYL,GAAaM,8BAAoBC,kBAAe,WAAf,EAAmBL,MAgB5E,SAASM,GAAkBC,GAC9B,OAAO9C,YAAa8C,GAbxBC,OAAON,MAAQA,G,qDCrBFO,GAAgB,WACzB,IAAM7H,EAAS6E,YAAmCrB,KAC5CsE,EAAajD,YAA0ChC,KACvDkF,EAAgBlD,YAA+CpB,KACrE,EAAgCuE,oBAAU,GAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAUhI,GAA5C,mBAAOmI,EAAP,KAAkBC,EAAlB,KACMrI,EAAW+E,cAEjBuD,qBAAW,WACPrI,IAAWmI,GACRC,EAAcpI,KAClB,CAACA,IAEJqI,qBAAW,WACP,OAAO,WACHtI,EAAUwG,EAAkB,QAEjC,IAEH,IAAM+B,EAAiB,WACnBJ,GAAa,GACbE,EAAcpI,IAsBZuI,EAAgBT,IAAeC,EAQrC,OACI,qBAAKS,cAXuD,SAAAC,GAAC,OAAIP,GAAcD,IAW/E,SAGUA,GAAYM,EAER,uBACEG,MAAQP,EACRQ,SApC0C,SAAAF,GAAC,OAAIL,EAAcK,EAAEG,cAAcF,QAqC7EG,UAnC6C,SAAAJ,GAC7D,OAAQA,EAAEK,KACN,IAAK,QACDX,IAAcnI,GACXD,GJuEOkG,EIvEckC,EJuEf,uCAAkC,WAAMpI,GAAN,uBAAAR,EAAA,+EAEMyG,EAAsBC,GAF5B,gBAE3CjG,EAF2C,EAE3CA,OAF2C,IAEnCC,KAAQC,EAF2B,EAE3BA,SAAUC,EAFiB,EAEjBA,WACnB,MAAXH,GAAkBG,IAAerB,IAAY6B,SAC7CZ,EAAUwG,EAAkBN,IAGhC/F,EAAS,IACNE,QAAQC,IAAKH,EAAS,IAR0B,kDAUnDE,QAAQC,IAAR,MAVmD,0DAAlC,wDIrET6H,GAAa,GACb,MACJ,IAAK,SACDI,IJkES,IAACrC,GIvCF8C,OAAST,EACTU,WAAS,IAGX,+BAnBVhJ,IACAuI,EAAsB,mCACnB,SC7CR,SAASU,KACZ,IAAM3F,EAAUuB,YAAwCxB,KAClD6F,EAAe5F,GAAYA,EAAQ6F,OAAOC,MAAU9F,EAAQ6F,OAAOC,MAAQ,mIAEjF,OACI,mCAEQ9F,EACM,sBAAKjC,UAAYC,KAAE+H,YAAnB,UACE,qBAAKlE,IAAM+D,EAAa9D,IAAI,KAC5B,sBAAK/D,UAAYC,KAAEgI,YAAnB,UACMhG,EAAQiG,SACV,cAAC,GAAD,UAGN,cAACnI,GAAA,EAAD,M,wBCNPoI,OAdf,SAAelE,GACX,OACI,sBAAKjE,UAAWC,KAAEmI,SAAlB,UACI,sBAAKpI,UAAWC,KAAEoI,YAAlB,UACI,qBAAKvE,IAAI,mIAAmIC,IAAI,KAChJ,qBAAK/D,UAAWC,KAAEqI,YAAlB,SAAgCrE,EAAMc,aAE1C,sBAAK/E,UAAWC,KAAE+E,WAAlB,oBACYf,EAAMe,kBCLvB,SAASuD,KACZxJ,QAAQC,IAAI,YACZ,IAAMsD,EAAiBkB,YAAmCnB,KACpDG,EAAQgB,YAAuCjB,KAC/C7D,EAAW+E,cAOX+E,EAAchG,EAAMxB,KAAK,SAAAyH,GAAC,OAAI,cAAC,GAAD,CAAMrK,GAAKqK,EAAErK,GAAkB2G,QAAU0D,EAAE1D,QACrCC,WAAayD,EAAEzD,YADGyD,EAAErK,OAG9D,OACI,2CAEI,8BACI,0BAAUiJ,MAAQ/E,EAAiBgF,SAXvB,SAACF,GACrB,IAAMC,EAAQD,EAAEG,cAAcF,MAC9B3I,EP2E4C,CAAEF,KAAM,iBAAkB6G,SO3E9CgC,KASgD/B,KAAK,GAAGlH,GAAG,OAE/E,8BACI,wBAAQsF,QAfS,kBAAMhF,EP6ER,CAAEF,KAAM,cO9DvB,wBAEFgK,KCjBd,IAAME,GAAiB,WACnB,IAAM1K,EAAW2K,cAAX3K,OACAU,EAAW+E,cACXgD,EAAaJ,GAA+B7E,KAClDwF,qBAAW,WAMP,OALKhJ,GAAUyI,IACXzI,EAASyI,EAAWmC,YAExB5K,GACGU,ERyEgB,SAACV,GAAD,8CAA+B,WAAOU,GAAP,yBAAAR,EAAA,6DAChD2K,EAAoBlE,EAAuB3G,GAC3C8K,EAAmBnE,EAAsB3G,GAFO,SAIN+K,QAAQC,IAAK,CAACH,EAAmBC,IAJ3B,mCAI/CG,EAJ+C,KAI9BC,EAJ8B,KAKvB,MAA3BD,EAAgBtK,QAA4C,MAA1BuK,EAAevK,SACjDD,EAAUuG,EAAYgE,EAAgBrK,OACtCF,EAAUwG,EAAkBgE,EAAetK,QAPO,2CAA/B,sDQzENuK,CAAanL,IACnB,WACHU,EAAUuG,EAAY,UAE3B,CAACjH,KAGKoL,GAAU,WAEnB,OADAV,KAEI,sBAAK1I,UAAYC,KAAEgC,QAAnB,UACI,cAAC2F,GAAD,IACA,cAACW,GAAD,Q,wCCtBGc,OARf,SAAgBpF,GACZ,OACI,qBAAKjE,UAAWC,KAAEqJ,OAAlB,SACI,cAACtF,EAAD,CAAWL,GAAE,mBAAcM,EAAM7F,IAAMkG,SAAUL,EAAMqB,U,oBCKpDiE,OARf,SAAkBtF,GACd,OACI,qBAAKjE,UAAS,UAAKiE,EAAMuB,MAAQvF,KAAEuJ,YAAavJ,KAAE8E,SAAlD,SACKd,EAAMsB,QCGnB,ICL+BkE,GDyChBC,ICzCgBD,GDKF,WACzB,IAAM/G,EAAUc,YAAyCf,KACnD5D,EAAW2E,YAA0Cb,KACrDE,EAAkBW,YAAmCZ,KAErDlE,EAAW+E,cASXkG,EAAejH,EAAQ1B,KAAK,SAAA4I,GAAC,OAAI,cAAC,GAAD,CAAQtE,KAAOsE,EAAEtE,KAAoBlH,GAAKwL,EAAExL,IAAdwL,EAAExL,OACjEyL,EAAgBhL,EAASmC,KAAK,SAAAC,GAAC,OAAI,cAAC,GAAD,CAAS7C,GAAK6C,EAAE7C,GAAkBmH,KAAOtE,EAAEsE,KAAOC,MAAQvE,EAAEuE,OAAjCvE,EAAE7C,OAGtE,OAEI,sBAAK4B,UAAYC,KAAEyC,QAAnB,UACI,sBAAK1C,UAAYC,KAAE0J,aAAnB,UACI,0CACEA,KAEN,qBAAK3J,UAAYC,KAAEpB,SAAnB,SACMgL,IAEN,sBAAK7J,UAAYC,KAAE6J,eAAnB,UACI,0BAAUxC,SAnBK,SAACF,GVmCD,IAAC/B,EUlCxB3G,GVkCwB2G,EUlCG+B,EAAEG,cAAcF,MVkCG,CAAC7I,KAAMkH,EAAmBL,eUhBtBgC,MAAQxE,IAClD,wBAAQa,QAvBS,WACzBhF,EVoCyB,CAACF,KAAMiH,KUdxB,yBClCL,SAACxB,GAGJ,OAFeoC,GAAyBhF,KAKjC,cAACoI,GAAD,eAAgBxF,IAFZ,cAAC,IAAD,CAAUN,GAAK,aCG5BoG,GAAOC,IAAMC,MAAM,kBAAM,iCACzBC,GAAQF,IAAMC,MAAM,kBAAM,iCAC1BE,GAAQH,IAAMC,MAAM,kBAAM,uDAE1BG,GAAM,WAER,IAAMC,EAAgB7G,YAAoC/B,KACpD/C,EAAW+E,cAMjB,OAJAuD,qBAAW,WACPtI,GXQgC,SAAAA,GACpC,IAAM4L,EAAY5L,EAAUD,eAC5BsK,QAAQC,IAAK,CAACsB,IACTrH,MAAM,WACHvE,EARmB,CAC3BF,KAAM,6BWJH,IAGC,mCAEQ6L,EAAgB,sBAAKrK,UAAU,cAAf,UACR,cAAC,EAAD,IACA,cAACuE,EAAD,IACA,qBAAKvE,UAAY,sBAAjB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOuK,KAAO,IAAOC,QAAU,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOD,KAAO,WAAaC,QAAU,cAAC,GAAD,IAArC,SACI,cAAC,IAAD,CAAOD,KAAO,UAAYC,QAAU,cAAC,GAAD,QAExC,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAU,cAAC,GAAD,MACjC,cAAC,IAAD,CAAOD,KAAO,SAAWC,QACrB,cAAC,IAAMC,SAAP,CAAgBC,SAAW,2CAA3B,SACI,cAACR,GAAD,QAGR,cAAC,IAAD,CAAOK,KAAO,SAAWC,QACrB,cAAC,IAAMC,SAAP,CAAgBC,SAAW,2CAA3B,SACI,cAACP,GAAD,QAGR,cAAC,IAAD,CAAOI,KAAO,QAAUC,QACpB,cAAC,IAAMC,SAAP,CAAgBC,SAAW,2CAA3B,SACI,cAACX,GAAD,gBAMlB,cAAChK,GAAA,EAAD,OAiBP4K,GAXM,WACjB,OACI,cAAC,IAAD,CAAU1E,MAAQA,GAAlB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,SC3DhB2E,IAASC,OAED,cAAC,IAAD,CAAU5E,MAAQA,GAAlB,SACI,cAAC,GAAD,MAIR6E,SAASC,eAAgB,SAU7BjI,M","file":"static/js/main.feedff99.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<{ userId: number }, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (page: number) => axiosInstance.get<responseType>( `/users`, { params: { page } } ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { formikActionsTypes, loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { thunkType } from './redux-store'\r\n\r\n\r\nexport type authStateType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initState: authStateType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n}\r\n\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\n\r\nexport const setUserData = (payload: authStateType) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const getAuthUserData = (): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType, actions: formikActionsTypes): thunkType => async dispatch => {\r\n    const { setErrors, setSubmitting } = actions\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0] === 'Enter valid Email') {\r\n            setErrors( { email: messages[0] } )\r\n        } else {\r\n            messages[0]\r\n            && setErrors( { email: messages[0], password: messages[0] } )\r\n        }\r\n    } catch (err) {\r\n        setSubmitting( false )\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( { id: null, login: null, email: null, isAuth: false } ) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    }catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__19X4w\",\"postContent\":\"Post_postContent__NaiCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3f-uD\",\"description\":\"ProfileInfo_description__1V-2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\"};","import { resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { AppStateType, thunkType } from \"./redux-store\"\r\nimport { profileActionsTypes } from \"./profileReducer\"\r\nimport { authActionTypes } from \"./authReducer\"\r\nimport { dialogsActionTypes } from \"./diaogsReducer\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\n\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const follow = (userId: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { data, status } = await usersAPI.getUsers( currentPage )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qHHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2vr7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__WSORZ\"};","import { AppStateType } from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectIsUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\n\r\n// profile\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectNewPostMessage = (state: AppStateType) => state.profile.newPostMessage\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\n\r\n// dialogs\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectMessages = (state: AppStateType) => state.dialogs.messages\r\n\r\nexport const selectNewMessageValue = (state: AppStateType) => state.dialogs.newMessageValue\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, thunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<thunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.css\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.css\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\n\r\n\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n}","import { v1 } from \"uuid\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { thunkType } from './redux-store'\r\nimport { profileApi } from '../api/profileApi'\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        { id: v1(), message: 'Hi man', likesCount: 50 },\r\n        { id: v1(), message: 'How are you', likesCount: 150 },\r\n    ] as Array<PostType>,\r\n    newPostMessage: '',\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.newPostMessage.trim()\r\n                ? {\r\n                    ...state,\r\n                    posts: [\r\n                        ...state.posts,\r\n                        { id: v1(), message: state.newPostMessage, likesCount: 0 },\r\n                    ],\r\n                    newPostMessage: '',\r\n                }\r\n                : { ...state, newPostMessage: '' }\r\n        case 'ON_POST_CHANGE':\r\n            return { ...state, newPostMessage: action.newValue }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\n\r\nexport const addPost = () => ( { type: 'ADD_POST' } as const )\r\nexport const onPostChange = (newValue: string) => ( { type: 'ON_POST_CHANGE', newValue } as const )\r\nexport const setProfile = (currentProfile: profileType) => ( { type: 'SET_PROFILE', currentProfile } as const )\r\nexport const setStatusToState = (status: string) => ( { type: 'SET_STATUS', status } as const )\r\n\r\nexport const initProfile = (userId: string): thunkType => async (dispatch) => {\r\n    const getProfilePromise = profileApi.getProfile( userId )\r\n    const GetStatusPromise = profileApi.getStatus( userId )\r\n\r\n    const [profileResponse, statusResponse] = await Promise.all( [getProfilePromise, GetStatusPromise] )\r\n    if (profileResponse.status === 200 && statusResponse.status === 200) {\r\n        dispatch( setProfile( profileResponse.data ) )\r\n        dispatch( setStatusToState( statusResponse.data ) )\r\n    }\r\n}\r\n\r\nexport const setStatus = (newStatus: string): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await profileApi.setStatus( newStatus )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setStatusToState( newStatus ) )\r\n        }\r\n\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import {v1} from \"uuid\";\r\n\r\nexport type dialogType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type messageType = {\r\n    id: string\r\n    text: string\r\n    owner: boolean\r\n}\r\n\r\nexport type dialogsStateType = typeof initState\r\n\r\nconst initState = {\r\n    dialogs: [\r\n        {name: \"Sergey\", id: 1},\r\n        {name: \"Artem\", id: 2},\r\n        {name: \"Nikolay\", id: 3},\r\n    ] as Array<dialogType>,\r\n    messages: [\r\n        {id: v1(), text: 'Здорово, корова', owner: false},\r\n        {id: v1(), text: 'Здорово, сама', owner: true},\r\n    ] as Array<messageType>,\r\n    newMessageValue: '',\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsStateType = initState, action: dialogsActionTypes): dialogsStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return state.newMessageValue.trim()\r\n                ? {\r\n                    ...state,\r\n                    messages: [\r\n                        ...state.messages,\r\n                        {id: v1(), text: state.newMessageValue, owner: true}\r\n                    ],\r\n                    newMessageValue: '',\r\n                }\r\n                : {...state, newMessageValue: ''}\r\n        case ON_MESSAGE_CHANGE:\r\n            return {...state, newMessageValue: action.newValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ADD_MESSAGE = \"ADD-MESSAGE\";\r\nexport const ON_MESSAGE_CHANGE = \"ON-MESSAGE-CHANGE\";\r\n\r\n\r\nexport type dialogsActionTypes = AddMessageAType | OnMessageChangeActionType\r\nexport type AddMessageAType = ReturnType<typeof addMessage>\r\nexport type OnMessageChangeActionType = ReturnType<typeof onMessageChange>\r\n\r\nexport const addMessage = () => ({type: ADD_MESSAGE} as const)\r\nexport const onMessageChange = (newValue: string) => ({type: ON_MESSAGE_CHANGE, newValue} as const)\r\n\r\n\r\nexport default dialogsReducer","import { thunkType } from './redux-store'\r\nimport { getAuthUserData } from './authReducer'\r\n\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\n\r\nconst setInitSuccess = () => ( {\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const )\r\n\r\nexport const initApp = (): thunkType => dispatch => {\r\n    const getAuthPr = dispatch( getAuthUserData() )\r\n    Promise.all( [getAuthPr] )\r\n        .then( () => {\r\n            dispatch( setInitSuccess() )\r\n        } )\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { dialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n})\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n];\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | dialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type thunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector( selector )\r\n}","import React, { ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\nimport { setStatus, setStatusToState } from \"../../../../redux/profileReducer\"\r\nimport { selectCurrentProfileUserId, selectIsUserId, selectStatus } from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>( selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>( selectIsUserId )\r\n    const profileUserId = useSelector<AppStateType, number | undefined>( selectCurrentProfileUserId )\r\n    const [editMode, setEditMode] = useState( false )\r\n    const [spanValue, setSpanValue] = useState( status )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        status !== spanValue\r\n        && setSpanValue( status )\r\n    }, [status] )\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            dispatch( setStatusToState( '' ) )\r\n        }\r\n    }, [] )\r\n\r\n    const discardChanges = () => {\r\n        setEditMode( false )\r\n        setSpanValue( status )\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue( e.currentTarget.value )\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch( setStatus( spanValue ) )\r\n\r\n                setEditMode( false )\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = e => setEditMode( !editMode )\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={ onDoubleClickHandler }>\r\n\r\n            {\r\n                ( editMode && isStatusOwner )\r\n\r\n                    ? <input\r\n                        value={ spanValue }\r\n                        onChange={ onChangeHandler }\r\n                        onKeyDown={ onKeyDownHandler }\r\n                        onBlur={ discardChanges }\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span>\r\n                        { getStatusMessage() }\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../../redux/redux-store\"\r\nimport { profileType } from \"../../../redux/profileReducer\"\r\nimport { Preloader } from \"../../Common/Preloader/Preloader\"\r\nimport { ProfileStatus } from \"./ProfileStatus/ProfileStatus\"\r\nimport { selectCurrentProfile } from '../../../redux/selectors'\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const profile = useSelector<AppStateType, profileType>( selectCurrentProfile )\r\n    const profileImg = ( profile &&  profile.photos.large ) ? profile.photos.large : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    // console.log('profileInfo')\r\n    return (\r\n        <>\r\n            {\r\n                profile\r\n                    ? <div className={ s.profileInfo }>\r\n                        <img src={ profileImg } alt=\"\"/>\r\n                        <div className={ s.description }>\r\n                            { profile.fullName }\r\n                            <ProfileStatus/>\r\n                        </div>\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\nfunction Post (props:PostType) {\n    return (\n        <div className={s.postItem}>\n            <div className={s.postContent}>\n                <img src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\" alt=\"\"/>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                Likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, { ChangeEvent } from \"react\"\nimport Post from \"./Post/Post\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addPost, onPostChange, PostType } from \"../../../redux/profileReducer\"\nimport { AppStateType } from \"../../../redux/redux-store\"\nimport { selectNewPostMessage, selectPosts } from '../../../redux/selectors'\n\n\nexport function MyPosts() {\n    console.log('my posts')\n    const newPostMessage = useSelector<AppStateType, string>( selectNewPostMessage )\n    const posts = useSelector<AppStateType, PostType[]>( selectPosts )\n    const dispatch = useDispatch()\n\n    const onButtonClickHandler = () => dispatch( addPost() )\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.currentTarget.value\n        dispatch( onPostChange( value ) )\n    }\n    const mappedPosts = posts.map( p => <Post id={ p.id } key={ p.id } message={ p.message }\n                                              likesCount={ p.likesCount }/> )\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea value={ newPostMessage } onChange={ onChangeHandler } name=\"\" id=\"\"/>\n            </div>\n            <div>\n                <button onClick={ onButtonClickHandler }>Add Post</button>\n            </div>\n            { mappedPosts }\n        </div>\n    )\n}","import React, { useEffect } from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\"\r\nimport { MyPosts } from \"./MyPosts/MyPosts\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAppSelector } from '../../redux/redux-store'\r\nimport { selectIsUserId } from '../../redux/selectors'\r\nimport { initProfile, setProfile } from '../../redux/profileReducer'\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nconst useCheckParams = () => {\r\n    let { userId } = useParams<PathParamsType>()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector<number | null>( selectIsUserId )\r\n    useEffect( () => {\r\n        if (!userId && authUserId) {\r\n            userId = authUserId.toString()\r\n        }\r\n        userId\r\n        && dispatch( initProfile( userId ) )\r\n        return () => {\r\n            dispatch( setProfile( null ) )\r\n        }\r\n    }, [userId] )\r\n}\r\n\r\nexport const Profile = () => {\r\n    useCheckParams()\r\n    return (\r\n        <div className={ s.profile }>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {dialogType} from \"../../../redux/diaogsReducer\";\r\n\r\nfunction Dialog(props:dialogType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <SuperLink to={`/dialogs/${props.id}`} linkName={props.name}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {messageType} from \"../../../redux/diaogsReducer\";\r\n\r\n\r\nfunction Message (props:messageType) {\r\n    return (\r\n        <div className={`${props.owner ? s.userMessage: s.message}`}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport Message from \"./Message/Message\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\nimport { addMessage, dialogType, messageType, onMessageChange } from \"../../redux/diaogsReducer\"\r\nimport { redirectHOC } from \"../Common/hoc/redirectHOC\"\r\nimport { selectDialogs, selectMessages, selectNewMessageValue } from '../../redux/selectors'\r\n\r\n\r\nconst Dialogs = redirectHOC( () => {\r\n    const dialogs = useSelector<AppStateType, dialogType[]>( selectDialogs )\r\n    const messages = useSelector<AppStateType, messageType[]>( selectMessages )\r\n    const newMessageValue = useSelector<AppStateType, string>( selectNewMessageValue )\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonClickHandler = (): void => {\r\n        dispatch( addMessage() )\r\n    }\r\n    const onNewMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n        dispatch( onMessageChange( e.currentTarget.value ) )\r\n    }\r\n\r\n    const dialogsItems = dialogs.map( d => <Dialog name={ d.name } key={ d.id } id={ d.id }/> )\r\n    const messagesItems = messages.map( m => <Message id={ m.id } key={ m.id } text={ m.text } owner={ m.owner }/> )\r\n\r\n\r\n    return (\r\n\r\n        <div className={ s.dialogs }>\r\n            <div className={ s.dialogsItems }>\r\n                <h3>Dialogs:</h3>\r\n                { dialogsItems }\r\n            </div>\r\n            <div className={ s.messages }>\r\n                { messagesItems }\r\n            </div>\r\n            <div className={ s.addMessageForm }>\r\n                <textarea onChange={ onNewMessageChange } value={ newMessageValue }/>\r\n                <button onClick={ onButtonClickHandler }>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport default Dialogs","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector<boolean>( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport Header from \"./components/Header/Header\"\r\nimport { NavBar } from \"./components/NavBar/NavBar\"\r\nimport { HashRouter, Route, Routes } from \"react-router-dom\"\r\nimport { Provider, useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType, store } from './redux/redux-store'\r\nimport { Preloader } from './components/Common/Preloader/Preloader'\r\nimport { initApp } from './redux/appReducer'\r\nimport { selectIsInitialised } from './redux/selectors'\r\nimport { Profile } from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\n\r\n\r\nconst Chat = React.lazy( () => import('./components/Chat/Chat') )\r\nconst Users = React.lazy( () => import('./components/Users/Users') )\r\nconst Login = React.lazy( () => import('./components/Login/Login') )\r\n\r\nconst App = () => {\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const isInitialised = useSelector<AppStateType, boolean>( selectIsInitialised )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( initApp() )\r\n    }, [] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised ? <div className=\"app-wrapper\">\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <div className={ 'app-wrapper-content' }>\r\n                            <Routes>\r\n                                <Route path={ '/' }  element={ <Profile/> }/>\r\n                                <Route path={ '/profile' } element={ <Profile/> }>\r\n                                    <Route path={ ':userId' } element={ <Profile/> }/>\r\n                                </Route>\r\n                                <Route path='/dialogs' element={ <Dialogs/> }/>\r\n                                <Route path={ '/users' } element={ (\r\n                                    <React.Suspense fallback={ <>...</> }>\r\n                                        <Users/>\r\n                                    </React.Suspense> ) }/>\r\n\r\n                                <Route path={ '/login' } element={(\r\n                                    <React.Suspense fallback={ <>...</> }>\r\n                                        <Login/>\r\n                                    </React.Suspense> ) }/>\r\n\r\n                                <Route path={ '/chat' } element={ (\r\n                                    <React.Suspense fallback={ <>...</> }>\r\n                                        <Chat/>\r\n                                    </React.Suspense> ) }/>\r\n                            </Routes>\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}