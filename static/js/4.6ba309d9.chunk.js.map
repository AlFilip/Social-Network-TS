{"version":3,"sources":["components/Common/Pagination/Pagination.module.css","components/Users/UserCard/UserCard.module.css","components/Common/Pagination/paginationHelpers.ts","components/Common/Pagination/Paginaton.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","components/Users/UserCard/UserCard.tsx","components/Users/Users.tsx"],"names":["module","exports","getButtonClassNameHelper","m","currentPage","s","pageNumber","currentPageNumber","Pagination","React","memo","obj","TypeError","totalPagesCount","useSelector","selectTotalPagesCount","selectCurrentPage","dispatch","useDispatch","useState","inputValue","setInputValue","setCurrentPage","setCurrentPageAC","onClickHandler","e","preventDefault","currentTarget","id","paginationButtons","rangeBack","rangeForward","res","i","name","toString","length","getPrepArray","map","href","className","onClick","pagination","slider","onSubmit","form","value","onChange","refineValue","type","UserCard","photos","status","followed","buttonTitle","userImg","small","large","isBtnDisabled","setBtnDisabled","useEffect","userCard","leftPart","to","src","alt","disabled","unFollow","follow","rightPart","Users","items","selectItems","getUsers","users","useMemo","Preloader"],"mappings":"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","file":"static/js/4.6ba309d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2Fuks\",\"slider\":\"Pagination_slider__2cFTK\",\"pageNumber\":\"Pagination_pageNumber__21Eo1\",\"currentPageNumber\":\"Pagination_currentPageNumber__hHrXk\",\"form\":\"Pagination_form__1f6z1\",\"error\":\"Pagination_error__gZEJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userCard\":\"UserCard_userCard__3ynex\",\"leftPart\":\"UserCard_leftPart__3N1L6\",\"rightPart\":\"UserCard_rightPart__3oltd\",\"name\":\"UserCard_name__1H9K5\",\"status\":\"UserCard_status__1vqrh\"};","import s from './Pagination.module.css'\r\n\r\n\r\nexport type PageType = { name: string, id: number }\r\n\r\nexport const getButtonClassNameHelper = (m: number, currentPage: number) => `${ s.pageNumber } ${ m === currentPage ? s.currentPageNumber : '' }`\r\n\r\nexport const getPrepArray = (totalPagesCount: number,\r\n                             currentPage: number,\r\n                             rangeBack: number,\r\n                             rangeForward: number): PageType[] => {\r\n    let res: PageType[] = []\r\n    for (let i = currentPage - rangeBack; i <= currentPage + rangeForward; i++) {\r\n        if (i >= 1 && i <= totalPagesCount) {\r\n            res = [...res, { name: i.toString(), id: i }]\r\n        }\r\n    }\r\n\r\n    res[0]\r\n    && +res[0].id > 1\r\n    && ( res = [{ name: 'First Page', id: 1 }, ...res] )\r\n\r\n    res[0]\r\n    && +res[res.length - 1].id < totalPagesCount\r\n    && ( res = [...res, { name: 'Last Page', id: totalPagesCount }] )\r\n\r\n    return res\r\n}\r\n","import React, { ChangeEventHandler, Dispatch, FormEventHandler, MouseEventHandler, useState } from \"react\"\r\nimport s from './Pagination.module.css'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../../redux/redux-store\"\r\nimport { setCurrentPageAC, usersActionTypes } from \"../../../redux/usersReducer\"\r\nimport { selectCurrentPage, selectTotalPagesCount } from '../../../redux/selectors'\r\nimport { getButtonClassNameHelper, getPrepArray } from './paginationHelpers'\r\n\r\n\r\ntype PaginationPropsType = {\r\n    // totalPagesCount: number\r\n    // currentPage: number\r\n    // callBack: (pageNumber: number) => void\r\n}\r\n\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = React.memo( ({\r\n                                                                          // totalPagesCount,\r\n                                                                          // currentPage,\r\n                                                                          // callBack,\r\n                                                                      }) => {\r\n\r\n    const totalPagesCount = useSelector<AppStateType, number>( selectTotalPagesCount )\r\n    const currentPage = useSelector<AppStateType, number>( selectCurrentPage )\r\n    const dispatch = useDispatch<Dispatch<usersActionTypes>>()\r\n\r\n    const [inputValue, setInputValue] = useState<number>( currentPage )\r\n\r\n    const setCurrentPage = (pageNumber: number) => {\r\n        dispatch( setCurrentPageAC( pageNumber ) )\r\n    }\r\n\r\n    const onClickHandler: MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        e.preventDefault()\r\n        const pageNumber = +e.currentTarget.id\r\n        setCurrentPage( pageNumber )\r\n        setInputValue( pageNumber )\r\n    }\r\n\r\n    const onInputChange: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        const refineValue = (value: number): number => {\r\n            if (value < 1) return 1\r\n            if (value > totalPagesCount) return totalPagesCount\r\n            return value\r\n        }\r\n        const value = +e.currentTarget.value\r\n        setInputValue( refineValue( value ) )\r\n    }\r\n\r\n    const onSubmitForm: FormEventHandler<HTMLFormElement> = (e) => {\r\n        e.preventDefault()\r\n        setCurrentPage( inputValue )\r\n    }\r\n\r\n    const paginationButtons = getPrepArray( totalPagesCount, currentPage, 2, 5 )\r\n        .map( m => (\r\n            <a href={ m.name } key={ m.id } id={ m.id.toString() }\r\n               className={ getButtonClassNameHelper( m.id, currentPage ) }\r\n               onClick={ onClickHandler }\r\n            >\r\n                { m.name }\r\n            </a>\r\n        ) )\r\n\r\n    // console.log('pagination')\r\n    return (\r\n        <div className={ s.pagination }>\r\n            <div className={ s.slider }>\r\n                { paginationButtons }\r\n            </div>\r\n            <form onSubmit={ onSubmitForm } className={ s.form }>\r\n                <input value={ inputValue } onChange={ onInputChange } type=\"number\"/>\r\n                <button>Go</button>\r\n            </form>\r\n        </div>\r\n    )\r\n} )\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { follow, unFollow, UserType } from \"../../../redux/usersReducer\"\r\nimport s from './UserCard.module.css'\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\ntype UserPropsType = UserType & {}\r\nconst userDefaultImg = \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n\r\nexport const UserCard = React.memo( ({\r\n                                         id,\r\n                                         name,\r\n                                         photos,\r\n                                         status,\r\n                                         followed,\r\n                                     }: UserPropsType) => {\r\n\r\n    const buttonTitle = followed ? 'UnFollow' : 'Follow'\r\n    const userImg = photos.small ? photos.small : photos.large ? photos.large : userDefaultImg\r\n    const [isBtnDisabled, setBtnDisabled] = useState<boolean>( false )\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        setBtnDisabled( true )\r\n        dispatch( followed ? unFollow( id ) : follow( id ) )\r\n    }\r\n    useEffect( () => {\r\n        setBtnDisabled( false )\r\n    }, [followed] )\r\n\r\n    // console.log( 'userCard  ', id )\r\n\r\n    return (\r\n        <div className={ s.userCard }>\r\n            <div className={ s.leftPart }>\r\n                <Link to={ '/profile/' + id }>\r\n                    <img\r\n                        src={ userImg }\r\n                        alt=\"\"/>\r\n                </Link>\r\n                <button disabled={ isBtnDisabled } onClick={ onClickHandler }>{ buttonTitle }</button>\r\n            </div>\r\n            <div className={ s.rightPart }>\r\n                <div className={ 'name' }>{ name }</div>\r\n                <div className={ s.status }>status: { status }</div>\r\n            </div>\r\n        </div>\r\n    )\r\n} )","import React, { useEffect, useMemo } from \"react\"\r\nimport { getUsers, UserType } from \"../../redux/usersReducer\"\r\nimport { Preloader } from \"../Common/Preloader/Preloader\"\r\nimport { Pagination } from \"../Common/Pagination/Paginaton\"\r\nimport { UserCard } from './UserCard/UserCard'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { selectCurrentPage, selectItems } from '../../redux/selectors'\r\n\r\n\r\nconst Users = () => {\r\n    // console.log( 'users' )\r\n    const items = useSelector<AppStateType, Array<UserType>>( selectItems )\r\n    const currentPage = useSelector<AppStateType, number>( selectCurrentPage )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( getUsers( currentPage ) )\r\n        // console.log( 'useEffect' )\r\n\r\n        // return () => {\r\n        //     dispatch( setUsersAC( [] ) )\r\n        // }\r\n    }, [currentPage] )\r\n\r\n    const users = useMemo( () => {\r\n        // console.log( 'mapping' )\r\n        return items.map( m => <UserCard key={ m.id }\r\n                                         id={ m.id }\r\n                                         name={ m.name }\r\n                                         photos={ m.photos }\r\n                                         status={ m.status }\r\n                                         followed={ m.followed }\r\n        /> )\r\n    }, [items] )\r\n\r\n    return (\r\n        !items.length\r\n            ? <Preloader/>\r\n            : <div>\r\n                <Pagination/>\r\n                <div>\r\n                    { users }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Users"],"sourceRoot":""}