{"version":3,"sources":["components/Chat/ChatMessageItem.tsx","components/Chat/ChatMessages.tsx","components/Chat/ChatInput.tsx","components/Chat/Chat.tsx"],"names":["ChatMessageItem","userId","message","photo","userName","style","display","flexDirection","alignItems","padding","width","border","borderRadius","to","height","src","alt","fontSize","paddingLeft","ChatMessages","data","useState","messages","setMessages","messagesBlock","useRef","useEffect","setTimeout","current","scrollTo","scrollHeight","mappedMessages","map","m","index","overflowY","ref","length","ChatInput","callback","textAreaValue","setTextAreaValue","value","onChange","e","currentTarget","onKeyPress","code","ctrlKey","onClick","preventDefault","Chat","ws","setWs","WebSocket","onmessage","JSON","parse","close","send"],"mappings":"sLAKaA,EAAuC,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3E,OADAD,EAAQA,GAAgB,iCAEpB,sBAAKE,MAAQ,CAAEC,QAAS,OAAQC,cAAe,MAAOC,WAAY,SAAUC,QAAS,GAArF,UACI,sBAAKJ,MAAQ,CACTK,MAAO,IACPJ,QAAS,OACTC,cAAe,SACfC,WAAY,SACZG,OAAQ,+BACRC,aAAc,IANlB,UAQI,cAAC,IAAD,CAAMC,GAAK,YAAcZ,EAAzB,SACI,qBAAKI,MAAQ,CAAEO,aAAc,MAAOE,OAAQ,IAAOC,IAAMZ,EAAQa,IAAI,kBAEzE,sBAAMX,MAAQ,CAAEY,SAAU,SAA1B,SAEQb,OAKZ,sBAAMC,MAAQ,CAAEa,YAAa,IAA7B,SAAsChB,QCtBrCiB,EAAgD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC5D,EAAgCC,mBAA6B,IAA7D,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAgBC,iBAAwB,MAE9CC,qBAAW,WAMP,OALAH,EAAY,GAAD,mBAAMD,GAAN,YAAmBF,KAC9BO,YAAY,WACRH,EAAcI,SACXJ,EAAcI,QAAQC,SAAU,EAAGL,EAAcI,QAAQE,gBAC7D,GACI,eAER,CAACV,IAEJ,IAAMW,EAAiBT,EAASU,KAAK,SAACC,EAAGC,GACrC,OAAO,cAAC,EAAD,eAAoCD,GAAbC,MAIlC,OACI,qBAAK7B,MAAQ,CACTS,OAAQ,OACRJ,MAAO,IACPyB,UAAW,OACXxB,OAAQ,4BACRC,aAAc,GACdH,QAAS,IACT2B,IAAMZ,EAPV,SASQO,EAAeM,OACTN,EACA,qBClCTO,EAAyD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrE,EAA0ClB,mBAAU,IAApD,mBAAOmB,EAAP,KAAsBC,EAAtB,KAmBA,OACI,gCACI,0BAAUC,MAAQF,EAAgBG,SAnBT,SAACC,GAC9BH,EAAkBG,EAAEC,cAAcH,QAkB0CI,WAfX,SAAAF,GAClD,UAAXA,EAAEG,MAAoBH,EAAEI,UACxBT,EAAUC,GACVC,EAAkB,QAalB,wBAAQQ,QAT6C,SAAAL,GACzDA,EAAEM,iBACFX,EAAUC,GACVC,EAAkB,KAMd,sBCgBGU,UA9BF,WACT,MAAgC9B,mBAA6B,IAA7D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoBF,mBAA4B,MAAhD,mBAAO+B,EAAP,KAAWC,EAAX,KAEA3B,qBAAW,WACP,IAAM0B,EAAK,IAAIE,UAAW,gEAK1B,OAJAF,EAAGG,UAAY,SAACrD,GACZqB,EAAaiC,KAAKC,MAAOvD,EAAQkB,QAErCiC,EAAOD,GACA,WACHA,EAAGM,WAER,IAOH,OACI,gCACI,cAAC,EAAD,CAActC,KAAOE,IACrB,8BACI,cAAC,EAAD,CAAWiB,SATH,SAACrC,GACbkD,GAAMlD,GACNkD,EAAGO,KAAMzD","file":"static/js/6.8ba24326.chunk.js","sourcesContent":["import React, { FC } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { chatMessageType } from './Chat'\r\n\r\n\r\nexport const ChatMessageItem: FC<chatMessageType> = ({ userId, message, photo, userName }) => {\r\n    photo = photo ? photo : 'https://via.placeholder.com/50'\r\n    return (\r\n        <div style={ { display: 'flex', flexDirection: 'row', alignItems: 'center', padding: 5 } }>\r\n            <div style={ {\r\n                width: 100,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                border: '1px solid rgba(0, 0, 0, 0.5)',\r\n                borderRadius: 14,\r\n            } }>\r\n                <Link to={ '/profile/' + userId }>\r\n                    <img style={ { borderRadius: '50%', height: 50 } } src={ photo } alt=\"senderPhoto\"/>\r\n                </Link>\r\n                <span style={ { fontSize: '0.7em' } }>\r\n                    {\r\n                        userName\r\n                    }\r\n                </span>\r\n            </div>\r\n\r\n            <span style={ { paddingLeft: 20 } }>{ message }</span>\r\n        </div>\r\n    )\r\n}","import React, { FC, useEffect, useRef, useState } from 'react'\r\nimport { chatMessageType } from './Chat'\r\nimport { ChatMessageItem } from './ChatMessageItem'\r\n\r\n\r\nexport const ChatMessages: FC<{ data: chatMessageType[] }> = ({ data }) => {\r\n    const [messages, setMessages] = useState<chatMessageType[]>( [] )\r\n\r\n    const messagesBlock = useRef<HTMLDivElement>( null )\r\n\r\n    useEffect( () => {\r\n        setMessages( [...messages, ...data] )\r\n        setTimeout( () => {\r\n            messagesBlock.current\r\n            && messagesBlock.current.scrollTo( 0, messagesBlock.current.scrollHeight )\r\n        }, 0 )\r\n        return () => {\r\n        }\r\n    }, [data] )\r\n\r\n    const mappedMessages = messages.map( (m, index) => {\r\n        return <ChatMessageItem key={ index } { ...m }/>\r\n    } )\r\n\r\n\r\n    return (\r\n        <div style={ {\r\n            height: '50vh',\r\n            width: 400,\r\n            overflowY: 'auto',\r\n            border: '1px solid rgba(0,0,0,0.3)',\r\n            borderRadius: 20,\r\n            padding: 10,\r\n        } } ref={ messagesBlock }>\r\n            {\r\n                mappedMessages.length\r\n                    ? mappedMessages\r\n                    : 'no new messages'\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent, FC, KeyboardEventHandler, MouseEventHandler, useState } from 'react'\r\n\r\n\r\nexport const ChatInput: FC<{ callback: (message: string) => void }> = ({ callback }) => {\r\n    const [textAreaValue, setTextAreaValue] = useState( '' )\r\n\r\n    const onTextValueChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setTextAreaValue( e.currentTarget.value )\r\n    }\r\n\r\n    const onKeyPressHandler: KeyboardEventHandler<HTMLTextAreaElement> = e => {\r\n        if (e.code === 'Enter' && e.ctrlKey) {\r\n            callback( textAreaValue )\r\n            setTextAreaValue( '' )\r\n        }\r\n    }\r\n\r\n    const onClickHandler: MouseEventHandler<HTMLButtonElement> = e => {\r\n        e.preventDefault()\r\n        callback( textAreaValue )\r\n        setTextAreaValue( '' )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea value={ textAreaValue } onChange={ onTextValueChangeHandler } onKeyPress={ onKeyPressHandler }/>\r\n            <button onClick={ onClickHandler }>send</button>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { ChatMessages } from './ChatMessages'\r\nimport { ChatInput } from './ChatInput'\r\n\r\n\r\nexport type chatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState<chatMessageType[]>( [] )\r\n    const [ws, setWs] = useState<WebSocket | null>( null )\r\n\r\n    useEffect( () => {\r\n        const ws = new WebSocket( 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx' )\r\n        ws.onmessage = (message) => {\r\n            setMessages( JSON.parse( message.data ) )\r\n        }\r\n        setWs( ws )\r\n        return () =>{\r\n            ws.close()\r\n        }\r\n    }, [] )\r\n\r\n    const sendMessage = (message: string) => {\r\n        if (ws && message) {\r\n            ws.send( message )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <ChatMessages data={ messages }/>\r\n            <div>\r\n                <ChatInput callback={ sendMessage }/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat"],"sourceRoot":""}