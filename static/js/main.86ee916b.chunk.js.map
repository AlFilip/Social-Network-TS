{"version":3,"sources":["redux/selectors.ts","redux/redux-store.ts","api/authApi.ts","api/profileApi.ts","redux/profileReducer.ts","api/usersApi.ts","api/securityAPI.ts","redux/authReducer.ts","api/dialogsApi.ts","redux/diaogsReducer.ts","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Common/Preloader/Preloader.tsx","redux/appReducer.ts","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.module.css","components/Dialogs/Message/Message.module.css","redux/usersReducer.ts","components/Header/Header.module.css","components/NavBar/NavBar.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.tsx","components/Profile/ProfileInfo/ProfileContact/ProfileContact.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Common/hoc/redirectHOC.tsx","components/Dialogs/Dialogs.tsx","MyRoutes.tsx","App.tsx","index.tsx"],"names":["selectIsAuth","state","auth","isAuth","selectIsUserLogin","login","selectAuthorisedUserId","id","selectCaptcha","captcha","selectAuthError","error","selectIsInitialised","app","isInitSuccess","selectItems","users","items","selectCurrentPage","currentPage","selectTotalPagesCount","totalPagesCount","selectUsersSearchTerm","term","selectCurrentProfile","profile","currentProfile","selectStatus","status","selectCurrentProfileUserId","userId","selectNewPostMessage","newPostMessage","selectPosts","posts","selectAdditionalUserInfo","additionalUserInfo","selectDialogs","dialogs","selectCurrentDialog","currentDialog","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","useSelector","window","loginResultCodes","baseRequestConfig","baseURL","withCredentials","headers","authRequestConfig","authInstance","axios","create","authAPI","me","get","payload","post","logOut","delete","profileRequestConfig","profileAxiosInstance","profileApi","newStatus","put","image","data","FormData","append","initState","v1","message","likesCount","addPost","type","onPostChange","newValue","setProfile","setPhotosToState","photos","setStatusToState","setAdditionalInfo","info","getProfileWithAdditionalInfo","dispatch","a","profileResponse","fullName","additionalInfoPromise","usersAPI","getUsers","GetStatusPromise","Promise","all","additionalInfoResponse","statusResponse","result","userData","find","user","setStatus","messages","resultCode","resultCodes","SUCCESS","console","log","setPhoto","photo","updateProfile","getState","toString","toggleUserProfileFollow","userInfo","apiMethod","followed","follow","unFollow","profileReducer","action","trim","axiosInstance","params","securityAPI","email","setUserData","setError","getAuthUserData","makeLogin","loginData","ERROR","CAPTCHA_IS_REQUIRED","getCaptcha","makeLogout","url","authReducer","dialogsRequestConfig","dialogsAxiosInstance","dialogsApi","Map","setDialogs","setCurrentDialog","dialog","getDialogs","length","map","messagesResponses","forEach","index","set","dialogsReducer","module","exports","Preloader","className","s","container","ldsRipple","appStatus","initApp","getAuthPr","then","appReducer","totalItemsCount","pageSize","friend","undefined","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","setSearchParams","page","count","totalCount","usersReducer","m","Math","ceil","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useDispatch","onClick","to","Header","header","src","alt","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","ProfileStatus","authUserId","profileUserId","useState","editMode","setEditMode","spanValue","setSpanValue","useEffect","discardChanges","isStatusOwner","onDoubleClick","value","onChange","e","currentTarget","onKeyDown","key","onBlur","autoFocus","UpdateProfile","cancel","confirm","body","document","querySelector","style","overflow","modal","stopPropagation","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","youtube","website","validate","values","errors","Object","keys","f","href","test","onSubmit","setSubmitting","isSubmitting","disabled","name","placeholder","component","ProfileContact","title","marginLeft","ProfileInfo","authorisedUserId","isBtnDisabled","setIsBtnDisabled","profileImg","small","isAuthorisedUserProfile","profileInfo","htmlFor","display","files","description","reduce","acc","el","Post","postItem","postContent","postMessage","MyPosts","mappedPosts","p","Profile","useParams","Dialog","callback","userName","Message","Component","senderId","userMessage","Dialogs","dialogClickHandle","DialogsArray","Array","from","size","Messages","navigate","useNavigate","Set","dialogsItems","addMessageForm","Chat","React","lazy","Users","Login","MyRoutes","path","element","Suspense","fallback","App","isInitialised","AppContainer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.86ee916b.chunk.js","sourcesContent":["import { AppStateType } from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectAuthorisedUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n\r\nexport const selectAuthError = (state: AppStateType) => state.auth.error\r\n\r\n\r\n// app\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\nexport const selectUsersSearchTerm = (state: AppStateType) => state.users.term\r\n\r\nexport const selectUsersSearchFriend = (state: AppStateType) => state.users.friend\r\n\r\n\r\n// profile\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectNewPostMessage = (state: AppStateType) => state.profile.newPostMessage\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\nexport const selectAdditionalUserInfo = (state: AppStateType) => state.profile.additionalUserInfo\r\n\r\n\r\n// dialogs\r\n\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectCurrentDialog = (state: AppStateType) => state.dialogs.currentDialog\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { DialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers( {\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n} )\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n]\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore( rootReducer, composeWithDevTools( applyMiddleware( ...middleware ) ) )\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | DialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type ThunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector<AppStateType, T>( selector )\r\n}","import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<loginDataType, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { photosType, profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType, resultCodes } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\ntype setPhotoResponseType = {\r\n    data: { photos: photosType }\r\n    resultCode: resultCodes\r\n    messages: string[]\r\n}\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n\r\n    setPhoto(image: File) {\r\n        const data = new FormData()\r\n        data.append( 'image', image )\r\n\r\n        return profileAxiosInstance.put<any, AxiosResponse<setPhotoResponseType>>( 'photo', data, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data',\r\n            },\r\n        } )\r\n    },\r\n    updateProfile(profile: Partial<profileType>) {\r\n        return profileAxiosInstance.put( '', profile )\r\n    },\r\n}","import {v1} from \"uuid\"\r\nimport {resultCodes, usersAPI} from '../api/usersApi'\r\nimport {ThunkType} from './redux-store'\r\nimport {profileApi} from '../api/profileApi'\r\nimport {UserType} from \"./usersReducer\";\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi man', likesCount: 50},\r\n        {id: v1(), message: 'How are you', likesCount: 150},\r\n    ] as Array<PostType>,\r\n    newPostMessage: '',\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n    additionalUserInfo: {} as UserType\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.newPostMessage.trim()\r\n                ? {\r\n                    ...state,\r\n                    posts: [\r\n                        ...state.posts,\r\n                        {id: v1(), message: state.newPostMessage, likesCount: 0},\r\n                    ],\r\n                    newPostMessage: '',\r\n                }\r\n                : {...state, newPostMessage: ''}\r\n        case 'ON_POST_CHANGE':\r\n            return {...state, newPostMessage: action.newValue}\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return state.currentProfile\r\n                ? {\r\n                    ...state,\r\n                    currentProfile: {\r\n                        ...state.currentProfile,\r\n                        photos: action.photos,\r\n                    },\r\n                }\r\n                : state\r\n        case \"SET_ADDITIONAL_INFO\":\r\n            return {\r\n                ...state,\r\n                additionalUserInfo: action.info\r\n            }\r\n        case \"SET_PROFILE_STATE\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n    | setPhotosToStateActionType\r\n    | setAdditionalInfoActionType\r\n    | setProfileStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\ntype setPhotosToStateActionType = ReturnType<typeof setPhotosToState>\r\ntype setAdditionalInfoActionType = ReturnType<typeof setAdditionalInfo>\r\ntype setProfileStateActionType = ReturnType<typeof setProfileState>\r\n\r\nexport const addPost = () => ({type: 'ADD_POST'} as const)\r\nexport const onPostChange = (newValue: string) => ({type: 'ON_POST_CHANGE', newValue} as const)\r\nexport const setProfile = (currentProfile: profileType) => ({type: 'SET_PROFILE', currentProfile} as const)\r\nexport const setPhotosToState = (photos: photosType) => ({type: 'SET_PHOTOS', photos} as const)\r\nexport const setStatusToState = (status: string) => ({type: 'SET_STATUS', status} as const)\r\nexport const setAdditionalInfo = (info: UserType) => ({type: 'SET_ADDITIONAL_INFO', info} as const)\r\nexport const setProfileState = (payload: Partial<profileStateType>) => ({type: 'SET_PROFILE_STATE', payload} as const)\r\n\r\nexport const getProfileWithAdditionalInfo = (userId: string): ThunkType => async dispatch => {\r\n    const profileResponse = await profileApi.getProfile(userId)\r\n    let additionalInfoPromise\r\n    if (profileResponse && profileResponse.data && profileResponse.data.fullName) {\r\n        additionalInfoPromise = usersAPI.getUsers({term: profileResponse.data.fullName})\r\n    }\r\n    const GetStatusPromise = profileApi.getStatus(userId)\r\n\r\n    const [additionalInfoResponse, statusResponse] = await Promise.all([additionalInfoPromise, GetStatusPromise])\r\n    let result: Partial<profileStateType> = {}\r\n\r\n    if (profileResponse.status === 200) {\r\n        result.currentProfile = profileResponse.data\r\n    }\r\n\r\n    if (additionalInfoResponse?.status === 200) {\r\n        const userData = additionalInfoResponse.data.items.find(user => user.id === +userId)\r\n        if (userData) {\r\n            result.additionalUserInfo = userData\r\n        }\r\n    }\r\n    if (statusResponse.status === 200) {\r\n        result.status = statusResponse.data\r\n    }\r\n    dispatch(setProfileState(result))\r\n}\r\n\r\nexport const setStatus = (newStatus: string): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {messages, resultCode}} = await profileApi.setStatus(newStatus)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setStatusToState(newStatus))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoto = (photo: File): ThunkType => async dispatch => {\r\n    try {\r\n        const {status, data: {resultCode, messages, data: {photos}}} = await profileApi.setPhoto(photo)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setPhotosToState(photos))\r\n        }\r\n\r\n        messages[0]\r\n        && console.log(messages[0])\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: Partial<profileType>): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const currentProfile = getState().profile.currentProfile\r\n        console.log({...currentProfile, ...profile})\r\n        await profileApi.updateProfile(profile)\r\n        currentProfile\r\n        && await dispatch(getProfileWithAdditionalInfo((currentProfile.userId).toString()))\r\n        // messages[0]\r\n        // && console.log( messages[0] )\r\n        return true\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getProfileUserInfo = (payload: { term: string, userId: number }): ThunkType => async dispatch => {\r\n    const {userId, term} = payload\r\n    try {\r\n        const {data: {items}} = await usersAPI.getUsers({term})\r\n        const user = items.filter(user => user.id === userId)[0]\r\n        if (user) {\r\n            dispatch(setAdditionalInfo(user))\r\n        }\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const toggleUserProfileFollow = (userInfo: UserType): ThunkType => async dispatch => {\r\n    try {\r\n        const apiMethod = userInfo.followed ? usersAPI.follow : usersAPI.unFollow\r\n        const {status, data: {resultCode}} = await apiMethod(userInfo.id)\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch(setAdditionalInfo(userInfo))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type getUsersParamsType  = {\r\n    page?: number\r\n    count?: number\r\n    term?: string\r\n    friend?: boolean\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (params:getUsersParamsType) => axiosInstance.get<responseType>( `/users`, { params }  ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import axios from 'axios'\r\nimport { baseRequestConfig } from './authApi'\r\n\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return axios.get<{ url: string }>( 'security/get-captcha-url', baseRequestConfig )\r\n    },\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { ThunkType } from './redux-store'\r\nimport { securityAPI } from '../api/securityAPI'\r\n\r\n\r\nconst initState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false as boolean,\r\n    error: null as string | null\r\n}\r\ntype authStateType = typeof initState\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType | setErrorActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\ntype setErrorActionType = ReturnType<typeof setError>\r\n\r\nexport const setUserData = (payload: Partial<authStateType>) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const setError = (error: string) => ({\r\n    type: 'SET_ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0]) {\r\n            dispatch(setError(messages[0]))\r\n        }else if (resultCode === loginResultCodes.CAPTCHA_IS_REQUIRED) {\r\n            dispatch(setError(messages[0]))\r\n            dispatch(getCaptcha())\r\n        }\r\n        return\r\n    } catch (err) {\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( initState) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async dispatch => {\r\n    try {\r\n        const { data: { url } } = await securityAPI.getCaptcha()\r\n        dispatch(setUserData({captcha: url}))\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\"\r\nimport {baseRequestConfig} from './authApi'\r\nimport {commonResponseType} from \"./usersApi\";\r\nimport {photosType} from \"../redux/profileReducer\";\r\n\r\nconst dialogsRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${baseRequestConfig.baseURL}dialogs/`,\r\n\r\n}\r\n\r\nconst dialogsAxiosInstance = axios.create(dialogsRequestConfig)\r\n\r\nexport const dialogsApi = {\r\n    getAllDialogs() {\r\n        return dialogsAxiosInstance.get<DomainDialogType[]>('')\r\n    },\r\n    getNewMessagesCount() {\r\n        return dialogsAxiosInstance.get<number>('messages/new/count')\r\n    },\r\n    getMessages(userId: number) {\r\n        return dialogsAxiosInstance.get<getMessagesResponseType>(`${userId}/messages`)\r\n    },\r\n    startChat(userId: string) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`${userId}`)\r\n    },\r\n    sendMessage(userId: string, message: string) {\r\n        return dialogsAxiosInstance\r\n            .post <{ body: string }, commonResponseType<{ \"message\": fullDomainMessageType }>>\r\n            (`${userId}`, {body: message})\r\n    },\r\n    isMessageViewed(messageId: string) {\r\n        return dialogsAxiosInstance.get<boolean>(`messages/${messageId}/viewed`)\r\n    },\r\n    sendMessageToSpam(messageId: string) {\r\n        return dialogsAxiosInstance.post<commonResponseType>(`messages/${messageId}/spam`)\r\n    },\r\n    deleteMessage(messageId: string) {\r\n        return dialogsAxiosInstance.delete<commonResponseType>(`messages/${messageId}`)\r\n    },\r\n    restoreMessage(messageId: string) {\r\n        return dialogsAxiosInstance.put<commonResponseType>(`messages/${messageId}/restore`)\r\n    },\r\n    getMessagesByDate(userId: string, date: string) {\r\n        return dialogsAxiosInstance.get(`${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n}\r\n\r\nexport type reducedDomainMessageType = {\r\n    \"id\": string,\r\n    \"body\": string,\r\n    \"translatedBody\": null,\r\n    \"addedAt\": string,\r\n    \"senderId\": number,\r\n    \"senderName\": string,\r\n    \"recipientId\": number,\r\n    \"viewed\": boolean\r\n}\r\n\r\ntype fullDomainMessageType = reducedDomainMessageType & {\r\n    \"recipientName\": string,\r\n    \"deletedBySender\": boolean,\r\n    \"deletedByRecipient\": boolean,\r\n    \"isSpam\": boolean,\r\n    \"distributionId\": null | number\r\n}\r\n\r\nexport type DomainDialogType = {\r\n    \"id\": number,\r\n    \"userName\": string,\r\n    \"hasNewMessages\": boolean,\r\n    \"lastDialogActivityDate\": string,\r\n    \"lastUserActivityDate\": string,\r\n    \"newMessagesCount\": number,\r\n    \"photos\": photosType\r\n}\r\n\r\nexport type getMessagesResponseType = {\r\n    \"items\": reducedDomainMessageType [],\r\n    \"totalCount\": number,\r\n    \"error\": null | string,\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {dialogsApi, DomainDialogType, getMessagesResponseType} from \"../api/dialogsApi\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nexport type DialogsStateType = typeof initState\r\n\r\nexport type DialogsType = Map<DomainDialogType, getMessagesResponseType>\r\n\r\nconst initState = {\r\n    dialogs: new Map() as DialogsType,\r\n    currentDialog: {} as DomainDialogType\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsStateType = initState, action: DialogsActionTypes): DialogsStateType => {\r\n    switch (action.type) {\r\n        case \"SET_DIALOGS\":\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            }\r\n        case \"SET_CURRENT_DIALOG\":\r\n            return {\r\n                ...state,\r\n                currentDialog: action.dialog\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type DialogsActionTypes = SetDialogsActionType\r\n    | SetLastDialogActionType\r\n\r\ntype SetDialogsActionType = ReturnType<typeof setDialogs>\r\ntype SetLastDialogActionType = ReturnType<typeof setCurrentDialog>\r\n\r\nexport const setDialogs = (dialogs: DialogsType) => ({\r\n    type: 'SET_DIALOGS', dialogs\r\n} as const)\r\n\r\nexport const setCurrentDialog = (dialog: DomainDialogType) => ({\r\n    type: 'SET_CURRENT_DIALOG', dialog\r\n} as const)\r\n\r\nexport const getDialogs = (): ThunkType => async dispatch => {\r\n    try {\r\n        const {data, status} = await dialogsApi.getAllDialogs()\r\n        if (status === 200 && data.length) {\r\n            const dialogs: DialogsType = new Map()\r\n            const messagesResponses = await Promise.all(data.map(dialog => {\r\n                return dialogsApi.getMessages(dialog.id)\r\n            }))\r\n            data.forEach((dialog, index) => {\r\n                dialogs.set(dialog, messagesResponses[index].data)\r\n            })\r\n            dispatch(setCurrentDialog(data[0]))\r\n            dispatch(setDialogs(dialogs))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__19X4w\",\"postContent\":\"Post_postContent__NaiCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ThunkType} from './redux-store'\r\nimport {getAuthUserData} from './authReducer'\r\n\r\ntype AppStatus = 'idle' | 'loading'\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n    appStatus: 'idle' as AppStatus\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\n\r\nconst setInitSuccess = () => ({\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const)\r\n\r\nexport const initApp = (): ThunkType => dispatch => {\r\n    const getAuthPr = dispatch(getAuthUserData())\r\n    Promise.all([getAuthPr])\r\n        .then(() => {\r\n            dispatch(setInitSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3f-uD\",\"description\":\"ProfileInfo_description__1V-2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateProfile\":\"UpdateProfile_updateProfile__29J1S\",\"modal\":\"UpdateProfile_modal__1TRFM\",\"wrapper\":\"UpdateProfile_wrapper__2KVW2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\"};","import { getUsersParamsType, resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    term: '',\r\n    friend: undefined as boolean | undefined,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        case 'SET_SEARCH_PARAMS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n    | setTermActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\nexport type setTermActionType = ReturnType<typeof setSearchParams>\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const setSearchParams = (payload: { term?: string, friend?: boolean, currentPage?: number }) => ( {\r\n    type: 'SET_SEARCH_PARAMS',\r\n    payload,\r\n} as const )\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n            return 'OK'\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (payload?: getUsersParamsType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const { currentPage, friend, pageSize, term } = getState().users\r\n        const { data, status } = await usersAPI.getUsers( {\r\n            page: currentPage,\r\n            count: pageSize,\r\n            friend,\r\n            term,\r\n            ...payload,\r\n        } )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qHHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2vr7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__WSORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__1aoyQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, ThunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<ThunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.css\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.css\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/friends'} linkName={'Friends'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import React, {ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppStateType} from \"../../../../redux/redux-store\"\r\n\r\nimport s from './ProfileStatus.module.css'\r\nimport {setStatus, setStatusToState} from \"../../../../redux/profileReducer\"\r\nimport {selectAuthorisedUserId, selectCurrentProfileUserId, selectStatus} from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>(selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>(selectAuthorisedUserId)\r\n    const profileUserId = useSelector<AppStateType, number | undefined>(selectCurrentProfileUserId)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [spanValue, setSpanValue] = useState(status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (status !== spanValue) {\r\n            setSpanValue(status)\r\n        }\r\n    }, [status])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setStatusToState(''))\r\n        }\r\n    }, [dispatch])\r\n\r\n    const discardChanges = () => {\r\n        setEditMode(false)\r\n        setSpanValue(status)\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue(e.currentTarget.value)\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch(setStatus(spanValue))\r\n\r\n                setEditMode(false)\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = () => setEditMode(!editMode)\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={onDoubleClickHandler}>\r\n\r\n            {\r\n                (editMode && isStatusOwner)\r\n\r\n                    ? <input\r\n                        value={spanValue}\r\n                        onChange={onChangeHandler}\r\n                        onKeyDown={onKeyDownHandler}\r\n                        onBlur={discardChanges}\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span className={s.status}>\r\n                        {getStatusMessage()}\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport s from './UpdateProfile.module.css'\r\nimport { useAppSelector } from '../../../../redux/redux-store'\r\nimport { selectCurrentProfile } from '../../../../redux/selectors'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { updateProfile } from '../../../../redux/profileReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst validateHref = (href: string) => {\r\n    const regexp = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n    return regexp.test( href )\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    youtube: string\r\n    website: string,\r\n}\r\n\r\n\r\ntype initValuesTypeType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    contacts: Partial<contactsType>\r\n}\r\n\r\ntype UpdateProfilePropsType = {\r\n    confirm?: (payload: any) => void;\r\n    cancel: () => void;\r\n};\r\n\r\n\r\nexport const UpdateProfile = ({ cancel, confirm }: UpdateProfilePropsType) => {\r\n    const profile = useAppSelector( selectCurrentProfile )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        const body = document.querySelector( 'body' )\r\n        if (body) body.style.overflow = 'hidden'\r\n        return () => {\r\n            if (body) body.style.overflow = 'auto'\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <div className={ s.modal } onClick={ cancel }>\r\n            <div className={ s.updateProfile } onClick={ (e) => e.stopPropagation() }>\r\n                <Formik\r\n                    initialValues={ {\r\n                        fullName: profile?.fullName || '',\r\n                        aboutMe: profile?.aboutMe || '',\r\n                        lookingForAJob: profile?.lookingForAJob || false,\r\n                        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n                        contacts: {\r\n                            facebook: profile?.contacts.facebook || '',\r\n                            github: profile?.contacts.github || '',\r\n                            instagram: profile?.contacts.instagram || '',\r\n                            mainLink: profile?.contacts.mainLink || '',\r\n                            twitter: profile?.contacts.twitter || '',\r\n                            vk: profile?.contacts.vk || '',\r\n                            youtube: profile?.contacts.youtube || '',\r\n                            website: profile?.contacts.website || '',\r\n                        },\r\n                    } }\r\n                    validate={ values => {\r\n                        const errors: Partial<initValuesTypeType> = {}\r\n                        if (!values.lookingForAJobDescription) {\r\n                            errors.lookingForAJobDescription = 'Required'\r\n                        }\r\n                        if (!values.fullName) {\r\n                            errors.fullName = 'Required'\r\n                        }\r\n                        if (!values.aboutMe) {\r\n                            errors.aboutMe = 'Required'\r\n                        }\r\n                        Object.keys( values.contacts ).forEach( f => {\r\n                            const key = f as keyof contactsType\r\n                            if (values.contacts[key] && !validateHref( values.contacts[key] )) {\r\n                                if (!errors.contacts) {\r\n                                    errors.contacts = {}\r\n                                }\r\n                                errors.contacts[key] = 'invalid link'\r\n                            }\r\n                        } )\r\n                        return errors\r\n                    } }\r\n                    onSubmit={ async (values, { setSubmitting }) => {\r\n                        await dispatch( updateProfile( values ) )\r\n                        setSubmitting( false )\r\n                    } }\r\n                >\r\n                    { ({ values, isSubmitting }) => (\r\n                        <Form action=\"\">\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Personal information</legend>\r\n                                <span>My name</span>\r\n                                <Field type=\"text\" name='fullName' placeholder='Name'/>\r\n                                <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n                                <span>About me</span>\r\n                                <Field type=\"text\" name='aboutMe' placeholder='about me'/>\r\n                                <ErrorMessage name={ 'aboutMe' } component={ 'div' }/>\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Job information</legend>\r\n                                <div><Field type=\"checkbox\" name='lookingForAJob'/>\r\n                                    <span>Looking for a job</span></div>\r\n                                {\r\n                                    values.lookingForAJob\r\n                                    && <>\r\n                                        <span>Job description</span>\r\n                                        <Field type=\"text\" name='lookingForAJobDescription'\r\n                                               placeholder='looking for a job description'/>\r\n                                        <ErrorMessage name={ 'lookingForAJobDescription' } component={ 'div' }/>\r\n                                    </>\r\n                                }\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Contacts</legend>\r\n                                {\r\n                                    Object.keys( values.contacts ).map( m => {\r\n                                        return (\r\n                                            <div key={ m }>\r\n                                                <Field type=\"text\" name={ `contacts.${ m }` } placeholder={ m }/>\r\n                                                <ErrorMessage name={ `contacts.${ m }` } component={ 'div' }/>\r\n                                            </div>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </fieldset>\r\n                            <button type='submit' disabled={ isSubmitting }>send</button>\r\n                        </Form> ) }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const ProfileContact: React.FC<{ title: string, value: string | null }> = ({title, value}) => {\r\n    return (\r\n        <div style={{marginLeft: 15}}>{title}: {value}</div>\r\n    )\r\n}","import React, {ChangeEventHandler, useEffect, useState} from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\"\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport {selectAdditionalUserInfo, selectAuthorisedUserId, selectCurrentProfile} from '../../../redux/selectors'\r\nimport {useAppSelector} from '../../../redux/redux-store'\r\nimport {contactsType, setPhoto, toggleUserProfileFollow} from '../../../redux/profileReducer'\r\nimport {UpdateProfile} from './UpdateProfile/UpdateProfile'\r\nimport {ProfileContact} from \"./ProfileContact/ProfileContact\";\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const profile = useSelector(selectCurrentProfile)\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n    const additionalUserInfo = useAppSelector(selectAdditionalUserInfo)\r\n    const [isBtnDisabled, setIsBtnDisabled] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const profileImg = (profile && profile.photos.small) ? profile.photos.small : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    // console.log('profileInfo')\r\n    const onPhotoClickHandle: ChangeEventHandler<HTMLInputElement> = e => {\r\n        e.currentTarget.files &&\r\n        dispatch(setPhoto(e.currentTarget.files[0]))\r\n    }\r\n\r\n    const toggleFollowClickHandle = () => {\r\n        setIsBtnDisabled(true)\r\n        dispatch(toggleUserProfileFollow({\r\n            ...additionalUserInfo,\r\n            followed: !additionalUserInfo.followed\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isBtnDisabled) setIsBtnDisabled(false)\r\n    }, [additionalUserInfo, isBtnDisabled])\r\n\r\n    const isAuthorisedUserProfile = profile?.userId === authorisedUserId\r\n\r\n    useEffect(() => {\r\n        if (editMode) setEditMode(false)\r\n    }, [profile, editMode])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                && <UpdateProfile cancel={() => setEditMode(false)}/>\r\n            }\r\n            {\r\n                profile\r\n                    ? <div className={s.profileInfo}>\r\n                        <label htmlFor=\"image\">\r\n                            {\r\n                                isAuthorisedUserProfile &&\r\n                                <input type=\"file\" name=\"image\" id=\"image\" style={{display: 'none'}}\r\n                                       onChange={onPhotoClickHandle}/>\r\n                            }\r\n                            <img src={profileImg} alt=\"\"/>\r\n                        </label>\r\n                        <div className={s.description}>\r\n                            {profile.fullName}\r\n                            <ProfileStatus/>\r\n                        </div>\r\n                        {\r\n                            profile && authorisedUserId && !isAuthorisedUserProfile\r\n                            && (\r\n                                <button onClick={toggleFollowClickHandle} disabled={isBtnDisabled}>\r\n                                    {additionalUserInfo.followed ? 'Unfollow' : 'Follow'}\r\n                                </button>\r\n                            )}\r\n\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n            <div>\r\n                <div>About me: {profile?.aboutMe}</div>\r\n                <div>Looking for a job: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n                {profile?.lookingForAJob && <div>Job description: {profile?.lookingForAJobDescription}</div>}\r\n                <div>Contacts:</div>\r\n                {\r\n                    profile\r\n                    && Object.keys(profile.contacts)\r\n                        .reduce((acc, el) => {\r\n                            const value = profile.contacts[el as keyof contactsType]\r\n                            return value ? [...acc, <ProfileContact value={value} title={el} key={el}/>] : acc\r\n                        }, [] as JSX.Element[])\r\n                }\r\n            </div>\r\n\r\n            {\r\n                isAuthorisedUserProfile\r\n                && <button onClick={() => setEditMode(true)}>edit profile</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\nfunction Post (props:PostType) {\n    return (\n        <div className={s.postItem}>\n            <div className={s.postContent}>\n                <img src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\" alt=\"\"/>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                Likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, { ChangeEvent } from \"react\"\nimport Post from \"./Post/Post\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addPost, onPostChange, PostType } from \"../../../redux/profileReducer\"\nimport { AppStateType } from \"../../../redux/redux-store\"\nimport { selectNewPostMessage, selectPosts } from '../../../redux/selectors'\n\n\nexport function MyPosts() {\n    console.log('my posts')\n    const newPostMessage = useSelector<AppStateType, string>( selectNewPostMessage )\n    const posts = useSelector<AppStateType, PostType[]>( selectPosts )\n    const dispatch = useDispatch()\n\n    const onButtonClickHandler = () => dispatch( addPost() )\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.currentTarget.value\n        dispatch( onPostChange( value ) )\n    }\n    const mappedPosts = posts.map( p => <Post id={ p.id } key={ p.id } message={ p.message }\n                                              likesCount={ p.likesCount }/> )\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea value={ newPostMessage } onChange={ onChangeHandler } name=\"\" id=\"\"/>\n            </div>\n            <div>\n                <button onClick={ onButtonClickHandler }>Add Post</button>\n            </div>\n            { mappedPosts }\n        </div>\n    )\n}","import React, {useEffect} from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\"\r\nimport {MyPosts} from \"./MyPosts/MyPosts\"\r\nimport {useParams} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from '../../redux/redux-store'\r\nimport {selectAuthorisedUserId} from '../../redux/selectors'\r\nimport {getProfileWithAdditionalInfo, setProfile} from '../../redux/profileReducer'\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n    let {userId} = useParams<PathParamsType>()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector(selectAuthorisedUserId)\r\n    useEffect(() => {\r\n        let id = userId\r\n        if (!id && authUserId) {\r\n            id = authUserId.toString()\r\n        }\r\n        id\r\n        && dispatch( getProfileWithAdditionalInfo( id ) )\r\n\r\n        return () => {\r\n            dispatch(setProfile(null))\r\n        }\r\n    }, [userId, dispatch, authUserId])\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {DomainDialogType} from \"../../../api/dialogsApi\";\r\n\r\ntype DialogPropsType = {\r\n    dialog: DomainDialogType\r\n    callback: (dialog: DomainDialogType) => void\r\n}\r\n\r\nfunction Dialog({\r\n                    dialog,\r\n                    callback\r\n                }: DialogPropsType) {\r\n    return (\r\n        <div className={s.dialog} onClick={() => callback(dialog)}>\r\n            <SuperLink to={`/dialogs/${dialog.id}`} linkName={dialog.userName}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {reducedDomainMessageType} from \"../../../api/dialogsApi\";\r\nimport {useAppSelector} from \"../../../redux/redux-store\";\r\nimport {selectAuthorisedUserId} from \"../../../redux/selectors\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: reducedDomainMessageType\r\n}\r\n\r\nfunction Message({\r\n                     message\r\n                 }: MessagePropsType) {\r\n\r\n    const authorisedUserId = useAppSelector(selectAuthorisedUserId)\r\n\r\n    return (\r\n        <div className={`${message.senderId === authorisedUserId ? s.userMessage : s.message}`}>\r\n            {message.body}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {useAppSelector} from \"../../redux/redux-store\"\r\nimport {DialogsType, getDialogs, setCurrentDialog, setDialogs} from \"../../redux/diaogsReducer\"\r\nimport {redirectHOC} from \"../Common/hoc/redirectHOC\"\r\nimport {selectCurrentDialog, selectDialogs} from \"../../redux/selectors\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {DomainDialogType, getMessagesResponseType} from \"../../api/dialogsApi\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = redirectHOC(() => {\r\n    const dialogs = useAppSelector(selectDialogs)\r\n    const dispatch = useDispatch()\r\n    const currentDialog = useAppSelector(selectCurrentDialog)\r\n    const onButtonClickHandler = (): void => {\r\n    }\r\n    const onNewMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    }\r\n\r\n\r\n    const dialogClickHandle = (dialog: DomainDialogType) => {\r\n        dispatch(setCurrentDialog(dialog))\r\n\r\n    }\r\n\r\n    const DialogsArray = Array.from(dialogs, (([dialog]) => {\r\n        return <Dialog key={dialog.id} dialog={dialog} callback={dialogClickHandle}/>\r\n    }))\r\n\r\n\r\n    const messages: getMessagesResponseType | undefined | false = currentDialog && !!dialogs.size && dialogs.get(currentDialog)\r\n\r\n    const Messages = messages && messages.items.map(message => {\r\n        return <Message key={message.id} message={message}/>\r\n    })\r\n\r\n    const navigate = useNavigate()\r\n    const {userId} = useParams()\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n        return () => {\r\n            dispatch(setDialogs(new Set() as unknown as DialogsType))\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (currentDialog && currentDialog.id && !userId) {\r\n            navigate(`${currentDialog.id}`)\r\n        }\r\n    }, [currentDialog, userId, navigate])\r\n\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <h3>Dialogs:</h3>\r\n                {DialogsArray}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {Messages}\r\n            </div>\r\n            <div className={s.addMessageForm}>\r\n                <textarea onChange={onNewMessageChange} value={'newMessageValue'}/>\r\n                <button onClick={onButtonClickHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Dialogs","import {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Profile} from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\nimport React from 'react'\r\n\r\n\r\nconst Chat = React.lazy(() => import('./components/Chat/Chat'))\r\nconst Users = React.lazy(() => import('./components/Users/Users'))\r\nconst Login = React.lazy(() => import('./components/Login/Login'))\r\n\r\nexport const MyRoutes = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={'/profile'} element={<Profile/>}>\r\n                <Route path={':userId'} element={<Profile/>}/>\r\n            </Route>\r\n            <Route path='/dialogs' element={<Dialogs/>}>\r\n                <Route path={`:userId`} element={<Dialogs/>}/>\r\n            </Route>\r\n            <Route path={'/users'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n            <Route path={'/friends'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Users/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/login'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Login/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path={'/chat'} element={(\r\n                <React.Suspense fallback={<>...</>}>\r\n                    <Chat/>\r\n                </React.Suspense>)}\r\n            />\r\n\r\n            <Route path=\"*\" element={<Navigate to=\"/profile\"/>}/>\r\n        </Routes>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport Header from \"./components/Header/Header\"\r\nimport { NavBar } from \"./components/NavBar/NavBar\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport { Provider, useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType, store } from './redux/redux-store'\r\nimport { Preloader } from './components/Common/Preloader/Preloader'\r\nimport { initApp } from './redux/appReducer'\r\nimport { selectIsInitialised } from './redux/selectors'\r\nimport { MyRoutes } from './MyRoutes'\r\n\r\n\r\nconst App = () => {\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const isInitialised = useSelector<AppStateType, boolean>( selectIsInitialised )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( initApp() )\r\n    }, [dispatch] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised ? <div className=\"app-wrapper\">\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <div className={ 'app-wrapper-content' }>\r\n\r\n                            <MyRoutes/>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}