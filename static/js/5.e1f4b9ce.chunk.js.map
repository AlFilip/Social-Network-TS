{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx"],"names":["module","exports","loginSchema","Yup","shape","email","required","password","min","max","Login","isAuth","useAppSelector","selectIsAuth","captcha","selectCaptcha","error","selectAuthError","dispatch","useDispatch","onSubmitHandler","values","actions","a","makeLogin","setSubmitting","to","initialValues","rememberMe","validationSchema","onSubmit","isSubmitting","className","s","form","disabled","name","type","placeholder","src","alt"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,KAAO,sB,wJCsBnBC,EAAcC,MAAaC,MAAO,CACpCC,MAAOF,MAAaE,MAAO,iBAAkBC,SAAU,YAIvDC,SAAUJ,MACLK,IAAK,EAAG,cACRC,IAAK,GAAI,aACTH,SAAU,cA4DJI,UAzDD,WACV,IAAMC,EAASC,YAAgBC,KACzBC,EAAUF,YAAgBG,KAC1BC,EAAQJ,YAAeK,KACvBC,EAAWC,cAEXC,EAAe,uCAAG,WAAOC,EAAyBC,GAAhC,SAAAC,EAAA,sEACdL,EAAUM,YAAWH,IADP,OAEpBC,EAAQG,eAAc,GACtBJ,EAAOP,QAAU,GAHG,2CAAH,wDAKrB,OAAIH,EAAe,cAAC,IAAD,CAAUe,GAAK,aAG9B,8BACI,cAAC,IAAD,CACIC,cAAgB,CACZtB,MAAO,GACPE,SAAU,GACVqB,YAAY,EACZd,QAAS,IAEbe,iBAAmB3B,EACnB4B,SAAWV,EARf,SAWQ,gBAAGW,EAAH,EAAGA,aAAH,OACI,eAAC,IAAD,CAAMC,UAAYC,IAAEC,KAApB,UACI,gCACI,cAAC,IAAD,CAAOC,SAAWJ,EAAeK,KAAK,QAAQC,KAAK,QAAQC,YAAY,UACvE,cAAC,IAAD,CAAcF,KAAK,aAEvB,gCACI,cAAC,IAAD,CAAOD,SAAWJ,EAAeK,KAAK,WAAWE,YAAY,WACtDD,KAAK,aACZ,cAAC,IAAD,CAAcD,KAAK,gBAEvB,gDAEI,cAAC,IAAD,CAAOC,KAAK,WAAWD,KAAK,kBAE/BpB,EAEGF,GACG,kCACC,qBAAKyB,IAAMzB,EAAU0B,IAAI,KACzB,cAAC,IAAD,CAAOH,KAAK,OAAOD,KAAK,eAGhC,wBAAQD,SAAWJ,EAAeM,KAAK,SAAvC","file":"static/js/5.e1f4b9ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2EAT-\"};","import React from \"react\"\r\nimport { ErrorMessage, Field, Form, Formik, FormikHelpers } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport s from './Login.module.css'\r\nimport { useDispatch } from \"react-redux\"\r\nimport { getCaptcha, makeLogin } from \"../../redux/authReducer\"\r\nimport { useAppSelector } from '../../redux/redux-store'\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { selectAuthError, selectCaptcha, selectIsAuth } from '../../redux/selectors'\r\n\r\n\r\nexport type loginValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type formikActionsTypes = {\r\n    // setStatus: (status?: any) => void\r\n    setSubmitting: (isSubmitting: boolean) => void;\r\n}\r\n\r\nconst loginSchema = Yup.object().shape( {\r\n    email: Yup.string().email( 'Invalid email' ).required( 'Required' ),\r\n    // Yup.string()\r\n    // .email( 'Invalid email' )\r\n    // .required( 'Required' ),\r\n    password: Yup.string()\r\n        .min( 2, 'Too Short!' )\r\n        .max( 50, 'Too Long!' )\r\n        .required( 'Required' ),\r\n} )\r\n\r\nconst Login = () => {\r\n    const isAuth = useAppSelector( selectIsAuth )\r\n    const captcha = useAppSelector( selectCaptcha )\r\n    const error = useAppSelector(selectAuthError)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmitHandler = async (values: loginValuesType, actions: FormikHelpers<loginValuesType>) => {\r\n        await dispatch( makeLogin( values ) )\r\n        actions.setSubmitting(false)\r\n        values.captcha = ''\r\n    }\r\n    if (isAuth) return <Navigate to={ '/profile' }/>\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={ {\r\n                    email: '',\r\n                    password: '',\r\n                    rememberMe: false,\r\n                    captcha: '',\r\n                } }\r\n                validationSchema={ loginSchema }\r\n                onSubmit={ onSubmitHandler }\r\n            >\r\n                {\r\n                    ({ isSubmitting }) =>\r\n                        <Form className={ s.form }>\r\n                            <div>\r\n                                <Field disabled={ isSubmitting } name='email' type='email' placeholder='login'/>\r\n                                <ErrorMessage name=\"email\"/>\r\n                            </div>\r\n                            <div>\r\n                                <Field disabled={ isSubmitting } name='password' placeholder='password'\r\n                                       type='password'/>\r\n                                <ErrorMessage name=\"password\"/>\r\n                            </div>\r\n                            <label>\r\n                                Remember me\r\n                                <Field type='checkbox' name='rememberMe'/>\r\n                            </label>\r\n                            {error}\r\n                            {\r\n                                captcha\r\n                                && <label>\r\n                                    <img src={ captcha } alt=\"\"/>\r\n                                    <Field type='text' name='captcha'/>\r\n                                </label>\r\n                            }\r\n                            <button disabled={ isSubmitting } type='submit'>ok</button>\r\n                        </Form>\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login"],"sourceRoot":""}