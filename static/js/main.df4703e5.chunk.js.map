{"version":3,"sources":["redux/selectors.ts","api/profileApi.ts","redux/profileReducer.ts","api/authApi.ts","redux/redux-store.ts","api/usersApi.ts","api/securityAPI.ts","redux/authReducer.ts","redux/diaogsReducer.ts","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Common/Preloader/Preloader.tsx","redux/appReducer.ts","components/NavBar/SuperLink/SuperLink.module.css","components/Common/Preloader/Preloader.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.module.css","components/Dialogs/Message/Message.module.css","redux/usersReducer.ts","components/Header/Header.module.css","components/NavBar/NavBar.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","reportWebVitals.ts","components/Header/LoginForm/LoginForm.tsx","components/Header/Header.tsx","components/NavBar/SuperLink/SuperLink.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/UpdateProfile/UpdateProfile.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Common/hoc/redirectHOC.tsx","MyRoutes.tsx","App.tsx","index.tsx"],"names":["selectIsAuth","state","auth","isAuth","selectIsUserLogin","login","selectAuthorisedUserId","id","selectCaptcha","captcha","selectAuthError","error","selectIsInitialised","app","isInitSuccess","selectItems","users","items","selectCurrentPage","currentPage","selectTotalPagesCount","totalPagesCount","selectCurrentProfile","profile","currentProfile","selectStatus","status","selectCurrentProfileUserId","userId","selectNewPostMessage","newPostMessage","selectPosts","posts","selectDialogs","dialogs","selectMessages","messages","selectNewMessageValue","newMessageValue","profileRequestConfig","baseRequestConfig","baseURL","profileAxiosInstance","axios","create","profileApi","get","newStatus","put","image","data","FormData","append","headers","initState","v1","message","likesCount","addPost","type","onPostChange","newValue","setProfile","setPhotosToState","photos","setStatusToState","initProfile","dispatch","a","getProfilePromise","GetStatusPromise","Promise","all","profileResponse","statusResponse","setStatus","resultCode","resultCodes","SUCCESS","console","log","setPhoto","photo","updateProfile","getState","toString","profileReducer","action","trim","loginResultCodes","withCredentials","authRequestConfig","authInstance","authAPI","me","payload","post","logOut","delete","rootReducer","combineReducers","middleware","reduxThunk","store","createStore","composeWithDevTools","applyMiddleware","useAppSelector","selector","useSelector","window","axiosInstance","usersAPI","getUsers","page","params","follow","unFollow","securityAPI","email","setUserData","setError","getAuthUserData","makeLogin","loginData","ERROR","CAPTCHA_IS_REQUIRED","getCaptcha","makeLogout","url","authReducer","name","text","owner","ADD_MESSAGE","ON_MESSAGE_CHANGE","addMessage","onMessageChange","dialogsReducer","module","exports","Preloader","className","s","container","ldsRipple","initApp","getAuthPr","then","appReducer","totalItemsCount","pageSize","followAC","unFollowAC","setUsersAC","setCurrentPageAC","pageNumber","totalCount","usersReducer","map","m","followed","Math","ceil","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoginForm","useDispatch","onClick","to","Header","header","src","alt","SuperLink","props","pathname","useLocation","item","active","linkName","NavBar","nav","ProfileStatus","authUserId","profileUserId","useState","editMode","setEditMode","spanValue","setSpanValue","useEffect","discardChanges","isStatusOwner","onDoubleClick","value","onChange","e","currentTarget","onKeyDown","key","onBlur","autoFocus","UpdateProfile","cancel","confirm","body","document","querySelector","style","overflow","modal","stopPropagation","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","youtube","website","validate","values","errors","Object","keys","forEach","f","href","test","onSubmit","setSubmitting","isSubmitting","disabled","placeholder","component","ProfileInfo","authorisedUserId","profileImg","small","profileInfo","htmlFor","display","files","description","reduce","acc","el","title","Contact","marginLeft","Post","postItem","postContent","postMessage","MyPosts","mappedPosts","p","Profile","useParams","Dialog","dialog","Message","userMessage","Component","Dialogs","dialogsItems","d","messagesItems","addMessageForm","Chat","React","lazy","Users","Login","MyRoutes","path","element","Suspense","fallback","App","isInitialised","AppContainer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.df4703e5.chunk.js","sourcesContent":["import { AppStateType } from './redux-store'\r\n\r\n\r\n// auth\r\nexport const selectIsAuth = (state: AppStateType) => state.auth.isAuth\r\n\r\nexport const selectIsUserLogin = (state: AppStateType) => state.auth.login\r\n\r\nexport const selectAuthorisedUserId = (state: AppStateType) => state.auth.id\r\n\r\nexport const selectCaptcha = (state: AppStateType) => state.auth.captcha\r\n\r\nexport const selectAuthError = (state: AppStateType) => state.auth.error\r\n\r\n\r\n// app\r\nexport const selectIsInitialised = (state: AppStateType) => state.app.isInitSuccess\r\n\r\n\r\n// users\r\nexport const selectItems = (state: AppStateType) => state.users.items\r\n\r\nexport const selectCurrentPage = (state: AppStateType) => state.users.currentPage\r\n\r\nexport const selectTotalPagesCount = (state: AppStateType) => state.users.totalPagesCount\r\n\r\n\r\n// profile\r\nexport const selectCurrentProfile = (state: AppStateType) => state.profile.currentProfile\r\n\r\nexport const selectStatus = (state: AppStateType) => state.profile.status\r\n\r\nexport const selectCurrentProfileUserId = (state: AppStateType) => state.profile.currentProfile?.userId\r\n\r\nexport const selectNewPostMessage = (state: AppStateType) => state.profile.newPostMessage\r\n\r\nexport const selectPosts = (state: AppStateType) => state.profile.posts\r\n\r\n\r\n// dialogs\r\nexport const selectDialogs = (state: AppStateType) => state.dialogs.dialogs\r\n\r\nexport const selectMessages = (state: AppStateType) => state.dialogs.messages\r\n\r\nexport const selectNewMessageValue = (state: AppStateType) => state.dialogs.newMessageValue\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { photosType, profileType } from \"../redux/profileReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\nimport { commonResponseType, resultCodes } from \"./usersApi\"\r\n\r\n\r\nconst profileRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: `${ baseRequestConfig.baseURL }profile/`,\r\n}\r\ntype setPhotoResponseType = {\r\n    data: { photos: photosType }\r\n    resultCode: resultCodes\r\n    messages: string[]\r\n}\r\nconst profileAxiosInstance = axios.create( profileRequestConfig )\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: string) => profileAxiosInstance.get<profileType>( `${ userId }` ),\r\n\r\n    getStatus: (userId: string) => profileAxiosInstance.get<string>( `status/${ userId }` ),\r\n\r\n    setStatus: (newStatus: string) => profileAxiosInstance.put<{ status: string }, AxiosResponse<commonResponseType>>\r\n    ( 'status', { status: newStatus } ),\r\n\r\n    setPhoto(image: File) {\r\n        const data = new FormData()\r\n        data.append( 'image', image )\r\n\r\n        return profileAxiosInstance.put<any, AxiosResponse<setPhotoResponseType>>( 'photo', data, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data',\r\n            },\r\n        } )\r\n    },\r\n    updateProfile(profile: Partial<profileType>) {\r\n        return profileAxiosInstance.put( '', profile )\r\n    },\r\n}","import { v1 } from \"uuid\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { thunkType } from './redux-store'\r\nimport { profileApi } from '../api/profileApi'\r\n\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type contactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\nexport type profileType = {\r\n    aboutMe: string | null\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number\r\n    photos: photosType\r\n} | null\r\n\r\nexport type profileStateType = typeof initState\r\n\r\nconst initState = {\r\n    posts: [\r\n        { id: v1(), message: 'Hi man', likesCount: 50 },\r\n        { id: v1(), message: 'How are you', likesCount: 150 },\r\n    ] as Array<PostType>,\r\n    newPostMessage: '',\r\n    currentProfile: null as profileType,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initState, action: profileActionsTypes): profileStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.newPostMessage.trim()\r\n                ? {\r\n                    ...state,\r\n                    posts: [\r\n                        ...state.posts,\r\n                        { id: v1(), message: state.newPostMessage, likesCount: 0 },\r\n                    ],\r\n                    newPostMessage: '',\r\n                }\r\n                : { ...state, newPostMessage: '' }\r\n        case 'ON_POST_CHANGE':\r\n            return { ...state, newPostMessage: action.newValue }\r\n        case 'SET_PROFILE':\r\n            return {\r\n                ...state,\r\n                currentProfile: action.currentProfile,\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case 'SET_PHOTOS':\r\n            return state.currentProfile\r\n                ? {\r\n                    ...state,\r\n                    currentProfile: {\r\n                        ...state.currentProfile,\r\n                        photos: action.photos,\r\n                    },\r\n                }\r\n                : state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type profileActionsTypes =\r\n    AddPostActionType\r\n    | OnPostChangeActionType\r\n    | setProfileActionType\r\n    | setStatusToStateActionType\r\n    | setPhotosToStateActionType\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type OnPostChangeActionType = ReturnType<typeof onPostChange>\r\nexport type setProfileActionType = ReturnType<typeof setProfile>\r\ntype setStatusToStateActionType = ReturnType<typeof setStatusToState>\r\ntype setPhotosToStateActionType = ReturnType<typeof setPhotosToState>\r\n\r\nexport const addPost = () => ( { type: 'ADD_POST' } as const )\r\nexport const onPostChange = (newValue: string) => ( { type: 'ON_POST_CHANGE', newValue } as const )\r\nexport const setProfile = (currentProfile: profileType) => ( { type: 'SET_PROFILE', currentProfile } as const )\r\nexport const setPhotosToState = (photos: photosType) => ( { type: 'SET_PHOTOS', photos } as const )\r\nexport const setStatusToState = (status: string) => ( { type: 'SET_STATUS', status } as const )\r\n\r\nexport const initProfile = (userId: string): thunkType => async dispatch => {\r\n    const getProfilePromise = profileApi.getProfile( userId )\r\n    const GetStatusPromise = profileApi.getStatus( userId )\r\n\r\n    const [profileResponse, statusResponse] = await Promise.all( [getProfilePromise, GetStatusPromise] )\r\n    if (profileResponse.status === 200 && statusResponse.status === 200) {\r\n        dispatch( setProfile( profileResponse.data ) )\r\n        dispatch( setStatusToState( statusResponse.data ) )\r\n    }\r\n}\r\n\r\nexport const setStatus = (newStatus: string): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await profileApi.setStatus( newStatus )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setStatusToState( newStatus ) )\r\n        }\r\n\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const setPhoto = (photo: File): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { resultCode, messages, data: { photos } } } = await profileApi.setPhoto( photo )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setPhotosToState( photos ) )\r\n        }\r\n\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: Partial<profileType>): thunkType => async (dispatch, getState) => {\r\n    try {\r\n        const currentProfile = getState().profile.currentProfile\r\n        console.log({ ...currentProfile, ...profile })\r\n        const res = await profileApi.updateProfile( profile )\r\n        currentProfile\r\n        && await dispatch(initProfile((currentProfile.userId).toString()))\r\n        // messages[0]\r\n        // && console.log( messages[0] )\r\n        return true\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n","import axios, { AxiosResponse } from \"axios\"\r\nimport { commonResponseType } from \"./usersApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\n\r\n\r\nexport enum loginResultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n    CAPTCHA_IS_REQUIRED = 10\r\n}\r\n\r\n\r\nexport const baseRequestConfig = {\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8ac432b4-b12d-401e-8457-1e2c87c081fe',\r\n    },\r\n}\r\n\r\nconst authRequestConfig = {\r\n    ...baseRequestConfig,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/auth/',\r\n}\r\n\r\ntype authResponseDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\ntype loginDataType = {\r\n    isSuccess: boolean\r\n    failMessage: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\nconst authInstance = axios.create( authRequestConfig )\r\n\r\nexport const authAPI = {\r\n    me: () => authInstance.get<commonResponseType<authResponseDataType>>( `me` ),\r\n\r\n    login: (payload: loginValuesType) => {\r\n        return authInstance.post<loginValuesType, AxiosResponse<commonResponseType<{ userId: number }, loginResultCodes>>>( 'login', payload )\r\n    },\r\n\r\n    logOut: () => authInstance.delete<commonResponseType>( 'login' ),\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk, { ThunkAction } from 'redux-thunk'\r\nimport profile, { profileActionsTypes } from \"./profileReducer\"\r\nimport dialogs, { dialogsActionTypes } from \"./diaogsReducer\"\r\nimport users, { usersActionTypes } from \"./usersReducer\"\r\nimport auth, { authActionTypes } from \"./authReducer\"\r\nimport app, { appActionTypes } from './appReducer'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nconst rootReducer = combineReducers( {\r\n    profile,\r\n    dialogs,\r\n    users,\r\n    auth,\r\n    app,\r\n} )\r\n\r\nconst middleware = [\r\n    reduxThunk,\r\n]\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore( rootReducer, composeWithDevTools( applyMiddleware( ...middleware ) ) )\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\nexport type allActionsType = usersActionTypes\r\n    | profileActionsTypes\r\n    | dialogsActionTypes\r\n    | authActionTypes\r\n    | appActionTypes\r\n\r\nexport type thunkType = ThunkAction<any, AppStateType, any, allActionsType>\r\n\r\n\r\nexport function useAppSelector<T>(selector: (state: AppStateType) => T): T {\r\n    return useSelector<AppStateType, T>( selector )\r\n}","import axios from \"axios\"\r\nimport { UserType } from \"../redux/usersReducer\"\r\nimport { baseRequestConfig } from \"./authApi\"\r\n\r\n\r\nexport enum resultCodes {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\n\r\n\r\nexport type commonResponseType<T = {}, R = resultCodes> = {\r\n    resultCode: R\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\ntype responseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const axiosInstance = axios.create( baseRequestConfig )\r\n\r\nexport const usersAPI = {\r\n    getUsers: (page: number) => axiosInstance.get<responseType>( `/users`, { params: { page } } ),\r\n\r\n    follow: (userId: number) => axiosInstance.post<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n    unFollow: async (userId: number) => axiosInstance.delete<commonResponseType>( `/follow/${ userId }` ),\r\n\r\n}","import axios from 'axios'\r\nimport { baseRequestConfig } from './authApi'\r\n\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return axios.get<{ url: string }>( 'security/get-captcha-url', baseRequestConfig )\r\n    },\r\n}","import { authAPI, loginResultCodes } from \"../api/authApi\"\r\nimport { loginValuesType } from \"../components/Login/Login\"\r\nimport { resultCodes } from '../api/usersApi'\r\nimport { thunkType } from './redux-store'\r\nimport { securityAPI } from '../api/securityAPI'\r\n\r\n\r\nconst initState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    captcha: null as string | null,\r\n    isAuth: false as boolean,\r\n    error: null as string | null\r\n}\r\ntype authStateType = typeof initState\r\n\r\nconst authReducer = (state = initState, action: authActionTypes): authStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type authActionTypes = setUserDataActionType | setErrorActionType\r\ntype setUserDataActionType = ReturnType<typeof setUserData>\r\ntype setErrorActionType = ReturnType<typeof setError>\r\n\r\nexport const setUserData = (payload: Partial<authStateType>) => ( {\r\n    type: 'SET_USER_DATA',\r\n    payload,\r\n} as const )\r\n\r\nexport const setError = (error: string) => ({\r\n    type: 'SET_ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const getAuthUserData = (): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { messages, resultCode, data } } = await authAPI.me()\r\n        if (status === 200 && resultCode === 0) {\r\n            dispatch( setUserData( { ...data, isAuth: true } ) )\r\n        }\r\n        messages[0]\r\n        && console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport const makeLogin = (loginData: loginValuesType): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.login( loginData )\r\n        if (status === 200 && resultCode === loginResultCodes.SUCCESS) {\r\n            dispatch( getAuthUserData() )\r\n        } else if (resultCode === loginResultCodes.ERROR && messages[0]) {\r\n            dispatch(setError(messages[0]))\r\n        }else if (resultCode === loginResultCodes.CAPTCHA_IS_REQUIRED) {\r\n            dispatch(setError(messages[0]))\r\n            dispatch(getCaptcha())\r\n        }\r\n        return\r\n    } catch (err) {\r\n        console.log( err )\r\n    }\r\n}\r\n\r\nexport const makeLogout = (): thunkType => async dispatch => {\r\n    try {\r\n        const { status, data: { messages, resultCode } } = await authAPI.logOut()\r\n\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( setUserData( initState) )\r\n        } else {\r\n            messages[0]\r\n            && console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): thunkType => async dispatch => {\r\n    try {\r\n        const { data: { url } } = await securityAPI.getCaptcha()\r\n        dispatch(setUserData({captcha: url}))\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type dialogType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type messageType = {\r\n    id: string\r\n    text: string\r\n    owner: boolean\r\n}\r\n\r\nexport type dialogsStateType = typeof initState\r\n\r\nconst initState = {\r\n    dialogs: [\r\n        {name: \"Sergey\", id: 1},\r\n        {name: \"Artem\", id: 2},\r\n        {name: \"Nikolay\", id: 3},\r\n    ] as Array<dialogType>,\r\n    messages: [\r\n        {id: v1(), text: 'Здорово, корова', owner: false},\r\n        {id: v1(), text: 'Здорово, сама', owner: true},\r\n    ] as Array<messageType>,\r\n    newMessageValue: '',\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsStateType = initState, action: dialogsActionTypes): dialogsStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return state.newMessageValue.trim()\r\n                ? {\r\n                    ...state,\r\n                    messages: [\r\n                        ...state.messages,\r\n                        {id: v1(), text: state.newMessageValue, owner: true}\r\n                    ],\r\n                    newMessageValue: '',\r\n                }\r\n                : {...state, newMessageValue: ''}\r\n        case ON_MESSAGE_CHANGE:\r\n            return {...state, newMessageValue: action.newValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ADD_MESSAGE = \"ADD-MESSAGE\";\r\nexport const ON_MESSAGE_CHANGE = \"ON-MESSAGE-CHANGE\";\r\n\r\n\r\nexport type dialogsActionTypes = AddMessageAType | OnMessageChangeActionType\r\nexport type AddMessageAType = ReturnType<typeof addMessage>\r\nexport type OnMessageChangeActionType = ReturnType<typeof onMessageChange>\r\n\r\nexport const addMessage = () => ({type: ADD_MESSAGE} as const)\r\nexport const onMessageChange = (newValue: string) => ({type: ON_MESSAGE_CHANGE, newValue} as const)\r\n\r\n\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__19X4w\",\"postContent\":\"Post_postContent__NaiCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2kFjo\",\"dialogsItems\":\"Dialogs_dialogsItems__s8pKg\",\"dialog\":\"Dialogs_dialog__3sjE3\",\"messages\":\"Dialogs_messages__2NsY6\",\"addMessageForm\":\"Dialogs_addMessageForm__1PCt5\"};","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.ldsRipple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { thunkType } from './redux-store'\r\nimport { getAuthUserData } from './authReducer'\r\n\r\n\r\nconst initState = {\r\n    isInitSuccess: false,\r\n}\r\n\r\n\r\ntype appStateType = typeof initState\r\n\r\nconst appReducer = (state = initState, action: appActionTypes): appStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INIT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitSuccess: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type appActionTypes = setInitSuccessActionType\r\n\r\ntype setInitSuccessActionType = ReturnType<typeof setInitSuccess>\r\n\r\nconst setInitSuccess = () => ( {\r\n    type: 'SET_INIT_SUCCESS',\r\n} as const )\r\n\r\nexport const initApp = (): thunkType => dispatch => {\r\n    const getAuthPr = dispatch( getAuthUserData() )\r\n    Promise.all( [getAuthPr] )\r\n        .then( () => {\r\n            dispatch( setInitSuccess() )\r\n        } )\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SuperLink_item__1TDuK\",\"active\":\"SuperLink_active__3WhmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1hxPd\",\"ldsRipple\":\"Preloader_ldsRipple__3vP0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3f-uD\",\"description\":\"ProfileInfo_description__1V-2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateProfile\":\"UpdateProfile_updateProfile__29J1S\",\"modal\":\"UpdateProfile_modal__1TRFM\",\"wrapper\":\"UpdateProfile_wrapper__2KVW2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15grG\",\"userMessage\":\"Message_userMessage__5V8YA\"};","import { resultCodes, usersAPI } from \"../api/usersApi\"\r\nimport { AppStateType, thunkType } from \"./redux-store\"\r\nimport { profileActionsTypes } from \"./profileReducer\"\r\nimport { authActionTypes } from \"./authReducer\"\r\nimport { dialogsActionTypes } from \"./diaogsReducer\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\n\r\n\r\nexport type UsersStateType = typeof initState\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nconst initState = {\r\n    items: [] as Array<UserType>,\r\n    totalItemsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    totalPagesCount: 1,\r\n    // isFetching: false,\r\n}\r\n\r\nconst usersReducer = (state: UsersStateType = initState, action: usersActionTypes): UsersStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: true } : m ) }\r\n        case 'UN_FOLLOW':\r\n            return { ...state, items: state.items.map( m => m.id === action.userId ? { ...m, followed: false } : m ) }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                items: [...action.items],\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            }\r\n        case 'SET_TOTAL_ITEMS_COUNT':\r\n            return {\r\n                ...state,\r\n                totalItemsCount: action.totalItemsCount,\r\n                totalPagesCount: Math.ceil( action.totalItemsCount / state.pageSize ),\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type usersActionTypes =\r\n    followActionType\r\n    | unFollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalItemsCountActionType\r\n\r\nexport type followActionType = ReturnType<typeof followAC>\r\nexport type unFollowActionType = ReturnType<typeof unFollowAC>\r\nexport type setUsersActionType = ReturnType<typeof setUsersAC>\r\nexport type setCurrentPageActionType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalItemsCountActionType = ReturnType<typeof setTotalItemsCount>\r\n\r\n\r\nexport const followAC = (userId: number) => ( { type: 'FOLLOW', userId } as const )\r\n\r\nexport const unFollowAC = (userId: number) => ( { type: 'UN_FOLLOW', userId } as const )\r\n\r\nexport const setUsersAC = (items: Array<UserType>) => ( {\r\n    type: 'SET_USERS',\r\n    items,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (pageNumber: number) => ( { type: 'SET_CURRENT_PAGE', pageNumber } as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: 'SET_TOTAL_ITEMS_COUNT',\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const follow = (userId: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.follow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( followAC( userId ) )\r\n\r\n        } else if (messages[0]) {\r\n            console.log( messages[0] )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { status, data: { resultCode, messages } } = await usersAPI.unFollow( userId )\r\n        if (status === 200 && resultCode === resultCodes.SUCCESS) {\r\n            dispatch( unFollowAC( userId ) )\r\n        } else if (messages[0]) console.log( messages[0] )\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage: number): thunkType => async (dispatch) => {\r\n    try {\r\n        const { data, status } = await usersAPI.getUsers( currentPage )\r\n        if (status === 200 && data) {\r\n            const { items, totalCount } = data\r\n            dispatch( setTotalItemsCount( totalCount ) )\r\n            dispatch( setUsersAC( items ) )\r\n        }\r\n    } catch (e) {\r\n        console.log( e )\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qHHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2vr7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__WSORZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__1aoyQ\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Dispatch } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType, thunkType } from \"../../../redux/redux-store\"\r\nimport { makeLogout } from \"../../../redux/authReducer\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { selectIsAuth, selectIsUserLogin } from '../../../redux/selectors'\r\n\r\n\r\nexport const LoginForm = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const login = useSelector<AppStateType, string | null>( selectIsUserLogin )\r\n    const dispatch = useDispatch<Dispatch<thunkType>>()\r\n\r\n    const onLogoutButtonClickHandler = () => {\r\n        dispatch( makeLogout() )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <> { login }\r\n                        <button onClick={ onLogoutButtonClickHandler }>logOut</button>\r\n                    </>\r\n                    : <NavLink to={ `/login` }>Login</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Header.module.css\"\nimport {LoginForm} from \"./LoginForm/LoginForm\";\n\n\nfunction Header() {\n    return (\n        <header className={s.header}>\n            <img src=\"https://brandmark.io/logo-rank/imagecache/701d7e7db0c5bcc76a3f7bd29d4a8890.png\" alt=\"\"/>\n            <LoginForm/>\n        </header>\n    )\n}\n\nexport default Header;","import { Link, useLocation } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport s from \"./SuperLink.module.css\"\r\n\r\n\r\nexport type LinkType = {\r\n    to: string\r\n    linkName: string\r\n}\r\n\r\nexport function SuperLink(props: LinkType) {\r\n    const { pathname } = useLocation()\r\n    return (\r\n        <div className={ s.item }>\r\n            <Link to={ props.to }\r\n                  className={ pathname === props.to ? s.active : '' }\r\n            >\r\n                { props.linkName }\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport s from \"./NavBar.module.css\"\nimport {SuperLink} from \"./SuperLink/SuperLink\";\n\nexport function NavBar () {\n    return (\n        <nav className={s.nav}>\n            <SuperLink to={'/profile'} linkName={'Profile'}/>\n            <SuperLink to={'/dialogs'} linkName={'Messages'}/>\n            <SuperLink to={'/users'} linkName={'Users'}/>\n            <SuperLink to={'/chat'} linkName={'Chat'}/>\n        </nav>\n    )\n}\n","import React, { ChangeEventHandler, KeyboardEventHandler, MouseEventHandler, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../../../redux/redux-store\"\r\n\r\nimport s from './ProfileStatus.module.css'\r\nimport { setStatus, setStatusToState } from \"../../../../redux/profileReducer\"\r\nimport { selectCurrentProfileUserId, selectAuthorisedUserId, selectStatus } from '../../../../redux/selectors'\r\n\r\n\r\nexport const ProfileStatus = () => {\r\n    const status = useSelector<AppStateType, string>( selectStatus)\r\n    const authUserId = useSelector<AppStateType, number | null>( selectAuthorisedUserId )\r\n    const profileUserId = useSelector<AppStateType, number | undefined>( selectCurrentProfileUserId )\r\n    const [editMode, setEditMode] = useState( false )\r\n    const [spanValue, setSpanValue] = useState( status )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        status !== spanValue\r\n        && setSpanValue( status )\r\n    }, [status] )\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            dispatch( setStatusToState( '' ) )\r\n        }\r\n    }, [] )\r\n\r\n    const discardChanges = () => {\r\n        setEditMode( false )\r\n        setSpanValue( status )\r\n    }\r\n    const onChangeHandler: ChangeEventHandler<HTMLInputElement> = e => setSpanValue( e.currentTarget.value )\r\n\r\n    const onKeyDownHandler: KeyboardEventHandler<HTMLInputElement> = e => {\r\n        switch (e.key) {\r\n            case 'Enter':\r\n                spanValue !== status\r\n                && dispatch( setStatus( spanValue ) )\r\n\r\n                setEditMode( false )\r\n                break\r\n            case 'Escape':\r\n                discardChanges()\r\n                break\r\n            default:\r\n            // console.log(e.key)\r\n        }\r\n    }\r\n\r\n    const onDoubleClickHandler: MouseEventHandler<HTMLDivElement> = () => setEditMode( !editMode )\r\n\r\n    const isStatusOwner = authUserId === profileUserId\r\n\r\n    const getStatusMessage = () => {\r\n        if (status) return status\r\n        if (isStatusOwner) return 'Click here to change your status'\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <div onDoubleClick={ onDoubleClickHandler }>\r\n\r\n            {\r\n                ( editMode && isStatusOwner )\r\n\r\n                    ? <input\r\n                        value={ spanValue }\r\n                        onChange={ onChangeHandler }\r\n                        onKeyDown={ onKeyDownHandler }\r\n                        onBlur={ discardChanges }\r\n                        autoFocus\r\n                    />\r\n\r\n                    : <span className={s.status}>\r\n                        { getStatusMessage() }\r\n                    </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport s from './UpdateProfile.module.css'\r\nimport { useAppSelector } from '../../../../redux/redux-store'\r\nimport { selectCurrentProfile } from '../../../../redux/selectors'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport { updateProfile } from '../../../../redux/profileReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst validateHref = (href: string) => {\r\n    const regexp = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n    return regexp.test( href )\r\n}\r\n\r\ntype contactsType = {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    youtube: string\r\n    website: string,\r\n}\r\n\r\n\r\ntype initValuesTypeType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    contacts: Partial<contactsType>\r\n}\r\n\r\ntype UpdateProfilePropsType = {\r\n    confirm?: (payload: any) => void;\r\n    cancel: () => void;\r\n};\r\n\r\n\r\nexport const UpdateProfile = ({ cancel, confirm }: UpdateProfilePropsType) => {\r\n    const profile = useAppSelector( selectCurrentProfile )\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        const body = document.querySelector( 'body' )\r\n        if (body) body.style.overflow = 'hidden'\r\n        return () => {\r\n            if (body) body.style.overflow = 'auto'\r\n        }\r\n    }, [] )\r\n\r\n    return (\r\n        <div className={ s.modal } onClick={ cancel }>\r\n            <div className={ s.updateProfile } onClick={ (e) => e.stopPropagation() }>\r\n                <Formik\r\n                    initialValues={ {\r\n                        fullName: profile?.fullName || '',\r\n                        aboutMe: profile?.aboutMe || '',\r\n                        lookingForAJob: profile?.lookingForAJob || false,\r\n                        lookingForAJobDescription: profile?.lookingForAJobDescription || '',\r\n                        contacts: {\r\n                            facebook: profile?.contacts.facebook || '',\r\n                            github: profile?.contacts.github || '',\r\n                            instagram: profile?.contacts.instagram || '',\r\n                            mainLink: profile?.contacts.mainLink || '',\r\n                            twitter: profile?.contacts.twitter || '',\r\n                            vk: profile?.contacts.vk || '',\r\n                            youtube: profile?.contacts.youtube || '',\r\n                            website: profile?.contacts.website || '',\r\n                        },\r\n                    } }\r\n                    validate={ values => {\r\n                        const errors: Partial<initValuesTypeType> = {}\r\n                        if (!values.lookingForAJobDescription) {\r\n                            errors.lookingForAJobDescription = 'Required'\r\n                        }\r\n                        if (!values.fullName) {\r\n                            errors.fullName = 'Required'\r\n                        }\r\n                        if (!values.aboutMe) {\r\n                            errors.aboutMe = 'Required'\r\n                        }\r\n                        Object.keys( values.contacts ).forEach( f => {\r\n                            const key = f as keyof contactsType\r\n                            if (values.contacts[key] && !validateHref( values.contacts[key] )) {\r\n                                if (!errors.contacts) {\r\n                                    errors.contacts = {}\r\n                                }\r\n                                errors.contacts[key] = 'invalid link'\r\n                            }\r\n                        } )\r\n                        return errors\r\n                    } }\r\n                    onSubmit={ async (values, { setSubmitting }) => {\r\n                        const success = await dispatch( updateProfile( values ) )\r\n                        setSubmitting( false )\r\n                    } }\r\n                >\r\n                    { ({ values, isSubmitting }) => (\r\n                        <Form action=\"\">\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Personal information</legend>\r\n                                <span>My name</span>\r\n                                <Field type=\"text\" name='fullName' placeholder='Name'/>\r\n                                <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n                                <span>About me</span>\r\n                                <Field type=\"text\" name='aboutMe' placeholder='about me'/>\r\n                                <ErrorMessage name={ 'aboutMe' } component={ 'div' }/>\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Job information</legend>\r\n                                <div><Field type=\"checkbox\" name='lookingForAJob'/>\r\n                                    <span>Looking for a job</span></div>\r\n                                {\r\n                                    values.lookingForAJob\r\n                                    && <>\r\n                                        <span>Job description</span>\r\n                                        <Field type=\"text\" name='lookingForAJobDescription'\r\n                                               placeholder='looking for a job description'/>\r\n                                        <ErrorMessage name={ 'lookingForAJobDescription' } component={ 'div' }/>\r\n                                    </>\r\n                                }\r\n                            </fieldset>\r\n                            <fieldset disabled={ isSubmitting }>\r\n                                <legend>Contacts</legend>\r\n                                {\r\n                                    Object.keys( values.contacts ).map( m => {\r\n                                        return (\r\n                                            <div key={ m }>\r\n                                                <Field type=\"text\" name={ `contacts.${ m }` } placeholder={ m }/>\r\n                                                <ErrorMessage name={ `contacts.${ m }` } component={ 'div' }/>\r\n                                            </div>\r\n                                        )\r\n                                    } )\r\n                                }\r\n                            </fieldset>\r\n                            <button type='submit' disabled={ isSubmitting }>send</button>\r\n                        </Form> ) }\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ChangeEventHandler, useEffect, useState } from \"react\"\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Preloader } from \"../../Common/Preloader/Preloader\"\r\nimport { ProfileStatus } from \"./ProfileStatus/ProfileStatus\"\r\nimport { selectAuthorisedUserId, selectCurrentProfile } from '../../../redux/selectors'\r\nimport { useAppSelector } from '../../../redux/redux-store'\r\nimport { contactsType, setPhoto } from '../../../redux/profileReducer'\r\nimport { UpdateProfile } from './UpdateProfile/UpdateProfile'\r\n\r\n\r\nexport function ProfileInfo() {\r\n    const [editMode, setEditMode] = useState( false )\r\n    const profile = useSelector( selectCurrentProfile )\r\n    const authorisedUserId = useAppSelector( selectAuthorisedUserId )\r\n    const dispatch = useDispatch()\r\n    const profileImg = ( profile && profile.photos.small ) ? profile.photos.small : \"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\"\r\n    // console.log('profileInfo')\r\n    const onPhotoClickHandler: ChangeEventHandler<HTMLInputElement> = e => {\r\n        e.currentTarget.files &&\r\n        dispatch( setPhoto( e.currentTarget.files[0] ) )\r\n    }\r\n\r\n    useEffect( () => {\r\n        setEditMode( false )\r\n    }, [profile] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                && <UpdateProfile cancel={ () => setEditMode( false ) }/>\r\n            }\r\n            {\r\n                profile\r\n                    ? <div className={ s.profileInfo }>\r\n                        <label htmlFor=\"image\">\r\n                            {\r\n                                profile.userId === authorisedUserId &&\r\n                                <input type=\"file\" name=\"image\" id=\"image\" style={ { display: 'none' } }\r\n                                       onChange={ onPhotoClickHandler }/>\r\n                            }\r\n                            <img src={ profileImg } alt=\"\"/>\r\n                        </label>\r\n                        <div className={ s.description }>\r\n                            { profile.fullName }\r\n                            <ProfileStatus/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    : <Preloader/>\r\n            }\r\n            <div>\r\n                <div>About me: {profile?.aboutMe}</div>\r\n                <div>Looking for a job: {profile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n                { profile?.lookingForAJob && <div>Job description: { profile?.lookingForAJobDescription  }</div> }\r\n                <div>Contacts:</div>\r\n                {\r\n                    profile\r\n                    && Object.keys( profile.contacts )\r\n                        .reduce( (acc, el) => {\r\n                            const value = profile.contacts[el as keyof contactsType]\r\n                            return value ? [...acc, <Contact value={ value } title={ el } key={ el }/>] : acc\r\n                        }, [] as JSX.Element[] )\r\n                }\r\n            </div>\r\n\r\n            {\r\n                authorisedUserId === profile?.userId\r\n                && <button onClick={ () => setEditMode( true ) }>edit profile</button>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Contact: React.FC<{ title: string, value: string | null }> = ({ title, value }) => {\r\n    return (\r\n        <div style={{marginLeft: 15}}>{ title }: { value }</div>\r\n    )\r\n}","import React from \"react\";\nimport s from \"./Post.module.css\"\nimport {PostType} from \"../../../../redux/profileReducer\";\n\n\nfunction Post (props:PostType) {\n    return (\n        <div className={s.postItem}>\n            <div className={s.postContent}>\n                <img src=\"https://e7.pngegg.com/pngimages/931/209/png-clipart-computer-icons-symbol-avatar-logo-person-with-helmut-miscellaneous-black.png\" alt=\"\"/>\n                <div className={s.postMessage}>{props.message}</div>\n            </div>\n            <div className={s.likesCount}>\n                Likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React, { ChangeEvent } from \"react\"\nimport Post from \"./Post/Post\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { addPost, onPostChange, PostType } from \"../../../redux/profileReducer\"\nimport { AppStateType } from \"../../../redux/redux-store\"\nimport { selectNewPostMessage, selectPosts } from '../../../redux/selectors'\n\n\nexport function MyPosts() {\n    console.log('my posts')\n    const newPostMessage = useSelector<AppStateType, string>( selectNewPostMessage )\n    const posts = useSelector<AppStateType, PostType[]>( selectPosts )\n    const dispatch = useDispatch()\n\n    const onButtonClickHandler = () => dispatch( addPost() )\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const value = e.currentTarget.value\n        dispatch( onPostChange( value ) )\n    }\n    const mappedPosts = posts.map( p => <Post id={ p.id } key={ p.id } message={ p.message }\n                                              likesCount={ p.likesCount }/> )\n\n    return (\n        <div>\n            My posts\n            <div>\n                <textarea value={ newPostMessage } onChange={ onChangeHandler } name=\"\" id=\"\"/>\n            </div>\n            <div>\n                <button onClick={ onButtonClickHandler }>Add Post</button>\n            </div>\n            { mappedPosts }\n        </div>\n    )\n}","import React, { useEffect } from \"react\"\r\nimport s from \"./Profile.module.css\"\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\"\r\nimport { MyPosts } from \"./MyPosts/MyPosts\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAppSelector } from '../../redux/redux-store'\r\nimport { selectAuthorisedUserId } from '../../redux/selectors'\r\nimport { initProfile, setProfile } from '../../redux/profileReducer'\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport const Profile = () => {\r\n    let { userId } = useParams<PathParamsType>()\r\n    const dispatch = useDispatch()\r\n    const authUserId = useAppSelector( selectAuthorisedUserId )\r\n    useEffect( () => {\r\n        if (!userId && authUserId) {\r\n            userId = authUserId.toString()\r\n        }\r\n        userId\r\n        && dispatch( initProfile( userId ) )\r\n        return () => {\r\n            dispatch( setProfile( null ) )\r\n        }\r\n    }, [userId] )\r\n\r\n    return (\r\n        <div className={ s.profile }>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\";\r\nimport {SuperLink} from \"../../NavBar/SuperLink/SuperLink\";\r\nimport {dialogType} from \"../../../redux/diaogsReducer\";\r\n\r\nfunction Dialog(props:dialogType) {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <SuperLink to={`/dialogs/${props.id}`} linkName={props.name}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\nimport {messageType} from \"../../../redux/diaogsReducer\";\r\n\r\n\r\nfunction Message (props:messageType) {\r\n    return (\r\n        <div className={`${props.owner ? s.userMessage: s.message}`}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport s from \"./Dialogs.module.css\"\r\nimport Dialog from \"./Dialog/Dialog\"\r\nimport Message from \"./Message/Message\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\nimport { addMessage, dialogType, messageType, onMessageChange } from \"../../redux/diaogsReducer\"\r\nimport { redirectHOC } from \"../Common/hoc/redirectHOC\"\r\nimport { selectDialogs, selectMessages, selectNewMessageValue } from '../../redux/selectors'\r\n\r\n\r\nconst Dialogs = redirectHOC( () => {\r\n    const dialogs = useSelector<AppStateType, dialogType[]>( selectDialogs )\r\n    const messages = useSelector<AppStateType, messageType[]>( selectMessages )\r\n    const newMessageValue = useSelector<AppStateType, string>( selectNewMessageValue )\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonClickHandler = (): void => {\r\n        dispatch( addMessage() )\r\n    }\r\n    const onNewMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n        dispatch( onMessageChange( e.currentTarget.value ) )\r\n    }\r\n\r\n    const dialogsItems = dialogs.map( d => <Dialog name={ d.name } key={ d.id } id={ d.id }/> )\r\n    const messagesItems = messages.map( m => <Message id={ m.id } key={ m.id } text={ m.text } owner={ m.owner }/> )\r\n\r\n\r\n    return (\r\n\r\n        <div className={ s.dialogs }>\r\n            <div className={ s.dialogsItems }>\r\n                <h3>Dialogs:</h3>\r\n                { dialogsItems }\r\n            </div>\r\n            <div className={ s.messages }>\r\n                { messagesItems }\r\n            </div>\r\n            <div className={ s.addMessageForm }>\r\n                <textarea onChange={ onNewMessageChange } value={ newMessageValue }/>\r\n                <button onClick={ onButtonClickHandler }>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport default Dialogs","import { useAppSelector } from \"../../../redux/redux-store\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport React, { ComponentType } from \"react\"\r\nimport { selectIsAuth } from '../../../redux/selectors'\r\n\r\n\r\nexport function redirectHOC<T>(Component: ComponentType<T>) {\r\n    return (props: T) => {\r\n        const isAuth = useAppSelector( selectIsAuth )\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={ '/login' }/>\r\n        }\r\n        return <Component { ...props as T }/>\r\n    }\r\n}\r\n","import { Navigate, Route, Routes } from 'react-router-dom'\r\nimport { Profile } from './components/Profile/Profile'\r\nimport Dialogs from './components/Dialogs/Dialogs'\r\nimport React from 'react'\r\n\r\nconst Chat = React.lazy( () => import('./components/Chat/Chat') )\r\nconst Users = React.lazy( () => import('./components/Users/Users') )\r\nconst Login = React.lazy( () => import('./components/Login/Login') )\r\n\r\nexport const MyRoutes = () => {\r\n    return(\r\n        <Routes>\r\n            <Route path={ '/profile' } element={ <Profile/> }>\r\n                <Route path={ ':userId' } element={ <Profile/> }/>\r\n            </Route>\r\n            <Route path='/dialogs' element={ <Dialogs/> }/>\r\n            <Route path={ '/users' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Users/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path={ '/login' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Login/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path={ '/chat' } element={ (\r\n                <React.Suspense fallback={ <>...</> }>\r\n                    <Chat/>\r\n                </React.Suspense> ) }\r\n            />\r\n\r\n            <Route path=\"*\" element={ <Navigate to=\"/profile\"/> }/>\r\n        </Routes>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport Header from \"./components/Header/Header\"\r\nimport { NavBar } from \"./components/NavBar/NavBar\"\r\nimport { HashRouter } from \"react-router-dom\"\r\nimport { Provider, useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType, store } from './redux/redux-store'\r\nimport { Preloader } from './components/Common/Preloader/Preloader'\r\nimport { initApp } from './redux/appReducer'\r\nimport { selectIsInitialised } from './redux/selectors'\r\nimport { MyRoutes } from './MyRoutes'\r\n\r\n\r\nconst App = () => {\r\n    // const isAuth = useSelector<AppStateType, boolean>( selectIsAuth )\r\n    const isInitialised = useSelector<AppStateType, boolean>( selectIsInitialised )\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch( initApp() )\r\n    }, [] )\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isInitialised ? <div className=\"app-wrapper\">\r\n                        <Header/>\r\n                        <NavBar/>\r\n                        <div className={ 'app-wrapper-content' }>\r\n\r\n                            <MyRoutes/>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst AppContainer = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AppContainer\r\n\r\n","import './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport App from \"./App\"\nimport { store } from \"./redux/redux-store\"\nimport { Provider } from \"react-redux\"\n\n\nReactDOM.render(\n    // <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    // </React.StrictMode>\n    ,\n    document.getElementById( 'root' ),\n)\n\n\n// store.subscribe( () => rerenderEntireTree( store.getState() ) )\n// rerenderEntireTree( store.getState() )\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n"],"sourceRoot":""}